openapi: 3.0.0
info:
  title: DossierData API
  version: ""
  description: Welcome to the **DossierData API**. This API provides access to a all data
    from a tenant within DossierData.
paths:
  /protected:
    get:
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                required:
                  - status
              examples:
                response:
                  value:
                    status: ok
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Query Example
      description: ""
      tags:
        - Authentication
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - name: token
          in: query
          description: ""
          required: true
          example: vr5HmMkzlxKE70W1y4MibiJUusZwZC25NOVBEx3BD1
          schema:
            type: string
  /oauth/authorize:
    get:
      responses:
        200:
          description: OK
          headers: {}
          content:
            text/html:
              examples:
                response:
                  value: |
                    Authorize page
        "302":
          description: Found
          headers:
            Location:
              schema:
                type: string
      summary: Authorize
      description: >-
        Load the authorization page.


        If the user is already logged in (this depends on if you takle cookies into account) you will get the autorization page.


        If the user is **NOT** logged in, you will be redirected to the login page after which you will be redirected back to

        this page.
      tags:
        - Authorization
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - name: client_id
          in: query
          description: Your OAuth client id.
          required: true
          example: d5fb86ec–60a0–49fe–9571–3615d74843ac
          schema:
            type: string
        - name: scope
          in: query
          description: The scopes you are requesting access for, comma separated.
          required: true
          example: customer:basic, customer:contact
          schema:
            type: string
        - name: redirect_uri
          in: query
          description: Your callback URL.
          required: true
          example: http://callback.url
          schema:
            type: string
        - name: response_type
          in: query
          description: Requested response type.
          required: true
          example: code
          schema:
            type: string
  /your_callback:
    get:
      responses:
        200:
          description: OK
          headers: {}
      summary: Callback
      description: Getting the authorization code back to you so you can fetch an access
        token
      tags:
        - Authorization
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - name: code
          in: query
          description: The code to request your access token
          required: true
          example: a4dd64ffb43e6bfe16d47acfab1e68d9c7a28381
          schema:
            type: string
  /oauth/access_token#authorization_code:
    post:
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Your new oauth access token
                  token_type:
                    type: string
                    description: The token type
                  expires_in:
                    type: number
                    description: The number of seconds this token is valid for
                  refresh_token:
                    type: string
                    description: The refresh token that can be used to request a new access
                      token when the old one expires or is about to expire.
              examples:
                response:
                  value:
                    access_token: A7NoRur7CJVbhRPGKjA2l4uCenFRgpR4klOgtMu0
                    token_type: Bearer
                    expires_in: 86400
                    refresh_token: 7jQTFMTE9ZVpu5CvHdYPQgIBwdynu53qlagx7uLK
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Access token
      description: Requesting the oauth access token.
      tags:
        - Authorization
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description: Your client id
                client_secret:
                  type: string
                  description: Your client secret
                grant_type:
                  type: string
                  description: The grant type
                code:
                  type: string
                  description: The code from the previous request
                redirect_uri:
                  type: string
                  description: Your callback URL.
              required:
                - client_id
                - client_secret
                - grant_type
                - code
                - redirect_uri
              example:
                client_id: d5fb86ec-60a0-49fe-95710-3615d74843ac
                client_secret: 4d768389b2e9e9d5584a165204d72235c3c75401
                grant_type: authorization_code
                code: a4dd64ffb43e6bfe16d47acfab1e68d9c7a28381
                redirect_uri: http://callback.url
  /oauth/access_token#refresh_token:
    post:
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Your new oauth access token
                  token_type:
                    type: string
                    description: The token type
                  expires_in:
                    type: number
                    description: The number of seconds this token is valid for
                  refresh_token:
                    type: string
                    description: The refresh token that can be used to request a new access
                      token when the old one expires or is about to expire.
              examples:
                response:
                  value:
                    access_token: A7NoRur7CJVbhRPGKjA2l4uCenFRgpR4klOgtMu0
                    token_type: Bearer
                    expires_in: 86400
                    refresh_token: 7jQTFMTE9ZVpu5CvHdYPQgIBwdynu53qlagx7uLK
        400:
          $ref: '#/components/responses/BadScopeRequest'
        401:
          $ref: '#/components/responses/ClientUnauthorized'
      summary: Refresh Token
      description: Refreshing an oauth access token by the refresh token.
      tags:
        - Authorization
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: Specify the refresh grant type
                refresh_token:
                  type: string
                  description: The refresh token provided to you when you first requested
                    the access token.
              required:
                - grant_type
                - refresh_token
              example:
                grant_type: refresh_token
                refresh_token: 7jQTFMTE9ZVpu5CvHdYPQgIBwdynu53qlagx7uLK
  /address:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedAddresses'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a paginated list of all Addresses.
      tags:
        - Address
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Address
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Address"
  /address/{address_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Address'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Address
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AddressId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Address
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AddressId'
      requestBody:
        $ref: "#/components/requestBodies/Address"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Address
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AddressId'
  /address/by_customer/{customer_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedAddresses'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Address
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
  /customer:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedCustomers'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a paginated list of all Customers.
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - customer:full
            - customer:basic
            - customer:contact
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Customer"
      security:
        - oauth2:
            - customer:create
  /customer/lead:
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new customer of the type lead
      description: ""
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CustomerLead"
      security:
        - oauth2:
            - customer:create_lead
  /customer/open/{customer_id_or_uuid}:
    get:
      responses:
        200:
          $ref: '#/components/responses/CustomerURI'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Open
      description: Get uri to the dashboard of customer
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerIdOrUUId'
      security:
        - oauth2:
            - customer:full
  /customer/mortgage_lead:
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create mortgage lead
      description: ""
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CustomerLead"
      security:
        - oauth2:
            - customer:create_mortgage_lead
  /customer/ax_message:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedCustomers'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Find existing customers that match the details of the provided ax message
      description: ""
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      requestBody:
        $ref: "#/components/requestBodies/XMLAXMessage"
      security:
        - oauth2:
            - customer:full
  /customer/by_relation_number:
    post:
      responses:
        200:
          $ref: '#/components/responses/Customer'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Find a customer by a relation number
      description: ""
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/RelationNumber"
      security:
        - oauth2:
            - customer:full
  /customer/{customer_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Customer'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: Show a customer
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
      security:
        - oauth2:
            - customer:full
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: Update a customer
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
      requestBody:
        $ref: "#/components/requestBodies/Customer"
      security:
        - oauth2:
            - customer:full
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: Delete a customer
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
      security:
        - oauth2:
            - customer:full
  /customer/{customer_id}/ax_message:
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: Update a customer with the data from an AX Message.
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
      requestBody:
        $ref: "#/components/requestBodies/XMLAXMessage"
      security:
        - oauth2:
            - customer:full
  /dossier:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedDossiers'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a paginated list of all Dossiers.
      tags:
        - Dossier
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Dossier
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Dossier"
  /dossier/{dossier_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Dossier'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Dossier
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DossierId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Dossier
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DossierId'
      requestBody:
        $ref: "#/components/requestBodies/Dossier"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Dossier
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DossierId'
  /emailAccount:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedEmailAccounts'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all EmailAccounts.
      tags:
        - Email account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Email account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/EmailAccount"
  /emailAccount/{emailAccount_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/EmailAccount'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Email account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/EmailAccountId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Email account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/EmailAccountId'
      requestBody:
        $ref: "#/components/requestBodies/EmailAccount"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Email account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/EmailAccountId'
  /letter:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedLetters'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Letters.
      tags:
        - Letter
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Letter
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Letter"
  /letter/{letter_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Letter'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Letter
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/LetterId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Letter
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/LetterId'
      requestBody:
        $ref: "#/components/requestBodies/Letter"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Letter
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/LetterId'
  /lock:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedLocks'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all locks.
      tags:
        - Lock
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Lock
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Lock"
  /lock/{lock_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Lock'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Lock
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/LockId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Lock
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/LockId'
      requestBody:
        $ref: "#/components/requestBodies/Lock"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Lock
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/LockId'
  /mortgage:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedMortgages'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Mortgages.
      tags:
        - Mortgage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Mortgage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Mortgage"
  /mortgage/{mortgage_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Mortgage'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Mortgage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgageId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Mortgage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgageId'
      requestBody:
        $ref: "#/components/requestBodies/Mortgage"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Mortgage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgageId'
  /mortgagePart:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedMortgageParts'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all mortgageParts.
      tags:
        - Mortgage part
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Mortgage part
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/MortgagePart"
  /mortgagePart/byMortgage/{mortgage_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedMortgageParts'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources by mortgage
      description: Get a list of mortgageParts by a mortgage.
      tags:
        - Mortgage part
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/MortgageId'
  /mortgagePart/{mortgagePart_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedMortgageParts'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Mortgage part
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgagePartId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Mortgage part
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgagePartId'
      requestBody:
        $ref: "#/components/requestBodies/MortgagePart"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Mortgage part
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgagePartId'
  /mortgageProgress:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedMortgageProgress'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all MortgageProgresses.
      tags:
        - Mortgage progress
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Mortgage progress
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/MortgageProgress"
  /mortgageProgress/{mortgageProgress_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/MortgageProgress'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Mortgage progress
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgageProgressId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Mortgage progress
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgageProgressId'
      requestBody:
        $ref: "#/components/requestBodies/MortgageProgress"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Mortgage progress
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgageProgressId'
  /damage:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedDamages'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Damages.
      tags:
        - Damage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Damage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Damage"
  /damage/{damage_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Damage'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Damage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DamageId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Damage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DamageId'
      requestBody:
        $ref: "#/components/requestBodies/Damage"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Damage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DamageId'
  /document:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedDocuments'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Documents.
      tags:
        - Document
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Document
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Document"
  /document/{document_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Document'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Document
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DocumentId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Document
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DocumentId'
      requestBody:
        $ref: "#/components/requestBodies/Document"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Document
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DocumentId'
  /email:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedEmails'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Emails.
      tags:
        - Email
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Email
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Email"
  /email/{email_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Email'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Email
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/EmailId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Email
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/EmailId'
      requestBody:
        $ref: "#/components/requestBodies/Email"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Email
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/EmailId'
  /task:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasks'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Tasks.
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Task"
  /task/{task_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Task'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TaskId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        $ref: "#/components/requestBodies/Task"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TaskId'
  /calendar:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedCalendars'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Calendars.
      tags:
        - Calendar
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Calendar
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Calendar"
  /calendar/{calendar_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Calendar'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Calendar
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CalendarId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Calendar
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CalendarId'
      requestBody:
        $ref: "#/components/requestBodies/Task"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Calendar
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CalendarId'
  /calendar/event:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedCalendarEvents'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Tasks.
      tags:
        - Calendar event
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CalendarEvent"
  /calendar/{calendar_id)/events:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedCalendarEvents'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Calendar Events.
      tags:
        - Calendar event
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
  /calendar/event/{event_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/CalendarEvent'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Calendar event
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CalendarEventId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Calendar event
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CalendarEventId'
      requestBody:
        $ref: "#/components/requestBodies/CalendarEvent"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Calendar event
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CalendarEventId'
  /template:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTemplates'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Templates.
      tags:
        - Template
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Template
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Template"
  /template/{template_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Template'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Template
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TemplateId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Template
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TemplateId'
      requestBody:
        $ref: "#/components/requestBodies/Template"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Template
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TemplateId'
  /note:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedNotes'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Notes.
      tags:
        - Note
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Note
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Note"
  /note/{note_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Note'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Note
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/NoteId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Note
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/NoteId'
      requestBody:
        $ref: "#/components/requestBodies/Note"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Note
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/NoteId'
  /signal:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedSignals'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Signals.
      tags:
        - Signal
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Signal
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Signal"
  /signal/{signal_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Signal'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Signal
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/SignalId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Signal
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/SignalId'
      requestBody:
        $ref: "#/components/requestBodies/Signal"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Signal
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/SignalId'
  /account:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedAccounts'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Accounts.
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Account"
  /account/{account_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Account'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AccountId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AccountId'
      requestBody:
        $ref: "#/components/requestBodies/Account"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AccountId'
  /office:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedOffices'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Offices.
      tags:
        - Office
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Office
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Office"
  /office/{office_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Office'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Office
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/OfficeId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Office
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/OfficeId'
      requestBody:
        $ref: "#/components/requestBodies/Office"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Office
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/OfficeId'
  /portal_invitation:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedPortalInvitations'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all portal invitations.
      tags:
        - Portal invitations
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - portal_invitation:index
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: Create a new portal invitation.
      tags:
        - Portal invitations
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreatePortalInvitation"
      security:
        - oauth2:
            - portal_invitation:create
  /portal_invitation/{portalInvitation_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PortalInvitation'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Portal invitations
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PortalInvitationId'
      security:
        - oauth2:
            - portal_invitation:show
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Portal invitations
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PortalInvitationId'
      requestBody:
        $ref: "#/components/requestBodies/PortalInvitation"
      security:
        - oauth2:
            - portal_invitation:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Portal invitations
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PortalInvitationId'
      security:
        - oauth2:
            - portal_invitation:delete
  /portal_invitation/by_token/{portalInvitation_token}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PortalInvitation'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: Show a portal invitation by its token
      tags:
        - Portal invitations
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PortalInvitationToken'
      security:
        - oauth2:
            - portal_invitation:show
  /portal_invitation/by_customer/{customer_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedPortalInvitations'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: List all resource
      description: List all portal invitations for a specific customer
      tags:
        - Portal invitations
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - portal_invitation:index
  /relation_number:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedRelationNumbers'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all portal relation number types.
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - relation_number:index
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: Create a new portal invitation.
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/RelationNumber"
      security:
        - oauth2:
            - relation_number:create
  /relation_number/{relationNumber_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/RelationNumber'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/RelationNumberId'
      security:
        - oauth2:
            - relation_number:show
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/RelationNumberId'
      requestBody:
        $ref: "#/components/requestBodies/RelationNumber"
      security:
        - oauth2:
            - relation_number:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/RelationNumberId'
      security:
        - oauth2:
            - relation_number:delete
  /relation_number_type:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedRelationNumberTypes'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all portal relation number types.
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - relation_number_type:index
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: Create a new portal invitation.
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/RelationNumberType"
      security:
        - oauth2:
            - relation_number_type:create
  /relation_number_type/{relationNumberType_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/RelationNumberType'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/RelationNumberTypeId'
      security:
        - oauth2:
            - relation_number_type:show
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/RelationNumberTypeId'
      requestBody:
        $ref: "#/components/requestBodies/RelationNumberType"
      security:
        - oauth2:
            - relation_number_type:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/RelationNumberTypeId'
      security:
        - oauth2:
            - relation_number_type:delete
  /search:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedSearches'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: List all resources
      description: Get a list of all Searches.
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new resource
      description: ""
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Search"
  /search/{search_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/Search'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: ""
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/SearchId'
    put:
      responses:
        200:
          $ref: '#/components/responses/Updated'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Update a resource
      description: ""
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/SearchId'
      requestBody:
        $ref: "#/components/requestBodies/Search"
    delete:
      responses:
        200:
          $ref: '#/components/responses/Deleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Delete a resource
      description: ""
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/SearchId'
  /hdn/ax_message:
    post:
      responses:
        200:
          $ref: '#/components/responses/AXMessage'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      summary: Queue
      description: >-
        Post an AX Message to be used to update a Customer. If none or multiple customers are matched, the AX Message
        will be stored so a user of the system can manually match it to a customer and validate the updated
        fields/objects.
      tags:
        - HDN
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/XMLAXMessage"
  /hdn/ax_message/{ax_message_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/AXMessage'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      summary: Show a resource
      description: Fetch the status of a queued AX Message.
      tags:
        - HDN
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AXMessageId'
tags:
  - name: Authentication
    description: >-
      This section describes the authentication process.

      ### OAuth2
      Authentication is done based on OAuth2. Tokens have an expiration time of ***24 hours*** and can be refreshed
      ***30 days*** after they were generated.

      #### Client
      To use the api you need to request an OAuth client with which you can request an access token.


      In your request you need to supply the following:
      * Company details
      * A callback URL for OAuth
      * A detailed description of what you plan to use the API for

      Please send your OAuth Client request to `info@dossierdata.nl`.

      #### Login
      When you've received your client credentials, you can prompt your users for an access token access. They need to login
      with their DossierData account and approve that your client can access their data. After this process you obtain an
      access key.

      ### Authentication
      Requesting any endpoint except the authentication will require you to send an access token, this can be done in
      two-ways. Either by Header of in the Query of the request.
  - name: Authorization
    description: |-
      This section lists basic information about the authorization process.

      The two requests that you need for the authorization process are:

      + `/oauth/authorize`

      + `/oauth/access_token`
  - name: Account
    description: Endpoint for Account resource management
  - name: Address
    description: Endpoint for Address resource management
  - name: Calendar
    description: Endpoint for Calendar resource management
  - name: Calendar event
    description: Endpoint for Calendar Event resource management
  - name: Customer
    description: Endpoint for Customer resource management
  - name: Damage
    description: Endpoint for Damage resource management
  - name: Document
    description: Endpoint for Document resource management
  - name: Dossier
    description: Endpoint for Findesk Dossier resource management
  - name: Email account
    description: Endpoint for EmailAccount resource management
  - name: Email
    description: Endpoint for Email resource management
  - name: HDN
    description: Endpoint for HDN functions
  - name: Letter
    description: Endpoint for Letter resource management
  - name: Lock
    description: Endpoint for Lock resource management
  - name: Mortgage part
    description: Endpoint for MortgagePart resource management
  - name: Mortgage progress
    description: Endpoint for MortgageProgress resource management
  - name: Mortgage
    description: Endpoint for Mortgage resource management
  - name: Note
    description: Endpoint for Note resource management
  - name: Office
    description: Endpoint for Office resource management
  - name: Portal invitations
    description: Endpoint for Portal invitations resource management
  - name: Relation number
    description: Endpoint for Portal invitations resource management
  - name: Search
    description: Endpoint for Search resource management
  - name: Signal
    description: Endpoint for signal resource management
  - name: Task
    description: Endpoint for Task resource management
  - name: Template
    description: Endpoint for Template resource management
servers:
  - url: https://{subdomain}.ddat.nl/api/v1
    variables:
      subdomain:
        default: test
components:
  requestBodies:
    Signal:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Signal'
    Task:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
    Template:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Template'
    MortgagePart:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MortgagePart'
    Mortgage:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Mortgage'
    Search:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Search'
    Document:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Document'
    Address:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Address'
    Dossier:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dossier'
    EmailAccount:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailAccount'
    Letter:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Letter'
    Lock:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Lock'
    MortgageProgress:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MortgageProgress'
    Damage:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Damage'
    Email:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Email'
    Note:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Note'
    Account:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    Office:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Office'
    Customer:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    CustomerLead:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerLead'
    XMLAXMessage:
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/OfferteAanvraag'
    Calendar:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Calendar'
    CalendarEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CalendarEvent'
    PortalInvitation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PortalInvitation'
    CreatePortalInvitation:
      content:
        application/json:
          schema:
            type: object
            required:
              - customer_id
              - send_email
              - type
            properties:
              customer_id:
                type: number
                description: The id of the customer of the invite
              send_email:
                type: boolean
                description: A boolean to indicate if DossierData should send an email for the invite
              type:
                $ref: '#/components/schemas/PortalInvitationTypeEnum'
              valid_until:
                type: string
                description: Date time string until when the invite is valid. Set to null if the invite must never expire.
    RelationNumber:
      content:
        application/json:
          schema:
            type: object
            required:
              - number
              - relation_number_type_id
              - numberable_type
              - numberable_id
            properties:
              number:
                type: string
                description: The identifier of the relation number
              relation_number_type_id:
                type: number
                description: The id of the relation number type
              numberable_type:
                $ref: '#/components/schemas/MorphRelationTypeEnum'
              numberable_id:
                type: number
                description: The id of object to which the relation number is attached
              created_at:
                type: string
                description: The datetime when the relation number was created
              updated_at:
                type: string
                description: The datetime when the relation number was last updated
          examples:
            RelationNumberExample:
              $ref: '#/components/examples/RelationNumberStoreExample'
    RelationNumberType:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: The name of the relation number type
  securitySchemes:
    oauth2:
      type: oauth2
      scheme: bearer
      flows:
        authorizationCode:
          authorizationUrl: https://test.ddat.nl/api/v1/oauth/authorize
          tokenUrl: https://test.ddat.nl/api/v1/oauth/access_token
          scopes:
            'account:full': Rekeningen inzien
            'address:basic': Basis adresgegevens
            'address:coordinates': Adres coordinaten
            'address:create': Nieuwe adressen aanmaken
            'customer:basic': Basisgegevens van een klant
            'customer:contact': Contactgegevens van een klant
            'customer:create': Nieuwe klanten aanmaken
            'customer:create_insurance_lead': Nieuwe polis leads aanmaken
            'customer:create_lead': Nieuwe leads aanmaken
            'customer:create_mortgage_lead': Nieuwe hypotheek leads aanmaken
            'customer:full': Alle gegevens van een klant
            'damage_person:address': Schade betrokken persoon adres
            'damage_person:agency': Schade betrokken persoon maatschappij
            'damage_person:basic': Schade betrokken persoon
            'damage:agency': Schade maatschappij
            'damage:basic': Basisgegevens van een schade
            'damage:full': Alle gegevens van een schade
            'document:full': Documenten
            'dossier:full': Dossiers
            'email_account:basic': Basisgegevens van e-mailaccounts
            'email_account:full': Alle gegevens van e-mailaccounts
            'email:full': Emails
            'hdn_ax': AX berichten overzicht
            'hdn_ax:create': Opslaan van nieuwe AX berichten
            'hdn_ax:show': AX bericht statussen
            'letter:full': Brieven
            'lock:full': Locks
            'mortgage_part:full': Hypotheek leningdelen
            'mortgage_progress:full': Hypotheek voortgang
            'mortgage:basic': Basisgegevens hypotheek
            'mortgage:full': Alle gegevens hypotheek
            'note:full': Notities
            'office:full': Kantoren
            'portal_invitation:index': List all portal invitations
            'portal_invitation:create': Create a portal invitation
            'portal_invitation:show': Show a portal invitation
            'portal_invitation:update': Update a portal invitation
            'portal_invitation:delete': Delete a portal invitation
            'relation_number:index': List all relation numbers
            'relation_number:create': Create a relation number
            'relation_number:show': Show a relation number
            'relation_number:update': Update a relation number
            'relation_number:delete': Delete a relation number
            'relation_number_type:index': List all relation number types
            'relation_number_type:create': Create a relation number type
            'relation_number_type:show': Show a relation number type
            'relation_number_type:update': Update a relation number type
            'relation_number_type:delete': Delete a relation number type
            'search:full': Zoekopdrachten
            'signal:full': Signalen
            'template:full': Templates
  schemas:
    MortgageProgress:
      type: object
      required:
        - mortgage_id
      properties:
        id:
          type: number
          description: ID of entity
        mortgage_id:
          type: number
          description: ID of related mortgage
        name:
          type: string
          description: Name of mortgage progress
        sent:
          type: boolean
          description: Has the mortgage progress been sent?
        received:
          type: boolean
          description: Has the mortgage progress been received?
        completed:
          type: boolean
          description: Has the mortgage progress been completed?
        comment:
          type: string
          description: Comment that belongs to the mortgage progress
        date:
          type: string
          description: Date that corresponds to the mortgage progress
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
    Created:
      type: object
      properties:
        success:
          type: boolean
          description: Success true or false
        id:
          type: string
          description: Id of stored data (can be empty on array inserts)
    Deleted:
      type: object
      properties:
        success:
          type: boolean
          description: Success true or false
        id:
          type: string
          description: Id of deleted data (can be empty on array inserts)
    Updated:
      type: object
      properties:
        success:
          type: boolean
          description: Success true or false
        id:
          type: string
          description: Id of updated data (can be empty on array inserts)
    Meta:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
    Pagination:
      type: object
      properties:
        total:
          type: number
          description: Total number of objects
        count:
          type: number
          description: Object on this page
        per_page:
          type: number
          description: Object per page
        current:
          type: number
          description: Current page number
        total_pages:
          type: number
          description: Total number of pages
        links:
          type: object
          description: Array of meta links
          properties:
            self:
              type: string
              description: Link to the current page
            first:
              type: string
              description: Link to the first page
            prev:
              type: string
              description: Link to the previous page
            next:
              type: string
              description: Link to the next page
            last:
              type: string
              description: Link to the last page
    Customer:
      type: object
      required:
        - firstName
        - lastName
        - dateOfBirth
      properties:
        id:
          type: number
          description: The id of the customer
        initials:
          type: string
          description: Initials of the customer
        firstName:
          type: string
          description: FirstName of the customer
        suffix:
          type: string
          description: Suffix of the customer
        lastName:
          type: string
          description: LastName of the customer
        dateOfBirth:
          type: string
          description: Date of birth of the customer
        phone:
          type: string
          description: Phonenumber of the customer
        mobile:
          type: string
          description: Mobile phonenumber of the customer
        sex:
          $ref: "#/components/schemas/GenderEnum"
        emailaddress:
          type: string
          description: Emailaddress of the customer
        smoking:
          type: boolean
          description: Does the customer smoke?
        martialStatus:
          $ref: "#/components/schemas/MaritalStatusEnum"
        mariedBefore:
          type: boolean
          description: Was the customer married befoer?
        office:
          type: number
          description: The office of the customer
        type:
          $ref: "#/components/schemas/CustomerTypeEnum"
        parent:
          type: number
          description: The parent customer_id of the customer
        partner:
          type: number
          description: The id of the partner
        houseOwned:
          type: boolean
          description: Does the customer own a house
        advisor:
          type: number
          description: Id of the advisor of the customer
        employer:
          type: string
          description: Employer of the customer
        position:
          type: string
          description: Position at company of the customer
        mailingEnabled:
          type: boolean
          description: Does the customer want to receive emails
        salary:
          type: number
          description: The salary of the customer
        title:
          type: number
          description: The title of the customer
        accountNumber:
          type: string
          description: The account of the customer
        iban:
          type: string
          description: The iban of the customer
        businessname:
          type: string
          description: The name of the business of the customer
        businesstype:
          type: number
          description: The type of the business of the customer
        kvkNumber:
          type: string
          description: The kvk number of the customer
        numberOfEmployees:
          type: number
          description: The number of employees of the customer
        revenue:
          type: number
          description: The revenue of the customer
        payroll:
          type: number
          description: The payroll of the customer
        retirement_income:
          type: number
          description: Retirement income of the customer
        passed_away:
          type: boolean
          description: Did the customer pass away
        passed_away_at:
          type: string
          description: The date the customer passed away, format d/m/Y
        salary_date:
          type: string
          description: The date the customer gets their salary, format d/m/Y
        retirement_income_date:
          type: string
          description: The date the customer gets their retirement income, format d/m/Y
    CustomerLead:
      type: object
      required:
        - firstName
        - lastName
        - emailaddress
      properties:
        firstName:
          type: string
          description: FirstName of the customer, required if initials are not provided
        initials:
          type: string
          description: Initials of the customer, required if first name is not provided
        suffix:
          type: string
          description: Suffix of the customer
        lastName:
          type: string
          description: LastName of the customer
        emailaddress:
          type: string
          description: Email address of the customer
        dateOfBirth:
          type: string
          description: Date of birth of the customer, format d/m/Y
        status:
          type: string
          description: The status that you want to give this new lead. If the status does
            not exist yet it will be created and attached to this customer. You
            can filter your customers by this status on the customer lead
            dashboard.
    CustomerMortgageLead:
      type: object
      required:
        - firstName
        - lastName
        - emailaddress
      properties:
        firstName:
          type: string
          description: FirstName of the customer, required if initials are not provided
        initials:
          type: string
          description: Initials of the customer, required if first name is not provided
        suffix:
          type: string
          description: Suffix of the customer
        lastName:
          type: string
          description: LastName of the customer
        emailaddress:
          type: string
          description: Email address of the customer
        dateOfBirth:
          type: string
          description: Date of birth of the customer, format d/m/Y
        visitDate:
          type: string
          description: Last visit date of the customer, format d/m/Y
        dateOfTransfer:
          type: string
          description: The date of transfer for the mortgage (Datum overdracht), format
            d/m/Y
        dateFundReserves:
          type: string
          description: The expiration date for the fund reserves (Datum
            financieringsvoorbehoud), format d/m/Y
        dateBankGuarantee:
          type: string
          description: The expiration date for the bank guarantee (Datum bankgarantie),
            format d/m/Y
        status:
          type: string
          description: The status that you want to give this new lead. If the status does
            not exist yet it will be created and attached to this customer. You
            can filter your customers by this status on the customer lead
            dashboard.
    Damage:
      type: object
      required:
        - customer_id
      properties:
        customer_id:
          type: number
          description: ID of customer
        damage_number:
          type: string
          description: Number of damage
        licenseplate:
          type: string
          description: License plate of car of the insuree involved in damage
        policy_id:
          type: number
          description: ID of policy
        insurance_branche_code:
          type: number
          description: Branche code of insurance company
        policy_contractNumber:
          type: string
          description: Contract number of policy
        insurance_agency_id:
          type: number
          description: ID of insurance agency
        settled:
          type: boolean
          description: Is the damage settled?
        date:
          type: string
          description: Date when damage occured
        blame:
          type: boolean
          description: Is the insuree to blame?
        cause:
          type: string
          description: Cause of the damage
        notes:
          type: string
          description: Notes belonging to damage
        agency_id:
          type: number
          description: ID of agency
        agency_contact_id:
          type: number
          description: ID of contact of agency
        agency_contact:
          type: string
          description: Name of agency contact
        agency_phone:
          type: string
          description: Phone number of agency
        agency_emailaddress:
          type: string
          description: Email address of agency
        external_number:
          type: string
          description: External number of damage
        wa:
          type: number
          description: Liability insurance
        casco:
          type: number
          description: Insurance of object involved in damage (casco)
        deductible:
          type: number
          description: Amount that is deductible
        garage_id:
          type: number
          description: ID of garage involved
        garage_contact_id:
          type: number
          description: ID of contact of garage involved
        user_id:
          type: number
          description: ID of user
        trackingNumber:
          type: string
          description: Tracking number
        expert_id:
          type: number
          description: ID of expert involved
        expert_case_number:
          type: string
          description: Case number of expert
        pay_to:
          type: number
          description: Pay to
        status:
          type: number
          description: Status
        wa_at:
          type: string
          description: Liable at
        casco_at:
          type: string
          description: Casco at
        deductible_at:
          type: string
          description: Deductible at
        estimated:
          type: number
          description: Estimation
    Address:
      type: object
      properties:
        id:
          type: number
          description: Id of the address
        customer_id:
          type: number
          description: ID of the related customer
        active:
          type: boolean
          description: Is the address active?
        from:
          type: string
          description: A date from which the address will be active according to ISO8601
        type:
          type: string
          description: Type of address
        postcode:
          type: string
          description: Postal code of the address
        house_number:
          type: string
          description: House number of the address
        house_number_addition:
          type: string
          description: House number addition of the address
        street_name:
          type: string
          description: Street name of the address
        city:
          type: string
          description: City of the address
        country:
          type: string
          description: Country of the address
        lat:
          type: number
          description: Latitude of the address
        lng:
          type: number
          description: Longitude of the address
    Document:
      type: object
      properties:
        name:
          type: string
          description: Naam van het document
        file:
          type: string
          description: Bestandslocatie van het document
        type:
          type: string
          description: Documenttype
        mime_type:
          type: string
          description: MIME-type van het document
        customer_id:
          type: number
          description: ID van klant
        documentcategory_id:
          type: number
          description: ID van categorie
        extension:
          type: string
          description: Bestandsextensie van het document
        migrated:
          type: boolean
          description: Is het document gemigreerd?
        filesize:
          type: number
          description: Bestandsgrootte van het document (in bytes)
        decoded:
          type: boolean
          description: Is het document gedecodeerd?
        user_id:
          type: number
          description: ID van gebruiker
    AXMessage:
      type: object
      properties:
        id:
          type: number
          description: The status of the AX Message; queued, pending, processed, failed
        version:
          type: string
          description: The version of the AX Message
        status:
          type: number
          description: "The status of the AX Message; {1: QUEUED, 2: PENDING, 3: PROCESSED,
            4: FAILED}"
        user_id:
          type: number
          description: OPTIONAL The id of the reviewing user
        customer_id:
          type: number
          description: OPTIONAL The id of the linked customer
        updated_at:
          type: string
          description: An ISO 8601 formatted string
    Dossier:
      type: object
      required:
        - uuid
      properties:
        uuid:
          type: number
          description: UUID of dossier
        customer_id:
          type: string
          description: Customer ID of dossier
        status:
          type: string
          description: Status of dossier
    EmailAccount:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
          description: Name of Emailaccount holder
        address:
          type: string
          description: Emailaddress of Emailaccount holder
        host:
          type: string
          description: Hostname of Emailaccount
        port:
          type: number
          description: Port of Emailaccount
        username:
          type: string
          description: Username of Emailaccount
        validate_cert:
          type: boolean
          description: Emailaccount has validation certificate?
        encryption:
          $ref: "#/components/schemas/EncryptionTypes"
        signature:
          type: string
          description: Signature of Emailaccount
        sync_enabled:
          type: boolean
          description: Is sync enabled?
        synced_at:
          type: string
          description: Date of sync, format d/m/Y
        locked:
          type: boolean
          description: Describes if the email account is locked for importing emails.
        auto_match:
          type: boolean
          description: Describes if imported emails should automatically be matched to customers.
        auto_process:
          type: boolean
          description: Describes if imported emails that were matched to customers should automatically be marked as processed.
        process_matched:
          type: boolean
          description: Describes if emails which have been matched should be automatically marked as processed.
        process_unmatched:
          type: boolean
          description: Describes if emails which have not been matched should be automatically marked as processed.
    EncryptionTypes:
      type: number
      enum:
        - null
        - 0
        - 1
        - 2
    Letter:
      type: object
      required:
        - name
        - address
        - content
        - customer_id
        - user_id
        - category_id
        - template_id
      properties:
        name:
          type: string
          description: Name of the letter
        address:
          type: string
          description: Address of the letter
        content:
          type: string
          description: Content of the letter
        customer_id:
          type: number
          description: ID of the customer
        user_id:
          type: number
          description: ID of the user
        for_instance_class:
          type: number
          description: For instance class of the letter
        for_instance_id:
          type: number
          description: For instance id of the letter
        category_id:
          type: number
          description: ID of the category of the letter
        template_id:
          type: number
          description: ID of the template of the letter
    Lock:
      type: object
      required:
        - lockable_type
        - lockable_id
        - user_id
      properties:
        lockable_type:
          type: string
          description: Type of the lockable
        lockable_id:
          type: number
          description: ID of the lockable
        user_id:
          type: number
          description: ID of the user
      description: >
        A lock can to used to lock any resource, e.g. a customer. By default the application locks any resource that's
        being edited so there won't be any conflicts in storing data.


        For example: user `a` starts editing a customer and then the system locks that customer. When user `b` wants to
        edit that same customer, they will get a popup telling them that the customer is already being edited by user
        `a`. If user `b` has enough permissions they can choose to overwrite the lock. This causes user `a` to be removed
        from the edit page.
    Email:
      type: object
      properties: {}
    Task:
      type: object
      required:
        - category_id
        - status
        - user_id
        - content
        - date
      properties:
        id:
          type: number
          description: ID of task, dont provide this when creating a new task
        category_id:
          $ref: '#/components/schemas/CategoryEnum'
        status:
          $ref: '#/components/schemas/TaskStatusEnum'
        type:
          $ref: '#/components/schemas/TaskTypeEnum'
        priority:
          $ref: '#/components/schemas/TaskPriorityEnum'
        user_id:
          type: number
          description: The id of the user who will be assigned as the creator of the task. If empty the user of the request session will be filled.
        finished_by:
          type: number
          description: The id of the user who will be assigned as person who completed the task.
        customer_id:
          type: number
          description: The id of the customer to which this task is assigned.
        content:
          type: string
          description: The title of the task
        description:
          type: string
          description: A more detailed or additional description of the task
        date:
          type: string
          description: The date when the task is planned
        time:
          type: string
          description: The specific time when the task is planned
        finished_at:
          type: string
          description: ISO 8601 date when the task was finished
        created_at:
          type: string
          description: ISO 8601 date when the task was created
        updated_at:
          type: string
          description: ISO 8601 date when the task was last updated
    Template:
      type: object
      properties:
        id:
          type: number
          description: ID of template
        title:
          type: string
          description: Title of template
        nameInSystem:
          type: string
          description: Name in system of template
        content:
          type: string
          description: Content of template
        type:
          type: number
          description: Type of template
        primaryMail:
          type: string
          description: Primary mail of template
        category:
          type: number
          description: Category of template
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
        deleted_at:
          type: string
          description: Timestamp of deletion
        agency_id:
          type: number
          description: ID of agency of template
    Mortgage:
      type: object
      required:
        - customer_id
      properties:
        customer_id:
          type: number
          description: ID of the customer
        hypotheeknummer:
          type: string
          description: Number of mortgage
        koopsom:
          type: number
          description: Buying price of property
        onderpandsgegevens:
          type: string
          description: Credentials of collateral
        redenHypotheek:
          type: string
          description: Reason of mortgage
        hoofdsomHypotheek:
          type: number
          description: Main sum mortgage
        hypotheciareInschrijving:
          type: string
          description: Mortgage  registration
        taxateur_id:
          type: number
          description: ID of appraiser
        marktwaarde:
          type: number
          description: Market value of property
        datumTaxatie:
          type: string
          description: Date of taxation
        wozWaarde:
          type: number
          description: Cadastral value
        wozDatum:
          type: string
          description: Date of cadastral
        totaalSom:
          type: number
          description: Total sum
        bouwdepot:
          type: string
          description: Building fund of mortgage
        notaris_id:
          type: number
          description: ID of notary
        passeerdatum:
          type: string
          description: Date when the mortgage papers are signed by the notary
        verkopendMakelaar_id:
          type: number
          description: ID of realtor
        geldverstrekker_id:
          type: number
          description: ID of company that gave the mortgage
        label_id:
          type: number
          description: ID of label
        nhg:
          type: boolean
          description: Is mortgage under Nationale Hypotheek Garantie (NHG)?
        rate:
          type: number
          description: Rate of mortgage
        rangorde:
          type: number
          description: Rank of mortgage
        status:
          type: number
          description: Status of mortgage
        getekend:
          type: string
          description: Date of signing
        voor_verlenging:
          type: string
          description: Date before extension
        na_verlening:
          type: string
          description: Date after extension
        financiering:
          type: string
          description: Date of financing
        bankgarantie:
          type: string
          description: Date of bank guarantee
        passeerdatumVoortgang:
          type: string
          description: Date of passing date progress
        collateral_address:
          type: string
          description: Collateral address of mortgage
        collateral_city:
          type: string
          description: Collateral city of mortgage
        collateral_postcode:
          type: string
          description: Collateral postal code of mortgage
        collateral_housenumber:
          type: string
          description: Collateral house number of mortgage
        collateral_county:
          type: string
          description: Collateral county of mortgage
        restantHoofdsom:
          type: number
          description: Remainder of total sum of mortgage
        executiewaarde:
          type: number
          description: Execution value of mortgage
        type_woning:
          type: number
          description: ID type of property
        offerteNummer:
          type: number
          description: Quotation of mortgage
        datumAanvraag:
          type: string
          description: Date of application
        datumOfferte:
          type: string
          description: Date of quotation
        datumGeldigheidOfferte:
          type: string
          description: Date of validity for quotation
        datumOfferteGetekend:
          type: string
          description: Date of quotation signed
        vovVoorVerbouwing:
          type: number
          description: Vrije onderhandse verkoopwaarde (VOV) before construction
        vovNaVerbouwing:
          type: number
          description: Vrije onderhandse verkoopwaarde (VOV) after construction
        ewVoorVerbouwing:
          type: number
          description: Execution value before construction
        ewNaVerbouwing:
          type: number
          description: Execution value after construction
        trackingNumber:
          type: number
          description: Tracking number of mortgage
        collateral_addition:
          type: string
          description: Collateral addition of mortgage
        purchasing_broker_id:
          type: number
          description: ID of purchasing broker
        validity_unsigned_offer_date:
          type: string
          description: Validity of unsigned offer date
        validity_signed_offer_date:
          type: string
          description: Validity of signed offer date
        end_financing_reservation_date:
          type: string
          description: End of financing reservation date
        has_bank_guarantee_date:
          type: string
          description: Date of bank guarantee
        bank_guarantee_date:
          type: string
          description: Date of bank guarantee
        mortgage_property_id:
          type: number
          description: ID of mortgage property
        financier_agency_id:
          type: number
          description: ID of financier agency
        arrangement_type:
          type: number
          description: ID of arrangement
        existing_mortgage_number:
          type: string
          description: Number of existing mortgage number
        own_resources_amount:
          type: number
          description: Amount of own resources
        mutation_code:
          type: number
          description: Code of mutation of mortgage
        is_property_purchase:
          type: boolean
          description: Is property purchased?
        bank_guarantee_costs:
          type: number
          description: Costs of bank guarantee
        net_consultancy_costs:
          type: number
          description: Net consultancy costs
        mortgage_deed_cost_specification:
          type: number
          description: Costs of mortgage deed
        national_mortgage_guarantee_costs:
          type: number
          description: National mortgage guarantee costs
        fine_interest:
          type: number
          description: Fine intereset of mortgage
        loan_type:
          type: string
          description: Type of loan
        secondary_customer_id:
          type: number
          description: ID of secondary customer
        loan_to_value:
          type: number
          description: Value to loan of mortgage
        risk_class:
          type: number
          description: Risk class of mortgage
        risk_class_type:
          type: number
          description: Type of risk class of mortgage
    MortgagePart:
      type: object
      required:
        - mortgage_id
      properties:
        mortgage_id:
          type: number
          description: ID of mortgage
        hypotheeknummer:
          type: string
          description: Number of mortgage
        leningdeelnummer:
          type: string
          description: Part number of loan
        soortLening:
          type: string
          description: Sort of loan
        hoofdsom:
          type: number
          description: Main price
        begindatum:
          type: string
          description: Start date
        einddatum:
          type: string
          description: End date
        rente:
          type: number
          description: Interest
        rentevasteperiode:
          type: string
          description: Fixed interest period
        einddatumRentevast:
          type: string
          description: End date of fixed interest period
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of last updated
        begindatumRentevast:
          type: string
          description: Start date of fixed interest period
        renteType:
          type: number
          description: Type of intereset
        duur:
          type: number
          description: Duration
        hypotheekType:
          type: number
          description: Type of mortgage
        afsluitprovisie:
          type: number
          description: Commission
        bedenktijd:
          type: boolean
          description: Time for consideration
        bedenktijdStartDatum:
          type: string
          description: Start date of consideration
        type:
          type: number
          description: Type
        agency_code:
          type: string
          description: Code of agency
        tax_box_type:
          type: number
          description: The tax box type number
        repayment_type:
          type: number
          description: Type of repayment
        interest_agreement_type:
          type: number
          description: Type of interest agreement
        interest_cooling_off_period_type:
          type: number
          description: Type of interest cooling off period type
        interest_cooling_off_period_in_months:
          type: number
          description: Type of interest colling off period in months
        payment_term:
          type: number
          description: Payment term
        consumptive_percentage:
          type: number
          description: Consumptive percentage
        consumptive_amount:
          type: number
          description: Consumptive amount
        national_mortgage_guarantee:
          type: boolean
          description: National mortgage guarantee
        coverage_percentage:
          type: number
          description: Coverage percentage
        rate_based_on:
          type: number
          description: Rate based on
      description: >
        A mortgage part is one of the parts that makes up the mortgage.
    Note:
      type: object
      required:
        - title
      properties:
        id:
          type: number
          description: ID of note
        title:
          type: string
          description: Title of note
        user_id:
          type: string
          description: ID of the user who will be marked as the creator of the note
        content:
          type: string
          description: Content of note
        datetime:
          type: string
          description: Datetime of note
        category:
          $ref: '#/components/schemas/CategoryEnum'
        customer_id:
          type: string
          description: ID of the related customer
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
        deleted_at:
          type: string
          description: Timestamp of deletion

      example:
        id: 1
        title: Notitie
        user_id: 1
        content: Call was made by customer XXX at 13:48
        datetime: "2019-10-25T12:00:00+02:00"
        category_id: 1
        customer_id: 1234
        created_at: "2019-10-25T12:00:00+02:00"
        updated_at: "2019-10-25T13:00:00+02:00"
        deleted_at: "2019-10-25T14:00:00+02:00"
      description: >
        A note contains textual information that a user wants to remember/store under a customer.
    Signal:
      type: object
      properties:
        id:
          type: number
          description: ID of signal
        signal_query_id:
          type: number
          description: ID of signal query
        customer_id:
          type: number
          description: ID of customer
        status:
          type: number
          description: Status of signal
        snoozed_until:
          type: string
          description: Signal snoozed until date
        comment:
          type: string
          description: Comment of signal
        finished_by:
          type: number
          description: Signal finished by
        finished_at:
          type: string
          description: Signal finished at date
        created_at:
          type: string
          description: Signal created at timestamp
        updated_at:
          type: string
          description: Signal latest update timestamp
      description: >
        A signal is an automated feedback item. Signals are created by signal queries, which in turn use a search model
        as a source for which models the signals need to be created.
    Account:
      type: object
      required:
        - account_type_id
        - customer_id
        - number
      properties:
        id:
          type: number
          description: ID of account
        account_type_id:
          type: number
          description: Id of the account type
        customer_id:
          type: number
          description: ID of customer of account
        joint_id:
          type: number
          description: ID of the customer who is the joint account holder
        active:
          type: boolean
          description: Is account active?
        number:
          type: string
          description: Number of account
        description:
          type: string
          description: Subject
        primary:
          type: boolean
          description: Marks if this is the primary account. When an account is shared, two objects exist of which only one the the primary.
        created_at:
          type: string
          description: A datetime string according to ISO8601
        updated_at:
          type: string
          description: A datetime string according to ISO8601
      description: >
        An account is a bank account of a customer. It contains some basic details and is mostly used to attach
        documents to. An account can also be shared between two customers via the `joint_id` relation. When an account
        is shared, two objects exist of which only one the primary account.
    PortalInvitation:
      type: object
      required:
        - customer_id
        - send_email
        - type
      properties:
        id:
          type: number
          description: ID of portal invitation
        customer_id:
          type: number
          description: The id of the customer of the invite
        send_email:
          type: boolean
          description: A boolean to indicate if DossierData should send an email for the invite
        type:
          $ref: '#/components/schemas/PortalInvitationTypeEnum'
        token:
          type: string
          description: When the invite is created this is the token with which the customer can access the portal
        active:
          type: boolean
          description: >
            A boolean to indicate if the invite has been used. If this is `true` that means that the invite is still
            active and has not been used by the customer.
        valid_until:
          type: string
          description: ISO 8601 date until when the invite is valid. Set to `null` if the invite must never expire.
        created_at:
          type: string
          description: ISO 8601 date when the portal invitation was created.
        updated_at:
          type: string
          description: ISO 8601 date when the portal invitation was last updated.
      description: >
        A portal invitation is a model which keeps track invites for the portal.
    RelationNumber:
      type: object
      required:
        - number
        - relation_number_type_id
        - numberable_type
        - numberable_id
      properties:
        id:
          type: number
          description: Internal id of the relation number type
        number:
          type: string
          description: The identifier of the relation number
        relation_number_type_id:
          type: number
          description: The id of the relation number type
        numberable_type:
          $ref: '#/components/schemas/MorphRelationTypeEnum'
        numberable_id:
          type: number
          description: The id of object to which the relation number is attached
        created_at:
          type: string
          description: The datetime when the relation number was created
        updated_at:
          type: string
          description: The datetime when the relation number was last updated
      description: >
        The RelationNumber model keeps track of external relation numbers and links them via a polymorphic relation to
        other models in the database. You need to have a RelationNumberType before you can create this.
    RelationNumberType:
      type: object
      required:
        - name
      properties:
        id:
          type: number
          description: ID of the relation number type
        name:
          type: string
          description: Name of the relation number type
      description: >
        The RelationNumberType model keeps track of all different relation types. If you have a new type of external
        number that you want to keep track of you need to create a new RelationNumberType model first.
    Office:
      type: object
      required:
        - name
      properties:
        id:
          type: number
          description: ID of office
        name:
          type: string
          description: Name of office
        owner_id:
          type: number
          description: ID of owner of office
        code:
          type: string
          description: Code of office
        phone:
          type: string
          description: Phone number of office
        postcode:
          type: string
          description: Postal code of office
        houseNumber:
          type: string
          description: House number of office
        streetName:
          type: string
          description: Street name of office
        city:
          type: string
          description: City of office
        houseNumberAddition:
          type: string
          description: House number addition of office
        email:
          type: string
          description: Email address of office
        website:
          type: string
          description: Website of office
      description: >
        An office model can be attached to customers to identify who is responsible for them. Only an administrator,
        an office manager or the owner of the office can change to which office a customer is assigned.

        Users can also choose to which offices they belong.
    Search:
      type: object
      properties:
        id:
          type: number
          description: ID of search
        name:
          type: string
          description: Name of search
        content:
          type: string
          description: Content of search
        user_id:
          type: number
          description: ID of user
        public:
          type: boolean
          description: Is search public?
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
      description: >
        A search model contains a user defined query which can be used to find and export data. It can also be used as
        a data source for a signal.
    NotFound:
      type: object
      properties:
        succes:
          type: boolean
        error:
          type: object
          description: A description of the error if available
      description: A resource we could not find
    Unauthorized:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: string
          description: The type of error
        error_description:
          type: string
          description: A detailed description of the error
      description: An authorized action
    UnprocessableEntity:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: object
          description: A description of the error
          properties:
            code:
              type: string
            message:
              type: string
            errors:
              type: array
              items:
                type: string
      description: An unprocessable entity for which validation failed
    BadRequest:
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
      description: A bad request
    PaginatedAddresses:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        meta:
          $ref: '#/components/schemas/Meta'
      description: A paginated result of addresses
    OfferteAanvraag:
      type: object
      properties:
        Header:
          type: object
        HuidigObject:
          type: object
        Hypotheekgever:
          type: object
        PartijNAWData:
          type: object
        TussenPersoon:
          type: object
        Object:
          type: object
        Lening:
          type: object
      description: >
        An AX message that follows the HDN standard. For the full xsd contact [info@dossierdata.nl](mailto:info@dossierdata.nl)
    Calendar:
      type: object
      properties:
        id:
          type: number
        user_id:
          type: number
          description: The user id of the owner of the calendar
        name:
          type: string
    CalendarEvent:
      type: object
      properties:
        id:
          type: number
        calendar_id:
          type: number
          description: The id of the calendar to which this event belongs
        time_start:
          type: string
          description: Date time value of the start time
        time_end:
          type: string
          description: Date time value of the end time
        customer_id:
          type: number
        location:
          type: string
        description:
          type: string
        summary:
          type: string
    CategoryEnum:
      type: number
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
      description: >
        An enum describing all categories of items found on the customer dashboard

        Category:
          * `1` - Customer
          * `2` - Banking
          * `3` - Insurance
          * `4` - Damage
          * `5` - Mortgage
          * `6` - Mailing
          * `7` - Dossier
          * `8` - Credit
          * `9` - Income
          * `10` - Retirement
          * `11` - Possession
          * `12` - Obligation
          * `13` - Current living condition
    TaskStatusEnum:
      type: number
      enum:
        - null
        - 0
        - 1
      description: >
        An enum that describes all task status types.
          - `null`: Unknown
          - `0`: Active
          - `1`: Completed
    TaskTypeEnum:
      type: number
      enum:
        - 1
        - 2
        - 3
        - 4
        - 20
      description: >
        An enum that describes all task types. If not provided this will default to `20`.
         - `1`: Call back request
         - `2`: Check task
         - `3`: Communication task
         - `4`: Birthday task
         - `20`: General task
    TaskPriorityEnum:
      type: number
      enum:
        - 0
        - 1
        - 2
        - 3
      description: >
        An enum that describes all task priority types. If not provided this will default to `2`.
         - `0`: Critical
         - `1`: Important
         - `2`: Normal
         - `3`: Insignificant
    MaritalStatusEnum:
      type: number
      enum:
        - null
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
      description: >
        An enum that describes all marital statuses.
         - `null`: Unknown
         - `0`: Single
         - `1`: Married joint assets
         - `2`: Married with prenup
         - `3`: Married foreign law
         - `4`: Divorced
         - `5`: Resident
         - `6`: Partner registration joint assets
         - `7`: Partner registration with prenup
         - `8`: Cohabitation with prenup
         - `9`: Cohabitation without prenup
         - `10`: Widow
    CustomerTypeEnum:
      type: number
      enum:
        - null
        - 1
        - 2
        - 7
        - 9
        - 11
        - 12
        - 13
        - 14
      description: >
        An enum that describes all customer types.
          - `null`: Unknown
          - `1`: Private
          - `2`: Expiring
          - `7`: Expired
          - `9`: Business
          - `11`: Business expired
          - `12`: Lead
          - `13`: Mortgage lead
          - `14`: Insurance lead
    GenderEnum:
      type: number
      enum:
        - null
        - 0
        - 1
      description: >
        An enum that describes all genders.
          - `null`: Unknown
          - `0`: Female
          - `1`: Male
    PortalInvitationTypeEnum:
      type: string
      enum:
        - 'full'
        - 'assessment'
        - 'source_data'
      description: >
        An enum that describes all types of portal invitations.
          - `full`: This is an invite for the entire portal process which included the source data and an assessment
          - `assessment`: This is an invite for the assessment process
          - `source_data`: This is an invite for the source data process via iWize
    MorphRelationTypeEnum:
      type: string
      enum:
        - 'address'
        - 'bank_account'
        - 'current_living_condition'
        - 'customer'
        - 'credit'
        - 'damage'
        - 'income_benefit'
        - 'income_company'
        - 'income_employment'
        - 'income_other'
        - 'income_retirement'
        - 'mortgage'
        - 'mortgage_part'
        - 'obligation'
        - 'office'
        - 'policy'
        - 'possession'
        - 'retirement'
        - 'user'
      description: >
        An enum that describes all possible types for a polymorphic relationship.
          - `account`: The (bank) Account model
          - `address`: The Address model
          - `current_living_condition`: The CurrentLivingCondition model
          - `customer`: The Customer model
          - `damage`: The Damage model
          - `income_benefit`: The IncomeBenefit model
          - `income_company`: The IncomeCompany model
          - `income_employment`: The IncomeEmployment model
          - `income_other`: The IncomeOther model
          - `income_retirement`: The IncomeRetirement model
          - `mortgage`: The Mortgage model
          - `mortgage_part`: The MortgagePart model
          - `obligation`: The Obligation model
          - `office`: The Office model
          - `policy`: The Policy model
          - `possession`: The Possession model
          - `retirement`: The Retirement model
          - `user`: The User model
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/BadRequestExample'
    BadScopeRequest:
      description: Bad Scope Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/BadScopeRequestExample'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Unauthorized'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/UnauthorizedExample'
    ClientUnauthorized:
      description: Client Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Unauthorized'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/ClientUnauthorizedExample'
    NotFound:
      description: This specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
          examples:
            NotFoundExample:
              $ref: '#/components/examples/NotFoundExample'
    UnprocessableEntity:
      description: The given data did not pass validation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableEntity'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/UnprocessableEntityExample'
    Created:
      description: The resource was succesfully created
      headers: {}
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Created'
          examples:
            CreatedExample:
              $ref: '#/components/examples/CreatedExample'
    Updated:
      description: The resource was succesfully updated
      headers: {}
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Updated'
          examples:
            CreatedExample:
              $ref: '#/components/examples/UpdatedExample'
    Deleted:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Deleted'
          examples:
            DeletedExample:
              $ref: '#/components/examples/DeletedExample'
    CustomerURI:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  uri:
                    type: string
          examples:
            response:
              value:
                data:
                  uri: "https://uri"
    Address:
      description: An address resource
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Address'
          examples:
            AddressExample:
              $ref: '#/components/examples/AddressExample'
    PaginatedAddresses:
      description: A paginated collection of the address resource
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
              meta:
                $ref: '#/components/schemas/Pagination'
          examples:
            PaginatedAddressExample:
              $ref: '#/components/examples/PaginatedAddressesExample'
    Customer:
      description: A customer resource
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Customer'
          examples:
            CustomerExample:
              $ref: '#/components/examples/CustomerExample'
    PaginatedCustomers:
      description: A paginated collection of the customer resource
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
              meta:
                $ref: '#/components/schemas/Pagination'
          examples:
            PaginatedCustomersExample:
              $ref: '#/components/examples/PaginatedCustomersExample'
    Dossier:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dossier'
          examples:
            DossiersExample:
              $ref: '#/components/examples/PaginatedDossiersExample'
    PaginatedDossiers:
      description: A paginated collection of the dossier resource
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Dossier'
              meta:
                $ref: '#/components/schemas/Pagination'
          examples:
            PaginatedDossiersExample:
              $ref: '#/components/examples/PaginatedDossiersExample'
    EmailAccount:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailAccount'
          examples:
            DossiersExample:
              $ref: '#/components/examples/EmailAccountExample'
    PaginatedEmailAccounts:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/EmailAccount'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedEmailAccountsExample:
              $ref: '#/components/examples/PaginatedEmailAccountsExample'
    Letter:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Letter'
          examples:
            LetterExample:
              $ref: '#/components/examples/LetterExample'
    PaginatedLetters:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Letter'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedLettersExample:
              $ref: '#/components/examples/PaginatedLettersExample'
    Lock:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Lock'
          examples:
            LockExample:
              $ref: '#/components/examples/LockExample'
    PaginatedLocks:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Lock'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedLocksExample:
              $ref: '#/components/examples/PaginatedLocksExample'
    Mortgage:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Mortgage'
          examples:
            MortgageExample:
              $ref: '#/components/examples/MortgageExample'
    PaginatedMortgages:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Mortgage'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedMortgagesExample:
              $ref: '#/components/examples/PaginatedMortgagesExample'
    MortgagePart:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/MortgagePart'
          examples:
            MortgagePartExample:
              $ref: '#/components/examples/MortgagePartExample'
    PaginatedMortgageParts:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MortgagePart'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedMortgagePartsExample:
              $ref: '#/components/examples/PaginatedMortgagePartsExample'
    MortgageProgress:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/MortgagePart'
          examples:
            MortgageProgressExample:
              $ref: '#/components/examples/MortgageProgressExample'
    PaginatedMortgageProgress:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MortgagePart'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedMortgageProgressExample:
              $ref: '#/components/examples/PaginatedMortgageProgressExample'
    Damage:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Damage'
          examples:
            DamageExample:
              $ref: '#/components/examples/DamageExample'
    PaginatedDamages:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Damage'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedDamagesExample:
              $ref: '#/components/examples/PaginatedDamagesExample'
    Document:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Document'
          examples:
            DocumentExample:
              $ref: '#/components/examples/DocumentExample'
    PaginatedDocuments:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedDocumentsExample:
              $ref: '#/components/examples/PaginatedDocumentsExample'
    Email:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Email'
          examples:
            EmailExample:
              $ref: '#/components/examples/EmailExample'
    PaginatedEmails:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Email'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedEmailsExample:
              $ref: '#/components/examples/PaginatedEmailsExample'
    Template:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Template'
          examples:
            PaginatedTemplatesExample:
              $ref: '#/components/examples/TemplateExample'
    PaginatedTemplates:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedTemplatesExample:
              $ref: '#/components/examples/PaginatedTemplatesExample'
    Note:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Note'
          examples:
            NoteExample:
              $ref: '#/components/examples/NoteExample'
    PaginatedNotes:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedNotesExample:
              $ref: '#/components/examples/PaginatedNotesExample'
    Signal:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Signal'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            SignalExample:
              $ref: '#/components/examples/SignalExample'
    PaginatedSignals:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Signal'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedSignalsExample:
              $ref: '#/components/examples/PaginatedSignalsExample'
    Account:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Account'
          examples:
            AccountExample:
              $ref: '#/components/examples/AccountExample'
    PaginatedAccounts:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedAccountsExample:
              $ref: '#/components/examples/PaginatedAccountsExample'
    Office:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Office'
          examples:
            OfficeExample:
              $ref: '#/components/examples/OfficeExample'
    PaginatedOffices:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Office'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedOfficesExample:
              $ref: '#/components/examples/PaginatedOfficesExample'
    Search:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Search'
          examples:
            SearchExample:
              $ref: '#/components/examples/SearchExample'
    PaginatedSearches:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Search'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedSearchesExample:
              $ref: '#/components/examples/PaginatedSearchesExample'
    AXMessage:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/AXMessage'
          examples:
            AXMessageExample:
              $ref: '#/components/examples/AXMessageExample'
    PaginatedAXMessages:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AXMessage'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedAXMessagesExample:
              $ref: '#/components/examples/PaginatedAXMessagesExample'
    Task:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Task'
          examples:
            TaskExample:
              $ref: '#/components/examples/TaskExample'
    PaginatedTasks:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedTasksExample:
              $ref: '#/components/examples/PaginatedTasksExample'
    Calendar:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Calendar'
          examples:
            CalendarExample:
              $ref: '#/components/examples/CalendarExample'
    PaginatedCalendars:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Calendar'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedCalendarsExample:
              $ref: '#/components/examples/PaginatedCalendarsExample'
    CalendarEvent:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/CalendarEvent'
          examples:
            CalendarEventExample:
              $ref: '#/components/examples/CalendarEventExample'
    PaginatedCalendarEvents:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/CalendarEvent'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedCalendarEventsExample:
              $ref: '#/components/examples/PaginatedCalendarEventsExample'
    PortalInvitation:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/PortalInvitation'
          examples:
            PortalInvitationExample:
              $ref: '#/components/examples/PortalInvitationExample'
    PaginatedPortalInvitations:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/PortalInvitation'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedPortalInvitationsExample:
              $ref: '#/components/examples/PaginatedPortalInvitationsExample'
    RelationNumber:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/RelationNumber'
          examples:
            RelationNumberExample:
              $ref: '#/components/examples/RelationNumberExample'
    PaginatedRelationNumbers:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/RelationNumber'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedRelationNumberTypesExample:
              $ref: '#/components/examples/PaginatedRelationNumbersExample'
    RelationNumberType:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/RelationNumberType'
          examples:
            RelationNumberTypeExample:
              $ref: '#/components/examples/RelationNumberTypeExample'
    PaginatedRelationNumberTypes:
      description: OK
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/RelationNumberType'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedRelationNumberTypesExample:
              $ref: '#/components/examples/PaginatedRelationNumberTypesExample'
  examples:
    BadRequestExample:
      summary: 400 Bad Request. Probably the access token was not provided
      value:
        error: invalid_request
        error_description: The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed. Check the "access token" parameter.
    BadScopeRequestExample:
      summary: 400 Bad Request
      value:
        error: invalid_scope
        error_description: The requested scope is invalid, unknown, or malformed. Check the "scope:example" scope.
    UnauthorizedExample:
      summary: 401 Unauthorized
      value:
        success: false
        error: access_denied
        error_description: The resource owner or authorization server denied the request.
    ClientUnauthorizedExample:
      summary: 401 Unauthorized
      value:
        success: false
        error: invalid_client
        error_description: Client authorization failed.
    NotFoundExample:
      summary: 404 Not Found
      value:
        success: false
        error:
          code: 404
          description: Not found
    UnprocessableEntityExample:
      summary: 422 Unprocessable Entity
      value:
        success: false
        error:
          - code: 1
            type: generic_exception
            errors: []
    PaginationExample:
      summary: Pagination
      value:
        pagination:
          total: 1
          count: 1
          per_page: 15
          current: 1
          total_pages: 1
          links: []
    CreatedExample:
      summary: 200 OK
      value:
        success: true
        id: "1"
    UpdatedExample:
      summary: 200 OK
      value:
        success: true
        id: "1"
    DeletedExample:
      summary: 200 OK
      value:
        success: true
        id: "1"
    AddressExample:
      summary: 200 OK
      value:
        data:
          type: 4
          postcode: 9712VL
          house_number: "46"
          street_name: Noorderhaven
          city: Groningen
          house_number_addition: "``"
          customer: 4482
          active: true
          lat: 53.219708
          lng: 6.558785
          country: Netherlands
    PaginatedAddressesExample:
      summary: 200 OK
      value:
        data:
          - type: 4
            postcode: 9712VL
            house_number: "46"
            street_name: Noorderhaven
            city: Groningen
            house_number_addition: "``"
            customer: 4482
            active: true
            lat: 53.219708
            lng: 6.558785
            country: Netherlands
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    CustomerExample:
      summary: 200 OK
      value:
        data:
          id: 1234
          initials: AB
          firstName: Albert
          suffix: de
          lastName: Vries
          dateOfBirth: "``"
          phone: "0512345678"
          mobile: "0612345678"
          sex: "0"
          emailaddress: ab.de.vries@test.nl
          smoking: false
          martialStatus: "0"
          mariedBefore: true
          office: 1
          type: "1"
          parent: 2
          partner: 3
          houseOwned: false
          advisor: 1
          employer: Rapide Internet
          position: Positie
          mailingEnabled: false
          salary: 123456
          title: 1
          accountNumber: "``"
          iban: NL 12 ABCD 012345678
          businessname: Rapide Internet
          businesstype: 1
          kvkNumber: "123456789"
          numberOfEmployees: 2
          revenue: 123456
          payroll: 123456
          retirement_income: 123456
          passed_away: true
          passed_away_at: "null"
          salary_date: "null"
          retirement_income_date: "null"
    PaginatedCustomersExample:
      value:
        data:
          - id: 1234
            initials: AB
            firstName: Albert
            suffix: de
            lastName: Vries
            dateOfBirth: "``"
            phone: "0512345678"
            mobile: "0612345678"
            sex: "0"
            emailaddress: ab.de.vries@test.nl
            smoking: false
            martialStatus: "0"
            mariedBefore: true
            office: 1
            type: "1"
            parent: 2
            partner: 3
            houseOwned: false
            advisor: 1
            employer: Rapide Internet
            position: Positie
            mailingEnabled: false
            salary: 123456
            title: 1
            accountNumber: "``"
            iban: NL 12 ABCD 012345678
            businessname: Rapide Internet
            businesstype: 1
            kvkNumber: "123456789"
            numberOfEmployees: 2
            revenue: 123456
            payroll: 123456
            retirement_income: 123456
            passed_away: true
            passed_away_at: "null"
            salary_date: "null"
            retirement_income_date: "null"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    DossiersExample:
      value:
        data:
          uuid: "39b304f1-051e-412c-94cb-71f46892d455"
          customer_id: "1234"
          status: 1
    PaginatedDossiersExample:
      value:
        data:
          - uuid: "39b304f1-051e-412c-94cb-71f46892d455"
            customer_id: "1234"
            status: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    EmailAccountExample:
      value:
        data:
          name: John Doe
          address: test@test.nl
          host: imap.gmail.com
          port: 143
          username: test@test.nl
          validate_cert: false
          encryption: "0"
          signature: Yours truly
          sync_enabled: false
          synced_at: 01/01/2018
          locked: false
          auto_match: false
          auto_process: false
          process_email_account_folder_id: 0
    PaginatedEmailAccountsExample:
      value:
        data:
          - name: John Doe
            address: test@test.nl
            host: imap.gmail.com
            port: 143
            username: test@test.nl
            validate_cert: false
            encryption: "0"
            signature: Yours truly
            sync_enabled: false
            synced_at: 01/01/2018
            locked: false
            auto_match: false
            auto_process: false
            process_email_account_folder_id: 0
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    LetterExample:
      value:
        data:
          name: Test letter
          address: Test
          content: Test
          customer_id: 1
          user_id: 1
          for_instance_class: 1
          for_instance_id: 1
          category_id: 1
          template_id: 1
    PaginatedLettersExample:
      value:
        data:
          - name: Test letter
            address: Test
            content: Test
            customer_id: 1
            user_id: 1
            for_instance_class: 1
            for_instance_id: 1
            category_id: 1
            template_id: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    LockExample:
      value:
        data:
          lockable_type: customer
          lockable_id: 1
          user_id: 1
    PaginatedLocksExample:
      value:
        data:
          - lockable_type: customer
            lockable_id: 1
            user_id: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    MortgageExample:
      value:
        data:
          customer_id: 1
          hypotheeknummer: "12345678"
          koopsom: 250000
          onderpandsgegevens: Hoofdstraat 1, Hoofdstad
          redenHypotheek: Bestaande bouw
          hoofdsomHypotheek: 100000
          hypotheciareInschrijving: "150000"
          taxateur_id: 1
          marktwaarde: 250000
          datumTaxatie: 01-01-2018
          wozWaarde: 250000
          wozDatum: 01-01-2018
          totaalSom: 0
          bouwdepot: "25000"
          notaris_id: 1
          passeerdatum: 01-01-2018
          verkopendMakelaar_id: 1
          geldverstrekker_id: 1
          label_id: 1
          nhg: true
          rate: 1
          rangorde: 1
          status: 1
          getekend: 01-01-2018
          voor_verlenging: 01-01-2018
          na_verlening: 01-01-2018
          financiering: 01-01-2018
          bankgarantie: 01-01-20184
          passeerdatumVoortgang: 01-01-2018
          collateral_address: Teststraat
          collateral_city: Teststad
          collateral_postcode: 9123HH
          collateral_housenumber: "61"
          collateral_county: Netherlands
          restantHoofdsom: 500000
          executiewaarde: 100000
          type_woning: 1
          offerteNummer: 100
          datumAanvraag: 01-01-2018
          datumOfferte: 01-01-2018
          datumGeldigheidOfferte: 01-01-2018
          datumOfferteGetekend: 01-01-2018
          vovVoorVerbouwing: 200000
          vovNaVerbouwing: 250000
          ewVoorVerbouwing: 150000
          ewNaVerbouwing: 175000
          trackingNumber: 1
          collateral_addition: A
          purchasing_broker_id: 1
          validity_unsigned_offer_date: 01-01-2018
          validity_signed_offer_date: 01-01-2018
          end_financing_reservation_date: 401-01-2018
          has_bank_guarantee_date: 01-01-2018
          bank_guarantee_date: 01-01-2018
          mortgage_property_id: 1
          financier_agency_id: 1
          arrangement_type: 1
          existing_mortgage_number: "1"
          own_resources_amount: 1
          mutation_code: 1
          is_property_purchase: false
          bank_guarantee_costs: 50000
          net_consultancy_costs: 50000
          mortgage_deed_cost_specification: 5000
          national_mortgage_guarantee_costs: 5000
          fine_interest: 1
          loan_type: "14"
          secondary_customer_id: 1
          loan_to_value: 1
          risk_class: 1
          risk_class_type: 1
    PaginatedMortgagesExample:
      value:
        data:
          - customer_id: 1
            hypotheeknummer: "12345678"
            koopsom: 250000
            onderpandsgegevens: Hoofdstraat 1, Hoofdstad
            redenHypotheek: Bestaande bouw
            hoofdsomHypotheek: 100000
            hypotheciareInschrijving: "150000"
            taxateur_id: 1
            marktwaarde: 250000
            datumTaxatie: 01-01-2018
            wozWaarde: 250000
            wozDatum: 01-01-2018
            totaalSom: 0
            bouwdepot: "25000"
            notaris_id: 1
            passeerdatum: 01-01-2018
            verkopendMakelaar_id: 1
            geldverstrekker_id: 1
            label_id: 1
            nhg: true
            rate: 1
            rangorde: 1
            status: 1
            getekend: 01-01-2018
            voor_verlenging: 01-01-2018
            na_verlening: 01-01-2018
            financiering: 01-01-2018
            bankgarantie: 01-01-20184
            passeerdatumVoortgang: 01-01-2018
            collateral_address: Teststraat
            collateral_city: Teststad
            collateral_postcode: 9123HH
            collateral_housenumber: "61"
            collateral_county: Netherlands
            restantHoofdsom: 500000
            executiewaarde: 100000
            type_woning: 1
            offerteNummer: 100
            datumAanvraag: 01-01-2018
            datumOfferte: 01-01-2018
            datumGeldigheidOfferte: 01-01-2018
            datumOfferteGetekend: 01-01-2018
            vovVoorVerbouwing: 200000
            vovNaVerbouwing: 250000
            ewVoorVerbouwing: 150000
            ewNaVerbouwing: 175000
            trackingNumber: 1
            collateral_addition: A
            purchasing_broker_id: 1
            validity_unsigned_offer_date: 01-01-2018
            validity_signed_offer_date: 01-01-2018
            end_financing_reservation_date: 401-01-2018
            has_bank_guarantee_date: 01-01-2018
            bank_guarantee_date: 01-01-2018
            mortgage_property_id: 1
            financier_agency_id: 1
            arrangement_type: 1
            existing_mortgage_number: "1"
            own_resources_amount: 1
            mutation_code: 1
            is_property_purchase: false
            bank_guarantee_costs: 50000
            net_consultancy_costs: 50000
            mortgage_deed_cost_specification: 5000
            national_mortgage_guarantee_costs: 5000
            fine_interest: 1
            loan_type: "14"
            secondary_customer_id: 1
            loan_to_value: 1
            risk_class: 1
            risk_class_type: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    MortgagePartExample:
      value:
        data:
          - mortgage_id: 1
            hypotheeknummer: "1"
            leningdeelnummer: "1"
            soortLening: lening
            hoofdsom: 150000
            begindatum: 01-01-2018
            einddatum: 01-01-2019
            rente: 4
            rentevasteperiode: "10"
            einddatumRentevast: 01-01-2019
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
            begindatumRentevast: 2018-01-01
            renteType: 1
            duur: 360
            hypotheekType: 1
            afsluitprovisie: 0
            bedenktijd: false
            bedenktijdStartDatum: 2018-01-01
            type: 2
            agency_code: "1"
            tax_box_type: 3
            repayment_type: 1
            interest_agreement_type: 1
            interest_cooling_off_period_type: 1
            interest_cooling_off_period_in_months: 1
            payment_term: 1
            consumptive_percentage: 1
            consumptive_amount: 1
            national_mortgage_guarantee: true
            coverage_percentage: 1
            rate_based_on: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    PaginatedMortgagePartsExample:
      value:
        data:
          - mortgage_id: 1
            hypotheeknummer: "1"
            leningdeelnummer: "1"
            soortLening: lening
            hoofdsom: 150000
            begindatum: 01-01-2018
            einddatum: 01-01-2019
            rente: 4
            rentevasteperiode: "10"
            einddatumRentevast: 01-01-2019
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
            begindatumRentevast: 2018-01-01
            renteType: 1
            duur: 360
            hypotheekType: 1
            afsluitprovisie: 0
            bedenktijd: false
            bedenktijdStartDatum: 2018-01-01
            type: 2
            agency_code: "1"
            tax_box_type: 3
            repayment_type: 1
            interest_agreement_type: 1
            interest_cooling_off_period_type: 1
            interest_cooling_off_period_in_months: 1
            payment_term: 1
            consumptive_percentage: 1
            consumptive_amount: 1
            national_mortgage_guarantee: true
            coverage_percentage: 1
            rate_based_on: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    MortgageProgressExample:
      value:
        data:
          id: 1
          mortgage_id: 1
          name: Testverklaring
          sent: true
          received: true
          completed: true
          comment: Comment
          date: 01-01-2018
          created_at: "2019-10-25T12:00:00+02:00"
          updated_at: "2019-10-25T13:00:00+02:00"
    PaginatedMortgageProgressExample:
      value:
        data:
          - id: 1
            mortgage_id: 1
            name: Testverklaring
            sent: true
            received: true
            completed: true
            comment: Comment
            date: 01-01-2018
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    DamageExample:
      value:
        data:
          customer_id: 1
          damage_number: "700004"
          licenseplate: AA-BB-12
          policy_id: 564
          insurance_branche_code: 0
          policy_contractNumber: "702519615"
          insurance_agency_id: 0
          settled: true
          date: 2008-11-12
          blame: true
          cause: Letselschade, oorzaak onbekend
          notes: Notities
          agency_id: 8
          agency_contact_id: 0
          agency_contact: Jan Modaal
          agency_phone: "0612345678"
          agency_emailaddress: test@test.nl
          external_number: "0612345678"
          wa: 0
          casco: 500
          deductible: 200
          garage_id: 1
          garage_contact_id: 1
          user_id: 1
          trackingNumber: "5"
          expert_id: 1
          expert_case_number: "1"
          pay_to: 1
          status: 1
          wa_at: "1"
          casco_at: "1"
          deductible_at: "1"
          estimated: 1
    PaginatedDamagesExample:
      value:
        data:
          - customer_id: 1
            damage_number: "700004"
            licenseplate: AA-BB-12
            policy_id: 564
            insurance_branche_code: 0
            policy_contractNumber: "702519615"
            insurance_agency_id: 0
            settled: true
            date: 2008-11-12
            blame: true
            cause: Letselschade, oorzaak onbekend
            notes: Notities
            agency_id: 8
            agency_contact_id: 0
            agency_contact: Jan Modaal
            agency_phone: "0612345678"
            agency_emailaddress: test@test.nl
            external_number: "0612345678"
            wa: 0
            casco: 500
            deductible: 200
            garage_id: 1
            garage_contact_id: 1
            user_id: 1
            trackingNumber: "5"
            expert_id: 1
            expert_case_number: "1"
            pay_to: 1
            status: 1
            wa_at: "1"
            casco_at: "1"
            deductible_at: "1"
            estimated: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    DocumentExample:
      value:
        data:
          name: Testverklaring voor testverzekering
          type: Microsoft Outlook
          mime_type: application/pdf
          customer_id: 1
          documentcategory_id: 1
          extension: pdf
          migrated: true
          filesize: 1000
          decoded: true
          user_id: 1
    PaginatedDocumentsExample:
      value:
        data:
          - name: Testverklaring voor testverzekering
            type: Microsoft Outlook
            mime_type: application/pdf
            customer_id: 1
            documentcategory_id: 1
            extension: pdf
            migrated: true
            filesize: 1000
            decoded: true
            user_id: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    EmailExample:
      value:
        data:
          id: 1
    PaginatedEmailsExample:
      value:
        data:
          - id: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    TemplateExample:
      value:
        data:
          id: 4
          title: Template
          nameInSystem: Test template
          content: Test content
          type: 1
          primaryMail: test@test.nl
          category: 1
          created_at: "2019-10-25T12:00:00+02:00"
          updated_at: "2019-10-25T13:00:00+02:00"
          deleted_at: "2019-10-25T14:00:00+02:00"
          agency_id: 1
    PaginatedTemplatesExample:
      value:
        data:
          - id: 4
            title: Template
            nameInSystem: Test template
            content: Test content
            type: 1
            primaryMail: test@test.nl
            category: 1
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
            deleted_at: "2019-10-25T14:00:00+02:00"
            agency_id: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    NoteExample:
      value:
        data:
          id: 1
          title: Notitie
          user_id: 1
          content: Call was made by customer XXX at 13:48
          datetime: "2019-10-25T12:00:00+02:00"
          category: 1
          customer_id: 1234
          created_at: "2019-10-25T12:00:00+02:00"
          updated_at: "2019-10-25T13:00:00+02:00"
          deleted_at: "2019-10-25T14:00:00+02:00"
    PaginatedNotesExample:
      value:
        data:
          - id: 1
            title: Notitie
            user_id: 1
            content: Call was made by customer XXX at 13:48
            datetime: "2019-10-25T12:00:00+02:00"
            category: 1
            customer_id: 1234
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
            deleted_at: "2019-10-25T14:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    SignalExample:
      value:
        data:
          - id: 1
            signal_query_id: 1
            customer_id: 1
            status: 1
            snoozed_until: 01-01-2018 12:00:00
            comment: test
            finished_by: 1
            finished_at: 01-01-2018 12:00:00
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    PaginatedSignalsExample:
      value:
        data:
          - id: 1
            signal_query_id: 1
            customer_id: 1
            status: 1
            snoozed_until: 01-01-2018 12:00:00
            comment: test
            finished_by: 1
            finished_at: 01-01-2018 12:00:00
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    AccountExample:
      value:
        data:
          id: 1
          account_type_id: 4
          customer_id: 1234
          joint_id: 1235
          active: true
          primary: true
          number: "123456789"
          description: "Description"
          created_at: "2019-10-25T12:00:00+02:00"
          updated_at: "2019-10-25T13:00:00+02:00"
    PaginatedAccountsExample:
      value:
        data:
          - id: 1
            account_type_id: 4
            customer_id: 1234
            joint_id: 1235
            active: true
            number: "4"
            description: "4"
            primary: true
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    OfficeExample:
      value:
        data:
          - id: 1
            name: "1"
            owner_id: 1
            code: "1"
            phone: "1"
            postcode: "1"
            houseNumber: "1"
            streetName: "1"
            city: "1"
            houseNumberAddition: "1"
            email: "1"
            website: "1"
    PaginatedOfficesExample:
      value:
        data:
          - id: 1
            name: "1"
            owner_id: 1
            code: "1"
            phone: "1"
            postcode: "1"
            houseNumber: "1"
            streetName: "1"
            city: "1"
            houseNumberAddition: "1"
            email: "1"
            website: "1"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    SearchExample:
      value:
        data:
          - id: 4
            name: Test
            content: test content
            user_id: 1
            public: true
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
    PaginatedSearchesExample:
      value:
        data:
          - id: 4
            name: Test
            content: test content
            user_id: 1
            public: true
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    AXMessageExample:
      value:
        data:
          id: 1
          version: "17.0"
          status: 1
          user_id: 1
          customer_id: 1
          updated_at: "2019-10-25T13:00:00+02:00"
    PaginatedAXMessagesExample:
      value:
        data:
          id: 1
          version: "17.0"
          status: 1
          user_id: 1
          customer_id: 1
          updated_at: "2019-10-25T13:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    TaskExample:
      value:
        data:
          id: 1
          category_id: 1
          status: 0
          type: 20
          priority: 1
          user_id: 1
          finished_by: null
          customer_id: 1234
          content: Mortgage pass date
          description: Check if everything proceeded correctly
          date: 2019-01-30T12:00:00+02:00
          finished_at: 2019-01-30T12:00:00+02:00
    PaginatedTasksExample:
      value:
        data:
          - id: 1
            category_id: 1
            status: 0
            type: 20
            priority: 1
            user_id: 1
            finished_by: null
            customer_id: 1234
            content: Mortgage pass date
            description: Check if everything proceeded correctly
            date: 2019-01-30T12:00:00+02:00
            finished_at: 2019-01-30T12:00:00+02:00
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    CalendarExample:
      value:
        data:
          - id: 1
            name: My calendar
            user_id: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    PaginatedCalendarsExample:
      value:
        data:
          - id: 1
            name: My calendar
            user_id: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    CalendarEventExample:
      value:
        data:
          - id: 1
            calendar_id: 1
            customer_id: 1234
            description: My evnt
            summary: Detailled event description
            location: The location of the event
            time_start: "2019-01-01 12:00:00"
            time_end: "2019-01-02 12:00:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    PaginatedCalendarEventsExample:
      value:
        data:
          - id: 1
            calendar_id: 1
            customer_id: 1234
            description: My evnt
            summary: Detailled event description
            location: The location of the event
            time_start: '2019-01-01 12:00:00+02:00'
            time_end: '2019-01-02 12:00:00+02:00'
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    PortalInvitationExample:
      value:
        data:
          id: 1
          customer_id: 1234
          send_email: false
          type: 'full'
          token: 'oTicierOsEuGAlDruNDELERCulGABASkIDeClINERMiSPENTATErEvIGhANDIeLAIRepTORsycHawnSiBleDpieNGOUSCONiDIAS'
          valid_until: '2019-01-01 12:00:00+02:00'
          active: true
    PaginatedPortalInvitationsExample:
      value:
        data:
          - id: 1
            customer_id: 1234
            send_email: false
            type: 'full'
            token: 'oTicierOsEuGAlDruNDELERCulGABASkIDeClINERMiSPENTATErEvIGhANDIeLAIRepTORsycHawnSiBleDpieNGOUSCONiDIAS'
            valid_until: '2019-01-01 12:00:00+02:00'
            active: true
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    RelationNumberStoreExample:
      value:
        number: 'external_relation_number_123'
        numberable_type: 'customer'
        numberable_id: '1234'
        relation_number_type_id: 1
        created_at: "2019-10-25T12:00:00+02:00"
        update_at: '2019-01-02 12:00:00+02:00'
    RelationNumberExample:
      value:
        data:
          id: 1
          number: 'external_relation_number_123'
          numberable_type: 'customer'
          numberable_id: '1234'
          relation_number_type_id: 1
          created_at: "2019-10-25T12:00:00+02:00"
          update_at: '2019-01-02 12:00:00+02:00'
    PaginatedRelationNumbersExample:
      value:
        data:
          - id: 1
            number: 'external_relation_number_123'
            numberable_type: 'customer'
            numberable_id: '1234'
            relation_number_type_id: 1
            created_at: "2019-10-25T12:00:00+02:00"
            update_at: '2019-01-02 12:00:00+02:00'
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
    RelationNumberTypeExample:
      value:
        data:
          id: 1
          name: 'Relation number type name'
    PaginatedRelationNumberTypesExample:
      value:
        data:
          - id: 1
            name: 'Relation number type name'
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: []
  parameters:
    PerPage:
      name: perPage
      in: query
      description: The maximum number of objects to return
      required: false
      example: "25"
      schema:
        type: integer
        default: 15
    Page:
      name: page
      in: query
      description: The page number
      required: false
      example: "1"
      schema:
        type: integer
        default: 1
    JsonHeader:
      name: Accept
      in: header
      description: Provide the desired response type. If this is not provided error messages might be rendered as a generic 500 html page.
      required: true
      example: application/json
      schema:
        type: string
        enum:
          - application/json
    AddressId:
      name: address_id
      in: path
      description: The id of the address
      required: true
      example: "1"
      schema:
        type: integer
    CustomerId:
      name: customer_id
      in: path
      description: The ID or of the customer.
      required: true
      example: "1"
      schema:
        type: integer
    CustomerIdOrUUId:
      name: customer_id_or_uuid
      in: path
      description: The ID or UUID of the customer.
      required: true
      example: "1"
      schema:
        type: string
    DossierId:
      name: dossier_id
      in: path
      description: The id of the dossier
      required: true
      example: "1"
      schema:
        type: integer
    EmailAccountId:
      name: emailAccount_id
      in: path
      description: The id of the emailaccount
      required: true
      example: "1"
      schema:
        type: integer
    LetterId:
      name: letter_id
      in: path
      description: The id of the letter
      required: true
      example: "1"
      schema:
        type: integer
    LockId:
      name: lock_id
      in: path
      description: The id of the lock
      required: true
      example: "1"
      schema:
        type: integer
    MortgageId:
      name: mortgage_id
      in: path
      description: The id of the mortgage
      required: true
      example: "1"
      schema:
        type: integer
    MortgagePartId:
      name: mortgagePart_id
      in: path
      description: The id of the mortgagePart
      required: true
      example: "1"
      schema:
        type: integer
    MortgageProgressId:
      name: mortgageProgress_id
      in: path
      description: The id of the mortgageProgress
      required: true
      example: "1"
      schema:
        type: integer
    DamageId:
      name: damage_id
      in: path
      description: The id of the damage
      required: true
      example: "1"
      schema:
        type: integer
    DocumentId:
      name: document_id
      in: path
      description: The id of the document
      required: true
      example: "1"
      schema:
        type: integer
    EmailId:
      name: email_id
      in: path
      description: The id of the email
      required: true
      example: "1"
      schema:
        type: integer
    TemplateId:
      name: template_id
      in: path
      description: The id of the template
      required: true
      example: "1"
      schema:
        type: integer
    NoteId:
      name: note_id
      in: path
      description: The id of the note
      required: true
      example: "1"
      schema:
        type: integer
    SignalId:
      name: signal_id
      in: path
      description: The id of the signal
      required: true
      example: "1"
      schema:
        type: integer
    AccountId:
      name: account_id
      in: path
      description: The id of the account
      required: true
      example: "1"
      schema:
        type: integer
    OfficeId:
      name: office_id
      in: path
      description: The id of the office
      required: true
      example: "1"
      schema:
        type: integer
    PortalInvitationId:
      name: portalInvitation_id
      in: path
      description: The id of the portal invitation
      required: true
      example: "1"
      schema:
        type: integer
    PortalInvitationToken:
      name: portalInvitation_token
      in: path
      description: The token of the portal invitation
      required: true
      example: "oTicierOsEuGAlDruNDELERCulGABASkIDeClINERMiSPENTATErEvIGhANDIeLAIRepTORsycHawnSiBleDpieNGOUSCONiDIAS"
      schema:
        type: string
    RelationNumberId:
      name: relationNumber_id
      in: path
      description: The id of the relation number
      required: true
      example: "1"
      schema:
        type: number
    RelationNumberTypeId:
      name: relationNumberType_id
      in: path
      description: The id of the relation number type
      required: true
      example: "1"
      schema:
        type: number
    SearchId:
      name: search_id
      in: path
      description: The id of the search
      required: true
      example: "1"
      schema:
        type: integer
    AXMessageId:
      name: ax_message_id
      in: path
      description: The id of the AX Message
      required: true
      example: "1"
      schema:
        type: integer
    TaskId:
      name: task_id
      in: path
      description: The id of the task
      required: true
      example: "1"
      schema:
        type: integer
    CalendarEventId:
      name: event_id
      in: path
      description: The id of the event
      required: true
      example: "1"
      schema:
        type: integer
    CalendarId:
      name: calendar_id
      in: path
      description: The id of the calendar
      required: true
      example: "1"
      schema:
        type: integer
