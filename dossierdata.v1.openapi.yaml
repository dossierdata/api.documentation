openapi: 3.0.0
info:
  title: DossierData API
  version: ""
  description: |-
    Welcome to the **DossierData API**.

    This API provides access to a all data from a tenant within DossierData.

    # Authentication
    The API uses the OAuth 2.0 authentication method.

    The authorization endpoints are:

    + `https://{subdomain}.ddat.nl/api/oauth/authorize`

    + `https://{subdomain}.ddat.nl/api/oauth/token`

    Available grant types are:

    + `authorization_code`

    + `client_credentials`

    + `customer_password`

    ## Client
    To request an OAuth client send an email to `info@dossierdata.nl`.

    In your request please provide the following:
    + your company details
    + a description of what you plan to use the API for
    + a `callback_url` if you plan to use the `authorization_code` grant
    + the grant types you plan to use
    + the scopes you need access to
    + the tenant(s) (e.g. subdomains) you need access to
paths:
  /address:
    get:
      deprecated: true
      responses:
        200:
          $ref: '#/components/responses/PaginatedAddresses'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: This entity has been replaced by "Customer Property"
      tags:
        - Address
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - address:basic
            - address:coordinates
    post:
      deprecated: true
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: This entity has been replaced by "Customer Property"
      tags:
        - Address
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Address"
      security:
        - oauth2:
            - address:create
  /address/{address_id}:
    get:
      deprecated: true
      responses:
        200:
          $ref: '#/components/responses/Address'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: This entity has been replaced by "Customer Property"
      tags:
        - Address
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AddressId'
      security:
        - oauth2:
            - address:basic
            - address:coordinates
    put:
      deprecated: true
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: This entity has been replaced by "Customer Property"
      tags:
        - Address
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AddressId'
      requestBody:
        $ref: "#/components/requestBodies/Address"
      security:
        - oauth2:
            - address:update
    delete:
      deprecated: true
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: This entity has been replaced by "Customer Property"
      tags:
        - Address
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AddressId'
      security:
        - oauth2:
            - address:delete
  /address/by_customer/{customer_id}:
    get:
      deprecated: true
      responses:
        200:
          $ref: '#/components/responses/PaginatedAddresses'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: This entity has been replaced by "Customer Property"
      tags:
        - Address
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
      security:
        - oauth2:
            - address:basic
            - address:coordinates
  /assessment_token/generate_for_customer:
    post:
      responses:
        200:
          $ref: '#/components/responses/JWTResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a JWT token to log in a customer on the assessment portal
      description: |-
        This endpoint can be used to create a JWT token to log in a customer on the assessment portal
      tags:
        - Assessment token
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/GenerateAssessmentTokenForCustomerRequest"
      security:
        - oauth2:
            - assessment_token:generate
  /assessment_token/generate_for_partner:
    post:
      responses:
        200:
          $ref: '#/components/responses/JWTResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a JWT token to log in a customer's partner on the assessment portal
      description: |-
        This endpoint can be used to create a JWT token to log in a customer's partner on the assessment portal
      tags:
        - Assessment token
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/GenerateAssessmentTokenForCustomerRequest"
      security:
        - oauth2:
            - assessment_token:generate
  /attachable:
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: |-
        The attachable resource is a dynamic link between a parent and a child object. It is a many to many pivot table
        with morphable relations.

        ---

        **Example**

        A [document](#/Document) can be linked to an attachable category.

        Document            | <--->          | Attachable      | <--->           | AttachableCategory
        ------------------- | -------------- | --------------- | --------------- | ----------------------
        AttachableInterface | child relation | AttachableModel | parent relation | HasAttachableInterface

        ---

        This call requires the `attachable:create` scope.
      tags:
        - Attachable
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateAttachableRequest"
      security:
        - oauth2:
            - attachable:create
  /attachable/{attachable_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/AttachableResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: |-
        Show an attachable object (the `Attachable` model).

        ---

        The attachable resource is a dynamic link between a parent and a child object. It is a many to many pivot table
        with morphable relations.

        ---

        **Example**

        A [document](#/Document) can be linked to an attachable category.

        Document            | <--->          | Attachable      | <--->           | AttachableCategory
        ------------------- | -------------- | --------------- | --------------- | ----------------------
        AttachableInterface | child relation | AttachableModel | parent relation | HasAttachableInterface

        ---

        This call requires the `attachable:basic` scope.
      tags:
        - Attachable
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AttachableId'
      security:
        - oauth2:
            - attachable:basic
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: |-
        Update an attachable object (the `Attachable` model).

        ---

        The attachable resource is a dynamic link between a parent and a child object. It is a many to many pivot table
        with morphable relations.

        ---

        **Example**

        A [document](#/Document) can be linked to an attachable category.

        Document            | <--->          | Attachable      | <--->           | AttachableCategory
        ------------------- | -------------- | --------------- | --------------- | ----------------------
        AttachableInterface | child relation | AttachableModel | parent relation | HasAttachableInterface

        ---

        This call requires the `attachable:update` scope.
      tags:
        - Attachable
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AttachableId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateAttachableRequest"
      security:
        - oauth2:
            - attachable:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: |-
        Delete an attachable object (the `Attachable` model). This only deletes the dynamic link between the parent and
        child objects and does not affect the linked objects in any way.

        ---

        The attachable resource is a dynamic link between a parent and a child object. It is a many to many pivot table
        with morphable relations.

        ---

        **Example**

        A [document](#/Document) can be linked to an attachable category.

        Document            | <--->          | Attachable      | <--->           | AttachableCategory
        ------------------- | -------------- | --------------- | --------------- | ----------------------
        AttachableInterface | child relation | AttachableModel | parent relation | HasAttachableInterface

        ---

        This call requires the `attachable:delete` scope.
      tags:
        - Attachable
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AttachableId'
      security:
        - oauth2:
            - attachable:delete
  /attachable/{attachable_id}/breadcrumbs:
    get:
      responses:
        200:
          $ref: '#/components/responses/AttachableBreadcrumbsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: List all resources linked to child
      description: |-
        Get a breadcrumbs response to where a child instance of an attachable can be found. E.g. `customer 'test'` > `policy '123'` > `attachable category 'documents'`.

        ---

        The attachable resource is a dynamic link between a parent and a child object. It is a many to many pivot table
        with morphable relations.

        ---

        **Example**

        A [document](#/Document) can be linked to an attachable category.

        Document            | <--->          | Attachable      | <--->           | AttachableCategory
        ------------------- | -------------- | --------------- | --------------- | ----------------------
        AttachableInterface | child relation | AttachableModel | parent relation | HasAttachableInterface

        ---

        This call requires the `attachable:breadcrumbs` scope.
      tags:
        - Attachable
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AttachableId'
      security:
        - oauth2:
            - attachable:basic
  /attachable/by_parent:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedAttachablesResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources linked to parent
      description: |-
        Get a paginated list of all attachables linked to a parent object (the `HasAttachable` interface).

        ---

        The attachable resource is a dynamic link between a parent and a child object. It is a many to many pivot table
        with morphable relations.

        ---

        **Example**

        A [document](#/Document) can be linked to an attachable category.

        Document            | <--->          | Attachable      | <--->           | AttachableCategory
        ------------------- | -------------- | --------------- | --------------- | ----------------------
        AttachableInterface | child relation | AttachableModel | parent relation | HasAttachableInterface

        ---

        This call requires the `attachable:basic` scope.
      tags:
        - Attachable
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      requestBody:
        $ref: "#/components/requestBodies/AttachableByInstanceRequest"
      security:
        - oauth2:
            - attachable:basic
  /attachable/by_child:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedAttachablesResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources linked to child
      description: |-
        Get a paginated list of all attachables linked to a child object (the `Attachable` interface).

        ---

        The attachable resource is a dynamic link between a parent and a child object. It is a many to many pivot table
        with morphable relations.

        ---

        **Example**

        A [document](#/Document) can be linked to an attachable category.

        Document            | <--->          | Attachable      | <--->           | AttachableCategory
        ------------------- | -------------- | --------------- | --------------- | ----------------------
        AttachableInterface | child relation | AttachableModel | parent relation | HasAttachableInterface

        ---

        This call requires the `attachable:basic` scope.
      tags:
        - Attachable
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      requestBody:
        $ref: "#/components/requestBodies/AttachableByInstanceRequest"
      security:
        - oauth2:
            - attachable:basic
  /attachable/by_child/breadcrumbs:
    post:
      responses:
        200:
          $ref: '#/components/responses/AttachableBreadcrumbsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: List all resources linked to child
      description: |-
        Get a breadcrumbs response to where a child instance of an attachable can be found. E.g. `customer 'test'` > `policy '123'` > `attachable category 'documents'`.

        ---

        The attachable resource is a dynamic link between a parent and a child object. It is a many to many pivot table
        with morphable relations.

        ---

        **Example**

        A [document](#/Document) can be linked to an attachable category.

        Document            | <--->          | Attachable      | <--->           | AttachableCategory
        ------------------- | -------------- | --------------- | --------------- | ----------------------
        AttachableInterface | child relation | AttachableModel | parent relation | HasAttachableInterface

        ---

        This call requires the `attachable:breadcrumbs` scope.
      tags:
        - Attachable
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AttachableId'
      requestBody:
        $ref: "#/components/requestBodies/AttachableByInstanceRequest"
      security:
        - oauth2:
            - attachable:basic
  /country:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedCountries'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a paginated list of all Countries.
      tags:
        - Country
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - country:index
  /country/{country_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/CountryResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: Show a customer
      tags:
        - Country
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CountryId'
      security:
        - oauth2:
            - country:show
  /customer:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedCustomersResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: Paginate all
      description: |-
        Get a paginated list of all customers.

        This call required one or more of the following scopes:
        + `customer:basic`

        + `customer:contact`

        + `customer:full`

        Depending on which scopes you have access to, corresponding fields will be returned (see examples).
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/CustomerIncludes'
      security:
        - oauth2:
            - customer:basic
            - customer:contact
            - customer:full
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedCustomerResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create customer
      description: |-
        Create a new customer.

        This call requires the `customer:create` scope.
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateCustomerRequest"
      security:
        - oauth2:
            - customer:create
  /customer/lead:
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create lead
      description: |-
        Create a new customer of the type lead.

        This call requires the `customer:create_lead` scope.
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateCustomerLeadRequest"
      security:
        - oauth2:
            - customer:create_lead
  /customer/open/{customer_id_or_uuid}:
    get:
      operationId: paginateCustomers
      responses:
        200:
          $ref: '#/components/responses/CustomerURI'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Open customer
      description: |-
        Get the full url to the customer's dashboard in DossierData

        This call requires the `customer:basic` scope.
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerIdOrUUId'
      security:
        - oauth2:
            - customer:basic
  /customer/mortgage_lead:
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create mortgage lead
      description: |-
        Create a new customer of the type mortgage lead

        This call requires the `customer:create_mortgage_lead` scope.
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateCustomerLeadRequest"
      security:
        - oauth2:
            - customer:create_mortgage_lead
  /customer/ax_message:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedCustomersResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get by AX message
      description: |-
        Find all customers that match the details in the provided AX message

        This call required one or more of the following scopes:
        + `customer:basic`

        + `customer:contact`

        + `customer:full`

        Depending on which scopes you have access to, corresponding fields will be returned (see examples).
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/CustomerIncludes'
      requestBody:
        $ref: "#/components/requestBodies/XMLAXMessageRequest"
      security:
        - oauth2:
            - customer:basic
            - customer:contact
            - customer:full
  /customer/by_relation_number:
    post:
      responses:
        200:
          $ref: '#/components/responses/CustomerResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Find by relation number
      description: |-
        Find a customer by a [relation number](#/Relation%20number/get_relation_number)

        This call required one or more of the following scopes:
        + `customer:basic`

        + `customer:contact`

        + `customer:full`

        Depending on which scopes you have access to, corresponding fields will be returned (see examples).
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerIncludes'
      requestBody:
        $ref: "#/components/requestBodies/GetCustomerByRelationNumber"
      security:
        - oauth2:
            - customer:basic
            - customer:contact
            - customer:full
  /customer/{customer_id}:
    get:
      operationId: getCustomer
      responses:
        200:
          $ref: '#/components/responses/CustomerResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show customer
      description: |-
        Get a customer by its id

        This call required one or more of the following scopes:
        + `customer:basic`

        + `customer:contact`

        + `customer:full`

        Depending on which scopes you have access to, corresponding fields will be returned (see examples).
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
        - $ref: '#/components/parameters/CustomerIncludes'
      security:
        - oauth2:
            - customer:basic
            - customer:contact
            - customer:full
    put:
      operationId: updateCustomer
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update customer
      description: |-
        Update a customer

        This call requires the `customer:update` scope.
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateCustomerRequest"
      security:
        - oauth2:
            - customer:update
    delete:
      operationId: deleteCustomer
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete customer
      description: |-
        Delete a customer

        This call requires the `customer:delete` scope.
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
      security:
        - oauth2:
            - customer:delete
  /customer/{customer_id}/ax_message:
    put:
      operationId: updateCustomerByAX
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update customer with AX message
      description: >-
        Update a customer with the data from an AX Message.

        This call requires the `customer:update` scope.
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
      requestBody:
        $ref: "#/components/requestBodies/XMLAXMessageRequest"
      security:
        - oauth2:
            - customer:update
  /customer_property:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedCustomerPropertiesResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a paginated list of all customer properties.
      tags:
        - Customer property (Address)
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/CustomerPropertyIncludes'
      security:
        - oauth2:
            - customer_property:basic
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Customer property (Address)
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateCustomerPropertyRequest"
      security:
        - oauth2:
            - customer_property:create
  /customer_property/{customer_property_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/CustomerPropertyResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Customer property (Address)
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerPropertyId'
        - $ref: '#/components/parameters/CustomerPropertyIncludes'
      security:
        - oauth2:
            - customer_property:basic
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Customer property (Address)
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerPropertyId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateCustomerPropertyRequest"
      security:
        - oauth2:
            - customer_property:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Customer property (Address)
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerPropertyId'
      security:
        - oauth2:
            - customer_property:delete
  /dossier:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedDossiersResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a paginated list of all Dossiers.
      tags:
        - Dossier
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Dossier
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateDossierRequest"
  /dossier/{dossier_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/DossierResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Dossier
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DossierId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Dossier
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DossierId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateDossierRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Dossier
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DossierId'
  /email_account:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedEmailAccountsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all EmailAccounts.
      tags:
        - Email account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Email account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateEmailAccountRequest"
  /email_account/{emailAccount_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/EmailAccountResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Email account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/EmailAccountId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Email account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/EmailAccountId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateEmailAccountRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Email account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/EmailAccountId'
  /letter:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedLettersResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Letters.
      tags:
        - Letter
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Letter
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateLetterRequest"
  /letter/{letter_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/LetterResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Letter
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/LetterId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Letter
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/LetterId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateLetterRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Letter
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/LetterId'
  /lock:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedLocksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all locks.
      tags:
        - Lock
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Lock
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateLockRequest"
  /lock/{lock_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/LockResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Lock
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/LockId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Lock
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/LockId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateLockRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Lock
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/LockId'
  /mortgage:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedMortgagesResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Mortgages.
      tags:
        - Mortgage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Mortgage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateMortgageRequest"
  /mortgage/{mortgage_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/MortgageResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Mortgage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgageId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Mortgage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgageId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateMortgageRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Mortgage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgageId'
  /mortgage_part:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedMortgagePartsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all mortgageParts.
      tags:
        - Mortgage part
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Mortgage part
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateMortgagePartRequest"
  /mortgage_part/by_mortgage/{mortgage_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedMortgagePartsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources by mortgage
      description: Get a list of mortgageParts by a mortgage.
      tags:
        - Mortgage part
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/MortgageId'
  /mortgage_part/{mortgage_part_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/MortgagePartResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Mortgage part
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgagePartId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Mortgage part
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgagePartId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateMortgagePartRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Mortgage part
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgagePartId'
  /mortgage_progress:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedMortgageProgressResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all MortgageProgresses.
      tags:
        - Mortgage progress
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Mortgage progress
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateMortgageProgressRequest"
  /mortgage_progress/{mortgage_progress_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/MortgageProgressResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Mortgage progress
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgageProgressId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Mortgage progress
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgageProgressId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateMortgageProgressRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Mortgage progress
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/MortgageProgressId'
  /product_label:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedProductLabelsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all product labels.
      tags:
        - Product label
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Product label
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateProductLabelRequest"
  /product_label/{product_label_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/ProductLabelResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Product label
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/ProductLabelId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Product label
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/ProductLabelId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateProductLabelRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Product label
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/ProductLabelId'
  /product_label/by_category:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedProductLabelsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get product labels by product category
      description: Get a paginated list of product labels by product category
      tags:
        - Product label
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/ProductLabelsByProductCategoryRequest"
  /product_label/by_entity:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedProductLabelsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get product labels attached to entity
      description: Get a paginated list of product labels attached to an entity
      tags:
        - Product label
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/ProductLabelsByEntityRequest"
  /product_label/attach_to_entity:
    post:
      responses:
        200:
          $ref: '#/components/responses/Success'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Attach product label to entity
      description: "Attach a product label to an entity for example a customer"
      tags:
        - Product label
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/AttachProductLabelToEntityRequest"
  /product_label/detach_from_entity:
    delete:
      responses:
        200:
          $ref: '#/components/responses/Success'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Detach product label from entity
      description: "Detach a product label from an entity for example a customer"
      tags:
        - Product label
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/DetachProductLabelToEntityRequest"
  /damage:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedDamagesResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Damages.
      tags:
        - Damage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Damage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateDamageRequest"
  /damage/{damage_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/DamageResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Damage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DamageId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Damage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DamageId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateDamageRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Damage
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DamageId'
  /document:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedDocumentsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Documents.
      tags:
        - Document
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Document
      requestBody:
        $ref: "#/components/requestBodies/CreateDocument"
  /document/{document_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/DocumentResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Document
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DocumentId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Document
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DocumentId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateDocument"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Document
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DocumentId'
  /email:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedEmailsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Emails.
      tags:
        - Email
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Email
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateEmailRequest"
  /email/{email_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/EmailResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Email
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/EmailId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Email
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/EmailId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateEmailRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Email
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/EmailId'
  /task:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Tasks.
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateTaskRequest"
  /task/{task_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/TaskResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TaskId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateTaskRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TaskId'
  /task/active/by_customer/{customer_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Get active by customer
      description: "Get all active tasks linked to a customer"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
  /task/active/by_department/{department_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get active by instance
      description: "Get all active tasks linked to an instance"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DepartmentId'
  /task/active/by_user/{user_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get active by instance
      description: "Get all active tasks linked to an instance"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/UserId'
  /task/active_callback/by_department/{department_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get active callback by department
      description: "Get all active callback requests (a special type of task) by a user department"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DepartmentId'
  /task/active_callback/by_user/{user_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get active callback by instance
      description: "Get all active callback requests (a special type of task) by a user"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/UserId'
  /task/completed/by_customer/{customer_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Get completed by customer
      description: "Get all completed tasks linked to a customer"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
  /task/completed/by_department/{department_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get completed by instance
      description: "Get all completed tasks linked to an instance"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DepartmentId'
  /task/completed/by_user/{user_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get completed by instance
      description: "Get all completed tasks linked to an instance"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/UserId'
  /task/completed_callback/by_department/{department_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get completed callback by instance
      description: "Get all completed callback requests (a special type of task) by a user department"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/DepartmentId'
  /task/completed_callback/by_user/{user_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get completed callback by instance
      description: "Get all completed callback requests (a special type of task) by a user"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/UserId'
  /task/active/by_customers:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get active by customers
      description: "Get all active tasks linked to customers"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/TasksByCustomersRequest"
  /task/active/by_instance:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get active by instance
      description: "Get all active tasks linked to an instance"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/TasksByInstanceRequest"
  /task/active/by_customers_and_category:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get active by instance
      description: "Get all active tasks linked to an instance"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/TasksByCustomersAndCategoryRequest"
  /task/completed/by_customers:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get completed by customers
      description: "Get all completed tasks linked to customers"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/TasksByCustomersRequest"
  /task/completed/by_instance:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get completed by instance
      description: "Get all completed tasks linked to an instance"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/TasksByInstanceRequest"
  /task/completed/by_customers_and_category:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get completed by instance
      description: "Get all completed tasks linked to an instance"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/TasksByCustomersAndCategoryRequest"
  /task/activate:
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedTasksWithMetaCounts'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Activate multiple tasks
      description: "Activate multiple tasks at once"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/ActivateTasksRequest"
  /task/{task_id}/activate:
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedTaskWithMetaCounts'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Activate multiple tasks
      description: "Activate multiple tasks at once"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        $ref: "#/components/requestBodies/ActivateTaskRequest"
  /task/complete:
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Complete multiple tasks
      description: "Complete multiple tasks at once for a provided user"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CompleteTasksRequest"
  /task/{task_id}/complete:
    put:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTasksResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Complete multiple tasks
      description: "Complete multiple tasks at once for a provided user"
      tags:
        - Task
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        $ref: "#/components/requestBodies/CompleteTaskRequest"
  /calendar:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedCalendarsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Calendars.
      tags:
        - Calendar
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - calendar:basic
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Calendar
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateCalendarRequest"
      security:
        - oauth2:
            - calendar:create
  /calendar/{calendar_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/CalendarResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Calendar
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CalendarId'
      security:
        - oauth2:
            - calendar:basic
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/ModelNotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Calendar
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CalendarId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateCalendarRequest"
      security:
        - oauth2:
            - calendar:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Calendar
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CalendarId'
      security:
        - oauth2:
            - calendar:delete
  /calendar/event:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedCalendarEventsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Tasks.
      tags:
        - Calendar event
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - calendar_event:full
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Calendar event
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: '#/components/requestBodies/CreateCalendarEventRequest'
      security:
        - oauth2:
            - calendar_event:create
  /calendar/{calendar_id)/events:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedCalendarEventsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Calendar Events.
      tags:
        - Calendar event
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - calendar_event:full
  /calendar/event/{event_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/CalendarEventResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Calendar event
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CalendarEventId'
      security:
        - oauth2:
            - calendar_event:full
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Calendar event
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CalendarEventId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateCalendarEventRequest"
      security:
        - oauth2:
            - calendar_event:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Calendar event
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CalendarEventId'
      security:
        - oauth2:
            - calendar_event:delete
  /template:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedTemplatesResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Templates.
      tags:
        - Template
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Template
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateTemplateRequest"
  /template/{template_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/TemplateResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Template
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TemplateId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Template
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TemplateId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateTemplateRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Template
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/TemplateId'
  /note:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedNotesResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Notes.
      tags:
        - Note
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Note
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateNoteRequest"
  /note/{note_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/NoteResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Note
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/NoteId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Note
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/NoteId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateNoteRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Note
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/NoteId'
  /signal:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedSignalsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Signals.
      tags:
        - Signal
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Signal
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateSignalRequest"
  /signal/{signal_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/SignalResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Signal
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/SignalId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Signal
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/SignalId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateSignalRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Signal
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/SignalId'
  /account:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedAccountsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Accounts.
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - account:basic
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateAccountRequest"
      security:
        - oauth2:
            - account:create
  /account/{account_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/AccountResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AccountId'
      security:
        - oauth2:
            - account:basic
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AccountId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateAccountRequest"
      security:
        - oauth2:
            - account:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AccountId'
      security:
        - oauth2:
            - account:delete
  /office:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedOfficesResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Offices.
      tags:
        - Office
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Office
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateOfficeRequest"
  /office/{office_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/OfficeResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Office
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/OfficeId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Office
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/OfficeId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateOfficeRequest"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Office
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/OfficeId'
  /office/by_customer_relation_number:
    post:
      responses:
        200:
          $ref: '#/components/responses/OfficeResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Find an office by a customer relation number
      description: ""
      tags:
        - Office
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/OfficeByCustomerRelationNumberRequest"
  /user:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedUsersResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: Paginate all
      description: Get a paginated list of all users, active and inactive.
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - user:basic
            - user:detailed
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create user
      description: Create a new user
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateUserRequest"
      security:
        - oauth2:
            - user:create
  /user/{user_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show user
      description: Get a user by its id
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/UserId'
      security:
        - oauth2:
            - user:basic
            - user:detailed
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update user
      description: Update a user with the provided values
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateUserRequest"
      security:
        - oauth2:
            - user:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete user
      description: Delete a user
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/UserId'
      security:
        - oauth2:
            - user:delete
  /user/active:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedUsersResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: Paginate all active
      description: Get a paginated list of all **active** users.
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - user:basic
            - user:detailed
  /user/inactive:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedUsersResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: Paginate all inactive
      description: Get a paginated list of all **inactive** users.
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - user:basic
            - user:detailed
  /user/by_relation_number:
    post:
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Find by relation number
      description: Find a user by a relation number
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/UserByRelationNumber"
      security:
        - oauth2:
            - user:basic
            - user:detailed
  /user/by_ids:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedUsersResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Get by ids
      description: Get a list of users by the provided ids
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/GetUsersByIdsRequest"
      security:
        - oauth2:
            - user:basic
            - user:detailed
  /user/search/by_name:
    post:
      responses:
        200:
          $ref: '#/components/responses/PaginatedUsersResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Get by query
      description: Get a paginated list of users by a search query
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/SearchUsersByNameRequest"
      security:
        - oauth2:
            - user:basic
            - user:detailed
  /user_department:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedUserDepartmentsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a paginated list of all User departments.
      tags:
        - User department
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/UserDepartmentIncludes'
      security:
        - oauth2:
            - user_department:basic
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - User department
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreateUserDepartmentRequest"
      security:
        - oauth2:
            - user_department:create
  /user_department/{user_department_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/UserDepartmentResponseResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - User department
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/UserDepartmentId'
        - $ref: '#/components/parameters/UserDepartmentIncludes'
      security:
        - oauth2:
            - user_department:basic
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - User department
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/UserDepartmentId'
      requestBody:
        $ref: "#/components/requestBodies/UpdateUserDepartmentRequest"
      security:
        - oauth2:
            - user_department:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - User department
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/UserDepartmentId'
      security:
        - oauth2:
            - user_department:delete
  /portal_invitation:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedPortalInvitationsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all portal invitations.
      tags:
        - Portal invitation
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - portal_invitation:index
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: Create a new portal invitation.
      tags:
        - Portal invitation
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreatePortalInvitation"
      security:
        - oauth2:
            - portal_invitation:create
  /portal_invitation/{portalInvitation_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PortalInvitationResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Portal invitation
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PortalInvitationId'
      security:
        - oauth2:
            - portal_invitation:show
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Portal invitation
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PortalInvitationId'
      requestBody:
        $ref: "#/components/requestBodies/PortalInvitation"
      security:
        - oauth2:
            - portal_invitation:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Portal invitation
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PortalInvitationId'
      security:
        - oauth2:
            - portal_invitation:delete
  /portal_invitation/by_token/{portalInvitation_token}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PortalInvitationResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: Show a portal invitation by its token
      tags:
        - Portal invitation
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PortalInvitationToken'
      security:
        - oauth2:
            - portal_invitation:show
  /portal_invitation/by_customer/{customer_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedPortalInvitationsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: List all resource
      description: List all portal invitations for a specific customer
      tags:
        - Portal invitation
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/CustomerId'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - portal_invitation:index
  /relation_number:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedRelationNumbersResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all portal relation number types.
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - relation_number:index
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: Create a new portal invitation.
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/RelationNumber"
      security:
        - oauth2:
            - relation_number:create
  /relation_number/{relationNumber_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/RelationNumberResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/RelationNumberId'
      security:
        - oauth2:
            - relation_number:show
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/RelationNumberId'
      requestBody:
        $ref: "#/components/requestBodies/RelationNumber"
      security:
        - oauth2:
            - relation_number:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/RelationNumberId'
      security:
        - oauth2:
            - relation_number:delete
  /relation_number_type:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedRelationNumberTypesResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all portal relation number types.
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - relation_number_type:index
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: Create a new portal invitation.
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/RelationNumberType"
      security:
        - oauth2:
            - relation_number_type:create
  /relation_number_type/{relationNumberType_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/RelationNumberTypeResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/RelationNumberTypeId'
      security:
        - oauth2:
            - relation_number_type:show
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/RelationNumberTypeId'
      requestBody:
        $ref: "#/components/requestBodies/RelationNumberType"
      security:
        - oauth2:
            - relation_number_type:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Relation number
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/RelationNumberTypeId'
      security:
        - oauth2:
            - relation_number_type:delete
  /search:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedSearchesResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Searches.
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/Search"
  /search/{search_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/SearchResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/SearchId'
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/SearchId'
      requestBody:
        $ref: "#/components/requestBodies/Search"
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/SearchId'
  /hdn/ax_message:
    post:
      responses:
        200:
          $ref: '#/components/responses/AXMessageResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Queue
      description: >-
        Post an AX Message to be used to update a Customer. If none or multiple customers are matched, the AX Message
        will be stored so a user of the system can manually match it to a customer and validate the updated
        fields/objects.
      tags:
        - HDN
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/XMLAXMessageRequest"
  /hdn/ax_message/{ax_message_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/AXMessageResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: Fetch the status of a queued AX Message.
      tags:
        - HDN
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/AXMessageId'
  /hdn_company:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedHDNCompaniesResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all HDN companies.
      tags:
        - HDN company
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - hdn_company:basic
  /hdn_company/by_hdn_code:
    post:
      responses:
        200:
          $ref: '#/components/responses/HDNCompanyResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Find HDN company
      description: Find an HDN company by HDN code
      tags:
        - HDN company
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/GetHDNCompanyByHDNCodeRequest"
      security:
        - oauth2:
            - hdn_company:basic
  /hdn_company_label:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedHDNCompanyLabelsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all HDN company labels.
      tags:
        - HDN company label
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - hdn_company_label:basic
  /hdn_company_label/by_company/{hdn_company_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedHDNCompanyLabelsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: List all resources linked to HDN company
      description: Get a list of labels of a HDN company.
      tags:
        - HDN company label
      parameters:
        - $ref: '#/components/parameters/HDNCompanyId'
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - hdn_company_label:basic
  /hdn_company_product:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedHDNCompanyProductsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all HDN company products.
      tags:
        - HDN company product
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - hdn_company_product:basic
  /hdn_company_product/by_company/{hdn_company_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedHDNCompanyProductsResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: List all resources
      description: Get a list of all HDN companies.
      tags:
        - HDN company product
      parameters:
        - $ref: '#/components/parameters/HDNCompanyId'
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      security:
        - oauth2:
            - hdn_company_product:basic
  /property:
    get:
      responses:
        200:
          $ref: '#/components/responses/PaginatedPropertiesResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
      summary: List all resources
      description: Get a list of all Properties.
      tags:
        - Property
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PropertyIncludes'
      security:
        - oauth2:
            - property:basic
            - property:coordinates
            - property:jumba
    post:
      responses:
        200:
          $ref: '#/components/responses/CreatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Create a new resource
      description: ""
      tags:
        - Property
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/CreatePropertyRequest"
      security:
        - oauth2:
            - property:create
  /property/{property_id}:
    get:
      responses:
        200:
          $ref: '#/components/responses/PropertyResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Show a resource
      description: ""
      tags:
        - Property
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PropertyId'
        - $ref: '#/components/parameters/PropertyIncludes'
      security:
        - oauth2:
            - property:basic
            - property:coordinates
            - property:jumba
    put:
      responses:
        200:
          $ref: '#/components/responses/UpdatedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Update a resource
      description: ""
      tags:
        - Property
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PropertyId'
      requestBody:
        $ref: "#/components/requestBodies/UpdatePropertyRequest"
      security:
        - oauth2:
            - property:update
    delete:
      responses:
        200:
          $ref: '#/components/responses/DeletedResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      summary: Delete a resource
      description: ""
      tags:
        - Property
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PropertyId'
      security:
        - oauth2:
            - property:delete
  /property/suggestions:
    post:
      responses:
        200:
          $ref: '#/components/responses/PropertySuggestionResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          $ref: '#/components/responses/ModelNotFoundResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Find suggestions by address
      description: >-
        The property suggestions can be used as an autocomplete step or to hint towards an existing address when none is found.
      tags:
        - Property
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
      requestBody:
        $ref: "#/components/requestBodies/PropertyByAddressRequest"
      security:
        - oauth2:
            - property:basic
  /property/by_address:
    post:
      responses:
        200:
          $ref: '#/components/responses/PropertyResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Find or create by address
      description: >-
        Find or create a property by postal code, house number, house letter and number addition.
      tags:
        - Property
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PropertyIncludes'
      requestBody:
        $ref: "#/components/requestBodies/PropertyByAddressRequest"
      security:
        - oauth2:
            - property:basic
            - property:coordinates
  /property/by_address_with_jumba:
    post:
      responses:
        200:
          $ref: '#/components/responses/PropertyResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        422:
          $ref: '#/components/responses/UnprocessableEntityResponse'
      summary: Find or create by address and update with Jumba
      description: >-
        Find or create a property by postal code, house number, house letter and number addition. If this property is also
        found in Jumba the property is automatically updated with that data/
      tags:
        - Property
      parameters:
        - $ref: '#/components/parameters/JsonHeader'
        - $ref: '#/components/parameters/PropertyIncludes'
      requestBody:
        $ref: "#/components/requestBodies/PropertyByAddressRequest"
      security:
        - oauth2:
            - property:basic
            - property:coordinates
            - property:jumba
tags:
  - name: Account
    description: Endpoint for Account resource management
  - name: Assessment token
    description: Endpoint for generating Assessment JTW
  - name: Attachable
    description: Endpoint for Attachable resource management
  - name: Calendar
    description: Endpoint for Calendar resource management
  - name: Calendar event
    description: Endpoint for Calendar Event resource management
  - name: Country
    description: Endpoint for Country resource management
  - name: Customer
    description: Endpoint for Customer resource management
  - name: Customer property (Address)
    description: Endpoint for Customer Property resource management
  - name: Damage
    description: Endpoint for Damage resource management
  - name: Document
    description: Endpoint for Document resource management
  - name: Dossier
    description: Endpoint for Findesk Dossier resource management
  - name: Email account
    description: Endpoint for EmailAccount resource management
  - name: Email
    description: Endpoint for Email resource management
  - name: HDN
    description: Endpoint for HDN functions
  - name: HDN company
    description: Endpoint for HDN companies
  - name: HDN company label
    description: Endpoint for HDN company labels
  - name: HDN company product
    description: Endpoint for HDN company products
  - name: Letter
    description: Endpoint for Letter resource management
  - name: Lock
    description: Endpoint for Lock resource management
  - name: Mortgage part
    description: Endpoint for MortgagePart resource management
  - name: Mortgage progress
    description: Endpoint for MortgageProgress resource management
  - name: Mortgage
    description: Endpoint for Mortgage resource management
  - name: Note
    description: Endpoint for Note resource management
  - name: Office
    description: Endpoint for Office resource management
  - name: Portal invitation
    description: Endpoint for Portal invitations resource management
  - name: Product label
    description: Endpoint for Product labels resource management
  - name: Property
    description: Endpoint for Properties resource management
  - name: Relation number
    description: Endpoint for Portal invitations resource management
  - name: Search
    description: Endpoint for Search resource management
  - name: Signal
    description: Endpoint for signal resource management
  - name: Task
    description: Endpoint for Task resource management
  - name: Template
    description: Endpoint for Template resource management
  - name: User
    description: Endpoint for User resource management
  - name: User department
    description: Endpoint for User department resource management
  - name: Address
    description: Endpoint for Address resource management
servers:
  - url: https://test.ddat.nl/api/v1
components:
  requestBodies:
    CreateSignalRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Signal'
    UpdateSignalRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Signal'
    UpdateTaskRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
    CreateTaskRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - user_id
              - content
              - date
            properties:
              category_id:
                type: number
                enum:
                  - 1
                  - 2
                  - 3
                  - 4
                  - 5
                  - 6
                  - 7
                  - 8
                  - 9
                  - 10
                  - 11
                  - 12
                  - 13
                description: >
                  The category of the task, this will default to `Customer` if not provided.

                  This is an enum describing all categories of items found on the customer dashboard

                  Category:
                    * `1` - Customer
                    * `2` - Banking
                    * `3` - Insurance
                    * `4` - Damage
                    * `5` - Mortgage
                    * `6` - Mailing
                    * `7` - Dossier
                    * `8` - Credit
                    * `9` - Income
                    * `10` - Retirement
                    * `11` - Possession
                    * `12` - Obligation
                    * `13` - Current living condition
              status:
                type: number
                enum:
                  - null
                  - 0
                  - 1
                description: >
                  The status of the task, this will default to `Active` if not provided.

                  This is an enum that describes all task status types.
                    - `null`: Unknown
                    - `0`: Active
                    - `1`: Completed
              type:
                type: number
                enum:
                  - 1
                  - 2
                  - 3
                  - 4
                  - 20
                description: >
                  The type of the task, this will default to `General task` if not provided.

                  This is an enum that describes all task types.
                   - `1`: Call back request
                   - `2`: Check task
                   - `3`: Communication task
                   - `4`: Birthday task
                   - `20`: General task
              priority:
                type: number
                enum:
                  - 0
                  - 1
                  - 2
                  - 3
                description: >
                  The priority of the task, this will default to `Normal` if not provided.

                  This is an enum that describes all task priority types.
                   - `0`: Critical
                   - `1`: Important
                   - `2`: Normal
                   - `3`: Insignificant
              user_id:
                type: number
                description: The id of the user who will be assigned as the creator of the task.
              finished_by:
                type: number
                description: The id of the user who will be assigned as person who completed the task.
              customer_id:
                type: number
                description: The id of the customer to which this task is assigned.
              content:
                type: string
                description: The title of the task
              description:
                type: string
                description: A more detailed or additional description of the task
              date:
                type: string
                description: The date when the task is planned, format Y-m-d
              time:
                type: string
                description: The specific time when the task is planned, format H:i
              assigned_users:
                type: array
                items:
                  type: integer
                description: An array of user ids which will be assigned to this task
              assigned_departments:
                type: array
                items:
                  type: integer
                description: An array of user department ids which will be assigned to this task
              finished_at:
                type: string
                description: ISO 8601 date when the task was finished.
          examples:
            CreateSimpleTaskExample:
              description: >-
                The creation of a simple task.

                - When not provided the `category_id` will default to `Customer`

                - When not provided the `status` will default to `Active`

                - When not provided the `type` will default to `Generic task`

                - When not provided the `priority` will default to `Normal`
              value:
                user_id: 1
                content: 'Need to check x'
                date: '2020-01-01'
            CreateTaskExample:
              description: >-
                The creation of task with all fields provided.
              value:
                category_id: 1
                status: 0
                type: 20
                priority: 2
                user_id: 1
                finished_by: 2
                customer_id: 1
                content: 'Need to check x'
                description: 'A detailed description of the task'
                date: '2020-01-01'
                time: '12:00'
                assigned_users: [ 1,2,3 ]
                assigned_departments: [ 4 ]
    TasksByCustomersRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - customerIds
            properties:
              customerIds:
                type: array
                items:
                  type: integer
                description: An array of customer ids
          examples:
            TasksByCustomersRequest:
              $ref: '#/components/examples/TasksByCustomersRequest'
    TasksByCustomersAndCategoryRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - customerIds
              - category
            properties:
              customerIds:
                type: array
                items:
                  type: integer
                description: An array of customer ids
              category:
                $ref: '#/components/schemas/CategoryEnum'
          examples:
            TasksByCustomersAndCategoryRequest:
              $ref: '#/components/examples/TasksByCustomersAndCategoryRequest'
    ActivateTasksRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - taskIds
              - userId
            properties:
              taskIds:
                type: array
                items:
                  type: integer
                description: An array of task ids
              userId:
                type: integer
                description: The id of the user
          examples:
            ActivateTasksRequestExample:
              $ref: '#/components/examples/ActivateTasksRequestExample'
    ActivateTaskRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - userId
            properties:
              userId:
                type: integer
                description: The id of the user which will be set a the person who completed the task
          examples:
            CompleteTasks:
              $ref: '#/components/examples/ActivateTaskRequestExample'
    CompleteTasksRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - taskIds
              - userId
            properties:
              taskIds:
                type: array
                items:
                  type: integer
                description: An array of task ids
              userId:
                type: integer
                description: The id of the user which will be set a the person who completed the task
          examples:
            CompleteTasksRequestExample:
              $ref: '#/components/examples/CompleteTasksRequestExample'
    CompleteTaskRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - userId
            properties:
              userId:
                type: integer
                description: The id of the user which will be set a the person who completed the task
          examples:
            CompleteTaskRequestExample:
              $ref: '#/components/examples/CompleteTaskRequestExample'
    TasksByInstanceRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - instanceClass
              - instanceId
            properties:
              instanceClass:
                type: string
                description: Type of the instance
              instanceId:
                type: string
                description: Identifier of the instance
          examples:
            TasksByInstanceRequestExample:
              $ref: '#/components/examples/TasksByInstanceRequestExample'
    CreateTemplateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Template'
    UpdateTemplateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Template'
    CreateMortgagePartRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MortgagePart'
    UpdateMortgagePartRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MortgagePart'
    CreateMortgageRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Mortgage'
    UpdateMortgageRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Mortgage'
    Search:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Search'
    CreateDocument:
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - name
              - mime_type
              - customer_id
              - extension
              - content
            properties:
              name:
                type: string
                description: Name of the document
              mime_type:
                type: string
                description: MIME-type of the document (e.g. application/pdf)
              extension:
                type: string
                description: The extension of the document (e.g. pdf)
              customer_id:
                type: number
                description: The id of the customer to which this document belongs
              user_id:
                type: number
                description: User who is marked as the creator of the document
              attachable_category_id:
                type: number
                description: >-
                  The id of the attachable category to which this file should be linked.

                  Only one can be provided, this id or the `attachable_category_name`.
              attachable_category_name:
                type: string
                description: >-
                  The name of the attachable category under the customer to which this file should be linked.
                  This will either link it to an existing attachable category with this name or create a new one if it
                  does not exist yet.

                  Only one can be provided, this name or the `attachable_category_id`.
              content:
                type: string
                format: binary
                description: The binary content of the file
          examples:
            CreateDocumentExample:
              value:
                name: 'New document name'
                customer_id: 2
                user_id: 2
                attachable_category_name: 'New category'
                content: 'content'
    UpdateDocument:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - customer_id
            properties:
              name:
                type: string
                description: Name of the document
              customer_id:
                type: number
                description: The id of the customer to which this document belongs
              user_id:
                type: number
                description: User who is marked as the creator of the document
              attachable_category_id:
                type: number
                description: >-
                  The id of the attachable category to which this file should be linked.

                  Only one can be provided, this id or the `attachable_category_name`.
              attachable_category_name:
                type: string
                description: >-
                  The name of the attachable category under the customer to which this file should be linked.
                  This will either link it to an existing attachable category with this name or create a new one if it
                  does not exist yet.

                  Only one can be provided, this name or the `attachable_category_id`.
          examples:
            UpdateDocumentExample:
              value:
                name: 'New document name'
                customer_id: 2
                user_id: 2
                attachable_category_name: 'New category'
    Address:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Address'
    GenerateAssessmentTokenForCustomerRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - customer_id
            properties:
              customer_id:
                type: integer
                description: Id of the customer
              client_id:
                type: integer
                description: Optionally provide a different oauth client id
              type:
                $ref: '#/components/schemas/PortalInvitationTypeEnum'
          examples:
            GenerateDefaultAssessmentTokenForCustomer:
              summary: Create default assessment token
              value:
                customer_id: 2
                client_id: 12345
            GenerateCustomAssessmentTokenForCustomer:
              summary: Create assessment token with specific type
              value:
                customer_id: 2
                client_id: 12345
                type: 'full'
    CreateAttachableRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attachable'
          examples:
            CreateAttachableLinkedToCategoryExample:
              summary: Create attachable linking document to category
              description: Create an attachable linking a document to an attachable category.
              value:
                customer_id: 2
                attachable_category_id: 2
                child_type: 'document'
                child_id: 123
                parent_category: 1
                visible_for_customer: false
            CreateAttachableLinkedToCategoryWithCreatedByUserExample:
              summary: Create attachable linking document to category with user
              description: >-
                Create an attachable linking a document to an attachable category with the user who created the link.
              value:
                customer_id: 2
                attachable_category_id: 2
                child_type: 'document'
                child_id: 123
                parent_category: 1
                visible_for_customer: false
                created_by_type: 'user'
                created_by_id: 2
            CreateAttachableLinkingCategoryToHasAttachableExample:
              summary: Create attachable linking category to entity
              description: Create an attachable linking an attachable category to an has attachable entity.
              value:
                customer_id: 2
                parent_type: 'mortgage'
                parent_id: 3
                child_type: 'attachable_category'
                child_id: 4
                parent_category: 5
                visible_for_customer: false
            CreateAttachableLinkingDocumentToTaskExample:
              summary: Create attachable linking document to task
              description: Create an attachable linking a document to a task.
              value:
                customer_id: 2
                parent_type: 'task'
                parent_id: 3
                child_type: 'document'
                child_id: 123
                parent_category: 1
                visible_for_customer: false
    UpdateAttachableRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attachable'
          examples:
            UpdateAttachableLinkedToCategoryExample:
              summary: Update attachable
              value:
                customer_id: 2
                attachable_category_id: 2
                child_type: 'document'
                child_id: 123
                parent_category: 1
                visible_for_customer: false
    AttachableByInstanceRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AttachableByInstance'
          examples:
            AttachableByInstanceRequestExample:
              summary: Get attachables by instance
              value:
                instance_type: 'mortgage'
                instance_id: 5
    CreateDossierRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dossier'
    UpdateDossierRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dossier'
    CreateEmailAccountRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailAccount'
    UpdateEmailAccountRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailAccount'
    ProductLabelsByProductCategoryRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - product_category
            properties:
              product_category:
                $ref: '#/components/schemas/ProductCategoryEnum'
          examples:
            ProductLabelExample:
              value:
                product_category: 'customer'
    ProductLabelsByEntityRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - entity_type
              - entity_id
            properties:
              entity_type:
                $ref: '#/components/schemas/MorphRelationTypeEnum'
              entity_id:
                type: number
                description: Id of the entity
          examples:
            ProductLabelExample:
              value:
                entity_type: 'customer'
                entity_id: 1
    AttachProductLabelToEntityRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - entity_type
              - entity_id
              - product_label_id
            properties:
              entity_type:
                $ref: '#/components/schemas/MorphRelationTypeEnum'
              entity_id:
                type: number
                description: Id of the entity
              product_label_id:
                type: number
                description: Id of the product label you want to attach
          examples:
            AttachProductLabelToEntityRequestExample:
              summary: Attach product label 1 to the entity customer 2
              value:
                entity_type: 'customer'
                entity_id: 1
                product_label_id: 2
    DetachProductLabelToEntityRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - entity_type
              - entity_id
              - product_label_id
            properties:
              entity_type:
                $ref: '#/components/schemas/MorphRelationTypeEnum'
              entity_id:
                type: number
                description: Id of the entity
              product_label_id:
                type: number
                description: Id of the product label you want to detach
          examples:
            AttachProductLabelToEntityRequestExample:
              summary: Detach product label 1 to the entity customer 2
              value:
                entity_type: 'customer'
                entity_id: 1
                product_label_id: 2
    CreateProductLabelRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductLabel'
          examples:
            ProductLabelExample:
              value:
                tag: 'label'
                name: 'Longer description'
                product_category: 'customer'
                color: '9c27b0'
    UpdateProductLabelRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductLabel'
          examples:
            ProductLabelExample:
              value:
                tag: 'label'
                name: 'Longer description'
                product_category: 'customer'
                color: '9c27b0'
    CreateLetterRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Letter'
    UpdateLetterRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Letter'
    CreateLockRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Lock'
    UpdateLockRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Lock'
    CreateMortgageProgressRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MortgageProgress'
    UpdateMortgageProgressRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MortgageProgress'
    CreateDamageRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Damage'
    UpdateDamageRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Damage'
    CreateEmailRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Email'
    UpdateEmailRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Email'
    CreateNoteRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Note'
    UpdateNoteRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Note'
    CreateAccountRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    UpdateAccountRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    CreateOfficeRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Office'
    UpdateOfficeRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Office'
    OfficeByCustomerRelationNumberRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - number
              - relation_number_type_id
            properties:
              number:
                type: string
                description: The relation number
              relation_number_type_id:
                type: integer
                description: The id of the relation number type
          examples:
            GetOfficeByCustomerRelationNumberExample:
              value:
                number: '321654'
                relation_number_type_id: 1
    CreateUserRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    UpdateUserRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    CreateUserDepartmentRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserDepartment'
    UpdateUserDepartmentRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserDepartment'
    GetUsersByIdsRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - user_ids
            properties:
              user_ids:
                type: array
                description: An array of user ids
                items:
                  type: integer
          examples:
            GetUsersByIdsExample:
              value:
                user_ids: [ 1, 2, 3 ]
    SearchUsersByNameRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - query
            properties:
              query:
                type: string
                description: Search query, minimum length is 2
          examples:
            SearchUsersByNameExample:
              value:
                query: 'Piet'
    CreateCustomerRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    UpdateCustomerRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    CreateCustomerLeadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerLead'
    XMLAXMessageRequest:
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/OfferteAanvraag'
    CreateCalendarRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Calendar'
    UpdateCalendarRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Calendar'
    CreateCalendarEventRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CalendarEvent'
    UpdateCalendarEventRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CalendarEvent'
    PortalInvitation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PortalInvitation'
    CreatePortalInvitation:
      description: >
        Create a new portal invitation.

        If no `email_account_id` is provided with which to send the invitation and `send_email` is set to true the
        system will default to `no-reply@dossierdata.nl` as the sender. Default `type` is `full`.
      content:
        application/json:
          schema:
            type: object
            required:
              - customer_id
              - send_email
            properties:
              customer_id:
                type: number
                description: The id of the customer of the invite
              send_email:
                type: boolean
                description: A boolean to indicate if DossierData should send an email for the invite
              type:
                $ref: '#/components/schemas/PortalInvitationTypeEnum'
              valid_until:
                type: string
                description: Date time string until when the invite is valid. Set to null if the invite must never expire.
              token:
                type: string
                description: A long token that is used to identify the customer when logging in/registering for the first time.
          examples:
            Create with defaults:
              value:
                customer_id: '1'
                send_email: true
            Create specific type:
              value:
                customer_id: '1'
                send_email: true
                type: 'source_data'
            Create with custom from address:
              value:
                customer_id: '1'
                email_account_id: '2'
                send_email: true
                type: 'source_data'
            Create with custom recipient address:
              value:
                customer_id: '1'
                send_email: true
                type: 'source_data'
                email: 'customer_recipient@email.address'
            Create with all fields:
              value:
                customer_id: '1'
                email_account_id: '2'
                send_email: true
                type: 'source_data'
                token: 'ipXYdC7AawabAqrA8ngGLh5M45sYdReSY544hN1iHFCvXMTNsl9bCko792De9wuu'
                active: true
                email: 'customer_recipient@email.address'
                valid_until: '2021-03-15T00:00:00+00:00'
                created_at: '2021-02-15T00:00:00+00:00'
                updated_at: '2021-02-15T00:00:00+00:00'
    GetCustomerByRelationNumber:
      content:
        application/json:
          schema:
            type: object
            required:
              - number
              - relation_number_type_id
            properties:
              number:
                type: string
                description: The identifier of the relation number
              relation_number_type_id:
                type: number
                description: The id of the relation number type
          examples:
            FindByRelationNumber:
              $ref: '#/components/examples/CustomerByRelationNumberExample'
    UserByRelationNumber:
      content:
        application/json:
          schema:
            type: object
            required:
              - number
              - relation_number_type_id
            properties:
              number:
                type: string
                description: The identifier of the relation number
              relation_number_type_id:
                type: number
                description: The id of the relation number type
          examples:
            FindByRelationNumber:
              $ref: '#/components/examples/UserByRelationNumberExample'
    RelationNumber:
      content:
        application/json:
          schema:
            type: object
            required:
              - number
              - relation_number_type_id
              - numberable_type
              - numberable_id
            properties:
              number:
                type: string
                description: The identifier of the relation number
              relation_number_type_id:
                type: number
                description: The id of the relation number type
              numberable_type:
                $ref: '#/components/schemas/MorphRelationTypeEnum'
              numberable_id:
                type: number
                description: The id of object to which the relation number is attached
              created_at:
                type: string
                description: The datetime when the relation number was created
              updated_at:
                type: string
                description: The datetime when the relation number was last updated
          examples:
            RelationNumberExample:
              $ref: '#/components/examples/RelationNumberStoreExample'
    RelationNumberType:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: The name of the relation number type
    PropertyByAddressRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - postal_code
              - number
            properties:
              postal_code:
                type: string
                description: The postal code, for example '9712VL'.
              number:
                type: string
                description: >-
                  The house number, for example '46'. Can have a maximum length of 20 characters.
              number_letter:
                type: string
                description: >-
                  The house letter, for example 'a'. Only letters are allowed here. Can have a maximum length of 20 characters.
              number_addition:
                type: string
                description: The number addition, for example '0001'. Can have a maximum length of 20 characters.
          examples:
            PropertyByAddressRequestExample:
              $ref: '#/components/examples/PropertyByAddressRequestExample'
    CreatePropertyRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - postal_code
              - number
            properties:
              postal_code:
                type: string
                description: The postal code, for example '9712VL'.
              number:
                type: string
                description: >-
                  The house number, for example '46'. Can have a maximum length of 20 characters.
              number_letter:
                type: string
                description: >-
                  The house letter, for example 'a'. Only letters are allowed here. Can have a maximum length of 20 characters.
              number_addition:
                type: string
                description: The number addition, for example '0001'. Can have a maximum length of 20 characters.
          examples:
            CreatePropertyExample:
              $ref: '#/components/examples/CreatePropertyExample'
    UpdatePropertyRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - postal_code
              - number
            properties:
              postal_code:
                type: string
                description: The postal code, for example '9712VL'.
              number:
                type: string
                description: >-
                  The house number, for example '46'. Can have a maximum length of 20 characters.
              number_letter:
                type: string
                description: >-
                  The house letter, for example 'a'. Only letters are allowed here. Can have a maximum length of 20 characters.
              number_addition:
                type: string
                description: The number addition, for example '0001'. Can have a maximum length of 20 characters.
          examples:
            CreatePropertyExample:
              $ref: '#/components/examples/UpdatePropertyExample'
    CreateCustomerPropertyRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - customer_id
              - property_id
              - address_type
            properties:
              customer_id:
                type: number
                description: The customer id
              property_id:
                type: number
                description: The property id
              registration_date:
                type: string
                description: The registration date of the address
              municipality_registration_date:
                type: string
                description: The registration date as known by the municipality
              transaction_date:
                type: string
                description: The transacion date of the property
              owns_property:
                type: boolean
                description: Boolean indicating if the property is owned by the customer
              is_current:
                type: boolean
                description: Boolean indicating if the property is the current address of the customer
              percentage_owner:
                type: number
                description: The percetage that the customer owns the property (1 to 100)
              address_type:
                $ref: '#/components/schemas/AddressTypeEnum'
              property_purpose:
                $ref: '#/components/schemas/PropertyPurposeEnum'
              living_together:
                type: boolean
                description: Boolean indicating if the customer is living here with another customer from dossierdata
              contract_owner:
                $ref: '#/components/schemas/ContractOwnerEnum'
              for_sale_since:
                type: string
                description: If the customer has this property for sale this contains the date since when it has been for sale
              sold_since:
                type: string
                description: If the customer sold this property this contains when it was sold
          examples:
            CreateBasicCustomerPropertyExample:
              $ref: '#/components/examples/CreateBasicCustomerPropertyExample'
            CreateCustomerPropertyExample:
              $ref: '#/components/examples/CreateCustomerPropertyExample'
    UpdateCustomerPropertyRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - customer_id
              - property_id
              - address_type
            properties:
              customer_id:
                type: number
                description: The customer id
              property_id:
                type: number
                description: The property id
              registration_date:
                type: string
                description: The registration date of the address
              municipality_registration_date:
                type: string
                description: The registration date as known by the municipality
              transaction_date:
                type: string
                description: The transacion date of the property
              owns_property:
                type: boolean
                description: Boolean indicating if the property is owned by the customer
              is_current:
                type: boolean
                description: Boolean indicating if the property is the current address of the customer
              percentage_owner:
                type: number
                description: The percetage that the customer owns the property (1 to 100)
              address_type:
                $ref: '#/components/schemas/AddressTypeEnum'
              property_purpose:
                $ref: '#/components/schemas/PropertyPurposeEnum'
              living_together:
                type: boolean
                description: Boolean indicating if the customer is living here with another customer from dossierdata
              contract_owner:
                $ref: '#/components/schemas/ContractOwnerEnum'
              for_sale_since:
                type: string
                description: If the customer has this property for sale this contains the date since when it has been for sale
              sold_since:
                type: string
                description: If the customer sold this property this contains when it was sold
          examples:
            UpdateCustomerPropertyExample:
              $ref: '#/components/examples/UpdateCustomerPropertyExample'
    GetHDNCompanyByHDNCodeRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - hdn_code
            properties:
              hdn_code:
                type: string
                description: The HDN code to search by
          examples:
            GetHDNCompanyByHDNCodeRequestExample:
              $ref: '#/components/examples/GetHDNCompanyByHDNCodeRequestExample'
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        clientCredentials:
          authorizationUrl: /api/v1/oauth/authorize
          tokenUrl: /api/v1/oauth/access_token
          scopes:
            'account:basic': Rekeningen inzien basisinformatie
            'account:create': Rekening aanmaken
            'account:delete': Rekening verwijderen
            'account:full': Rekeningen inzien volledig
            'account:update': Rekening updaten
            'activities:basic': Activiteiten inzien
            'address:basic': Basis adresgegevens
            'address:coordinates': Adres coordinaten
            'address:create': Nieuwe adressen aanmaken
            'address:delete': Adres delete
            'address:update': Adres updaten
            'assessment_token:generate': Generate assessment jwt auth token
            'attachable:basic': Attachable inzien
            'attachable:create': Attachable aanmaken
            'attachable:delete': Attachable verwijderen
            'attachable:update': Attachable updaten
            'calendar:basic': Agenda inzien
            'calendar:create': Agenda aanmaken
            'calendar:delete': Agenda verwijderen
            'calendar:update': Agenda updaten
            'calendar_event:create': Agenda item aanmaken
            'calendar_event:delete': Agenda item verwijderen
            'calendar_event:full': Agenda item inzien
            'calendar_event:update': Agenda item updaten
            'country:index': Index countries
            'country:show': Show a country
            'customer:basic': Basisgegevens van een klant
            'customer:contact': Contactgegevens van een klant
            'customer:create': Nieuwe klanten aanmaken
            'customer:create_insurance_lead': Nieuwe polis leads aanmaken
            'customer:create_lead': Nieuwe leads aanmaken
            'customer:create_mortgage_lead': Nieuwe hypotheek leads aanmaken
            'customer:delete': Klant verwijderen
            'customer:full': Alle gegevens van een klant
            'customer:update': Klant updaten
            'customer_property:basic': Klant adressen inzien
            'customer_property:create': Klant adressen aanmaken
            'customer_property:delete': Klant adressen verwijderen
            'customer_property:update': Klant adressen wijzigen
            'damage:agency': Schade maatschappij
            'damage:basic': Basisgegevens van een schade
            'damage:full': Alle gegevens van een schade
            'damage_person:address': Schade betrokken persoon adres
            'damage_person:agency': Schade betrokken persoon maatschappij
            'damage_person:basic': Schade betrokken persoon
            'document:full': Documenten
            'dossier:full': Dossiers
            'email:full': Emails
            'email_account:basic': Basisgegevens van e-mailaccounts
            'email_account:full': Alle gegevens van e-mailaccounts
            'hdn_ax': AX berichten overzicht
            'hdn_ax:create': Opslaan van nieuwe AX berichten
            'hdn_ax:show': AX bericht statussen
            'hdn_company:basic': HDN companies inzien
            'hdn_company_label:basic': HDN company labels inzien
            'hdn_company_product:basic': HDN company products inzien
            'letter:full': Brieven
            'lock:full': Locks
            'mortgage:basic': Basisgegevens hypotheek
            'mortgage:full': Alle gegevens hypotheek
            'mortgage_part:full': Hypotheek leningdelen
            'mortgage_progress:full': Hypotheek voortgang
            'note:full': Notities
            'office:full': Kantoren
            'portal_invitation:create': Create a portal invitation
            'portal_invitation:delete': Delete a portal invitation
            'portal_invitation:index': List all portal invitations
            'portal_invitation:show': Show a portal invitation
            'portal_invitation:update': Update a portal invitation
            'property:basic': Show a property
            'property:coordinates': Show a property's coordinates
            'property:create': Create a property
            'property:delete': Delete a property
            'property:jumba': Show a property's jumba data
            'property:update': Update a property
            'relation_number:create': Create a relation number
            'relation_number:delete': Delete a relation number
            'relation_number:index': List all relation numbers
            'relation_number:show': Show a relation number
            'relation_number:update': Update a relation number
            'relation_number_type:create': Create a relation number type
            'relation_number_type:delete': Delete a relation number type
            'relation_number_type:index': List all relation number types
            'relation_number_type:show': Show a relation number type
            'relation_number_type:update': Update a relation number type
            'search:full': Zoekopdrachten
            'signal:full': Signalen
            'template:full': Templates
            'user:basic': View a user's basic information
            'user:create': Create a user
            'user:delete': Delete a user
            'user:detailed': View a user's detailed information
            'user:update': Update a user
            'user_department:basic': List all user departments
            'user_department:create': Create a user department
            'user_department:delete': Delete a user department
            'user_department:update': Update a user department
            'user_department:users': Show user department including users
  schemas:
    MortgageProgress:
      type: object
      required:
        - mortgage_id
      properties:
        id:
          type: number
          description: ID of entity
        mortgage_id:
          type: number
          description: ID of related mortgage
        name:
          type: string
          description: Name of mortgage progress
        sent:
          type: boolean
          description: Has the mortgage progress been sent?
        received:
          type: boolean
          description: Has the mortgage progress been received?
        completed:
          type: boolean
          description: Has the mortgage progress been completed?
        comment:
          type: string
          description: Comment that belongs to the mortgage progress
        date:
          type: string
          description: Date that corresponds to the mortgage progress
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
    Created:
      type: object
      properties:
        success:
          type: boolean
          description: Success true or false
        id:
          type: string
          description: Id of stored data (can be empty on array inserts)
    Success:
      type: object
      properties:
        success:
          type: boolean
          description: Success true or false
    Deleted:
      type: object
      properties:
        success:
          type: boolean
          description: Success true or false
        id:
          type: string
          description: Id of deleted data (can be empty on array inserts)
    Updated:
      type: object
      properties:
        success:
          type: boolean
          description: Success true or false
        id:
          type: string
          description: Id of updated data (can be empty on array inserts)
    MetaDepartmentTasksCount:
      type: object
      properties:
        department_hashid:
          type: string
          description: The hashid of the department
        activeCount:
          type: integer
          description: The number of active (callback) tasks assigned to the department
        completedCount:
          type: integer
          description: The number of completed (callback) tasks assigned to the department
    MetaUserTasksCount:
      type: object
      properties:
        user_hashid:
          type: string
          description: The hashid of the department
        activeCount:
          type: integer
          description: The number of active (callback) tasks assigned to the department
        completedCount:
          type: integer
          description: The number of completed (callback) tasks assigned to the department
    UpdatedTasksWithMetaCounts:
      type: object
      properties:
        data:
          type: object
          properties:
            success:
              type: boolean
              description: Success true or false
            ids:
              type: array
              description: Ids of updated tasks
              items:
                type: integer
        meta:
          type: object
          properties:
            departmentTasksCounts:
              type: array
              items:
                $ref: "#/components/schemas/MetaDepartmentTasksCount"
            departmentCallbacksCounts:
              type: array
              items:
                $ref: "#/components/schemas/MetaDepartmentTasksCount"
            userTasksCounts:
              type: array
              items:
                $ref: "#/components/schemas/MetaUserTasksCount"
            userCallbacksCounts:
              type: array
              items:
                $ref: "#/components/schemas/MetaUserTasksCount"
    UpdatedTaskWithMetaCounts:
      type: object
      properties:
        data:
          type: object
          properties:
            success:
              type: boolean
              description: Success true or false
            id:
              type: integer
              description: Id of updated task
        meta:
          type: object
          properties:
            departmentTasksCounts:
              type: array
              items:
                $ref: "#/components/schemas/MetaDepartmentTasksCount"
            departmentCallbacksCounts:
              type: array
              items:
                $ref: "#/components/schemas/MetaDepartmentTasksCount"
            userTasksCounts:
              type: array
              items:
                $ref: "#/components/schemas/MetaUserTasksCount"
            userCallbacksCounts:
              type: array
              items:
                $ref: "#/components/schemas/MetaUserTasksCount"
    Meta:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
    Pagination:
      type: object
      properties:
        total:
          type: number
          description: Total number of objects
        count:
          type: number
          description: Object on this page
        per_page:
          type: number
          description: Object per page
        current:
          type: number
          description: Current page number
        total_pages:
          type: number
          description: Total number of pages
        links:
          type: object
          description: Array of meta links
          properties:
            self:
              type: string
              description: Link to the current page
            first:
              type: string
              description: Link to the first page
            prev:
              type: string
              description: Link to the previous page
            next:
              type: string
              description: Link to the next page
            last:
              type: string
              description: Link to the last page
    Country:
      type: object
      required:
        - code
        - name
      properties:
        id:
          type: number
          description: The id of the country
        code:
          type: string
          description: Country code based on ISO 3166-2
        name:
          type: string
          description: Name of the country
    Customer:
      type: object
      required:
        - first_name
        - last_name
        - date_of_birth
      properties:
        id:
          type: number
          description: The id of the customer.
        full_name:
          type: string
          description: Formatted full name of the customer, e.g. "Initials (First names) suffix Last name"
        initials:
          type: string
          description: Initials of the customer.
        first_name:
          type: string
          description: FirstName of the customer.
        suffix:
          type: string
          description: Suffix of the customer.
        last_name:
          type: string
          description: LastName of the customer.
        passed_away_at:
          type: string
          description: The date the customer passed away according to ISO8601.
        sex:
          $ref: "#/components/schemas/GenderEnum"
        date_of_birth:
          type: string
          description: Date of birth of the customer according to ISO8601.
        email_address:
          type: string
          description: Email address of the customer.
        phone:
          type: string
          description: The customer's primary phone number.
        mobile:
          type: string
          description: The customer's primary mobile number.
        phone_work:
          type: string
          description: The customer's business or work phone number.
        title:
          type: number
          description: The title of the customer.
        salutation:
          $ref: "#/components/schemas/SalutationEnum"
        smoking:
          type: boolean
          description: Indicates whether the customer smokes.
        parent_id:
          type: number
          description: The id of the customer of which this customer is the child. Note, if this is filled this customer
            will become a part of the dossier of the customer which is referenced here.
        partner_id:
          type: number
          description: The id of the customer of which this customer is the partner. Note, if this is filled this customer
            will become a part of the dossier of the customer which is referenced here.
        advisor_id:
          type: number
          description: Id of the user which is the advisor of the customer. Note, a user with the role "franchise" will
            only be able to see customers for which he has been marked as the advisor.
        account_manager_id:
          type: number
          description: The id of the user which is the account manager of the customer.
        office_id:
          type: number
          description: The id of the office to which this customer belongs.
        customer_lead_status_id:
          type: number
          description: The id of the lead status of the customer. Note, this only applies to customers which are created as
            a lead.
        nationality_country_id:
          type: number
          description: The id of the country which is the customer's nationality.
        country_of_birth_id:
          type: number
          description: The id of the country in which the customer was born.
        type:
          $ref: "#/components/schemas/CustomerTypeEnum"
        house_owned:
          type: boolean
          description: Indicates whether the customer owns a house.
        property_value:
          type: number
          description: The property value of the house the customer owns.
        tax_return_is_provided:
          type: boolean
          description: Indicates whether the customer's tax return has been provided to the advisor.
        employer:
          type: string
          description: Name of the employer of the customer.
        position:
          type: string
          description: Name of the position at company where the customer is employed.
        notes:
          type: string
          description: Internal generic notes about the customer. Note, these are the notes which are also displayed on the
            customer's dashboard.
        mailing_enabled:
          type: boolean
          description: Indicates whether the customer wants to be contacted via email.
        account_number:
          type: string
          description: The customer's account number at their bank.
        iban:
          type: string
          description: The iban account number of the customer
        payroll:
          type: number
          description: The payroll of the customer.
        studies:
          type: boolean
          description: Indicates whether the customer currently follows a study.
        non_resident:
          type: boolean
          description: Indicates whether the customer lives at home or not. Note, this only applies if the customer has
            been marked as a child of another customer.
        education_level:
          $ref: "#/components/schemas/EducationLevelEnum"
        disability_discount_years:
          type: number
          description: The number of disability discount years that the customer has.
        married_before:
          type: boolean
          description: Indicates whether the customer was married before.
        place_of_birth:
          type: string
          description: The customer's place of birth.
        birth_name:
          type: string
          description: The last name given to the customer at birth.
        birth_name_suffix:
          type: string
          description: The last name suffix given to the customer at birth, e.g. "van der".
        gross_annual_employment_pension_amount:
          type: number
          description: The total gross annual amount of employment pension that the customer will receive from their
            pension date.
        gross_annual_annuity_pension_amount:
          type: number
          description: The total gross annual amount of annuity pension that the customer will receive from their
            pension date.
        gross_annual_partner_pension_amount:
          type: number
          description: The total gross annual amount of partner pension that the customer will receive from their
            pension date.
        salary:
          type: number
          description: The gross annual salary of the customer.
        salary_date:
          type: string
          description: The date at which the customer's salary was last verified according to ISO8601.
        retirement_income:
          type: number
          description: The gross annual retirement income of the customer.
        retirement_income_date:
          type: string
          description: The date at which the customer's retirement income was last verified according to ISO8601.
        marital_status:
          $ref: "#/components/schemas/MaritalStatusEnum"
        marital_date:
          type: string
          description: The date at which the customer's marital status last changed according to ISO8601.
        marriage_dissolved_type:
          $ref: "#/components/schemas/MarriageDissolvedTypeEnum"
        marriage_dissolved_at:
          type: string
          description: The date at which the customer's marriage was dissolved according to ISO8601.
        customer_since:
          type: string
          description: The date since when this has been a customer according to ISO8601.
        retirement_date:
          type: string
          description: The retirement date of the customer according to ISO8601. Note, if this is not filled but the date
            of birth is we will try to automatically calculate this based on the latest regulations.
        status_changed_at:
          type: string
          description: The date at which the type of the customer was last changed according to ISO8601, e.g. from active
            to inactive.
        last_opened_date:
          type: string
          description: The date at which the customer was last openened in the web app according to ISO8601.
        business_name:
          type: string
          description: The name of the business of the customer
        business_type:
          type: number
          description: The type of the business of the customer
        kvk_number:
          type: string
          description: The kvk number of the customer
        number_of_employees:
          type: number
          description: The number of employees of the customer
        revenue:
          type: number
          description: The revenue of the customer
    CustomerLead:
      type: object
      required:
        - firstName
        - lastName
        - emailaddress
      properties:
        firstName:
          type: string
          description: FirstName of the customer, required if initials are not provided
        initials:
          type: string
          description: Initials of the customer, required if first name is not provided
        suffix:
          type: string
          description: Suffix of the customer
        lastName:
          type: string
          description: LastName of the customer
        emailaddress:
          type: string
          description: Email address of the customer
        dateOfBirth:
          type: string
          description: Date of birth of the customer, format d/m/Y
        status:
          type: string
          description: The status that you want to give this new lead. If the status does
            not exist yet it will be created and attached to this customer. You
            can filter your customers by this status on the customer lead
            dashboard.
    CustomerMortgageLead:
      type: object
      required:
        - firstName
        - lastName
        - emailaddress
      properties:
        firstName:
          type: string
          description: FirstName of the customer, required if initials are not provided
        initials:
          type: string
          description: Initials of the customer, required if first name is not provided
        suffix:
          type: string
          description: Suffix of the customer
        lastName:
          type: string
          description: LastName of the customer
        emailaddress:
          type: string
          description: Email address of the customer
        dateOfBirth:
          type: string
          description: Date of birth of the customer, format d/m/Y
        visitDate:
          type: string
          description: Last visit date of the customer, format d/m/Y
        dateOfTransfer:
          type: string
          description: The date of transfer for the mortgage (Datum overdracht), format
            d/m/Y
        dateFundReserves:
          type: string
          description: The expiration date for the fund reserves (Datum
            financieringsvoorbehoud), format d/m/Y
        dateBankGuarantee:
          type: string
          description: The expiration date for the bank guarantee (Datum bankgarantie),
            format d/m/Y
        status:
          type: string
          description: The status that you want to give this new lead. If the status does
            not exist yet it will be created and attached to this customer. You
            can filter your customers by this status on the customer lead
            dashboard.
    Damage:
      type: object
      required:
        - customer_id
      properties:
        customer_id:
          type: number
          description: ID of customer
        damage_number:
          type: string
          description: Number of damage
        licenseplate:
          type: string
          description: License plate of car of the insuree involved in damage
        policy_id:
          type: number
          description: ID of policy
        insurance_branche_code:
          type: number
          description: Branche code of insurance company
        policy_contractNumber:
          type: string
          description: Contract number of policy
        insurance_agency_id:
          type: number
          description: ID of insurance agency
        settled:
          type: boolean
          description: Is the damage settled?
        date:
          type: string
          description: Date when damage occured
        blame:
          type: boolean
          description: Is the insuree to blame?
        cause:
          type: string
          description: Cause of the damage
        notes:
          type: string
          description: Notes belonging to damage
        agency_id:
          type: number
          description: ID of agency
        agency_contact_id:
          type: number
          description: ID of contact of agency
        agency_contact:
          type: string
          description: Name of agency contact
        agency_phone:
          type: string
          description: Phone number of agency
        agency_emailaddress:
          type: string
          description: Email address of agency
        external_number:
          type: string
          description: External number of damage
        wa:
          type: number
          description: Liability insurance
        casco:
          type: number
          description: Insurance of object involved in damage (casco)
        deductible:
          type: number
          description: Amount that is deductible
        garage_id:
          type: number
          description: ID of garage involved
        garage_contact_id:
          type: number
          description: ID of contact of garage involved
        user_id:
          type: number
          description: ID of user
        trackingNumber:
          type: string
          description: Tracking number
        expert_id:
          type: number
          description: ID of expert involved
        expert_case_number:
          type: string
          description: Case number of expert
        pay_to:
          type: number
          description: Pay to
        status:
          type: number
          description: Status
        wa_at:
          type: string
          description: Liable at
        casco_at:
          type: string
          description: Casco at
        deductible_at:
          type: string
          description: Deductible at
        estimated:
          type: number
          description: Estimation
    Address:
      type: object
      properties:
        id:
          type: number
          description: Id of the address
        customer_id:
          type: number
          description: ID of the related customer
        active:
          type: boolean
          description: Is the address active?
        from:
          type: string
          description: A date from which the address will be active according to ISO8601
        type:
          type: string
          description: Type of address
        postcode:
          type: string
          description: Postal code of the address
        house_number:
          type: string
          description: House number of the address
        house_number_addition:
          type: string
          description: House number addition of the address
        street_name:
          type: string
          description: Street name of the address
        city:
          type: string
          description: City of the address
        country:
          type: string
          description: Country of the address
        lat:
          type: number
          description: Latitude of the address
        lng:
          type: number
          description: Longitude of the address
    Attachable:
      type: object
      properties:
        id:
          type: number
          description: Id of the attachable
        customer_id:
          type: number
          description: ID of the related customer
        parent_type:
          $ref: '#/components/schemas/HasAttachablesMorphRelationTypeEnum'
        parent_id:
          type: number
          description: The id of parent object to which the attachable is attached
        child_type:
          $ref: '#/components/schemas/IsAttachableMorphRelationTypeEnum'
        child_id:
          type: number
          description: The id of child object to which the attachable is attached
        parent_category:
          $ref: '#/components/schemas/CategoryEnum'
        visible_for_customer:
          type: boolean
          description: A boolean if the attachable model should be visible for the customer in app/portal environments
        created_by_type:
          $ref: '#/components/schemas/MorphRelationTypeEnum'
        created_by_id:
          type: number
          description: The id of object by whom/which this was created
    AttachableBreadcrumbs:
      type: object
      properties:
        id:
          type: number
          description: Id of the instance
        success:
          type: boolean
          description: Defines if a path to the child instance could be found
        category:
          type: object
          properties:
            name:
              type: string
              description: The name of the global category to which the child instance is attached (e.g. `Klant` or `Hypotheken`)
        customer:
          type: object
          properties:
            full_name:
              type: string
              description: The name of the customer who's the owner of the attachable
            link:
              type: string
              description: The link to the dashboard the that customer
        attachable_category:
          type: object
          properties:
            name:
              type: string
              description: The name of the attachable category to which the child instance is attached
        parent_instance:
          type: object
    AttachProductLabelToEntity:
      type: object
      properties:
        entity_type:
          $ref: '#/components/schemas/MorphRelationTypeEnum'
        entity_id:
          type: number
          description: The id of entity
    AttachableByInstance:
      type: object
      properties:
        instance_type:
          $ref: '#/components/schemas/MorphRelationTypeEnum'
        instance_id:
          type: number
          description: The id of instance
    Document:
      type: object
      properties:
        name:
          type: string
          description: Name of the document
        type:
          type: string
          description: A name or description of the mimetype
        mime_type:
          type: string
          description: MIME-type of the document (e.g. application/pdf)
        customer_id:
          type: number
          description: The id of the customer to which this document belongs
        extension:
          type: string
          description: The extension of the document (e.g. pdf)
        filesize:
          type: number
          description: The documents filesize (in bytes)
        user_id:
          type: number
          description: User who uploaded the document
        created_at:
          type: string
          description: Date time of creation
        updated_at:
          type: string
          description: Date time of latest update
    AXMessage:
      type: object
      properties:
        id:
          type: number
          description: The status of the AX Message; queued, pending, processed, failed
        version:
          type: string
          description: The version of the AX Message
        status:
          type: number
          description: "The status of the AX Message; {1: QUEUED, 2: PENDING, 3: PROCESSED,
            4: FAILED}"
        user_id:
          type: number
          description: OPTIONAL The id of the reviewing user
        customer_id:
          type: number
          description: OPTIONAL The id of the linked customer
        updated_at:
          type: string
          description: An ISO 8601 formatted string
    Dossier:
      type: object
      required:
        - uuid
      properties:
        uuid:
          type: number
          description: UUID of dossier
        customer_id:
          type: string
          description: Customer ID of dossier
        status:
          type: string
          description: Status of dossier
    EmailAccount:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
          description: Name of Emailaccount holder
        address:
          type: string
          description: Emailaddress of Emailaccount holder
        host:
          type: string
          description: Hostname of Emailaccount
        port:
          type: number
          description: Port of Emailaccount
        username:
          type: string
          description: Username of Emailaccount
        validate_cert:
          type: boolean
          description: Emailaccount has validation certificate?
        encryption:
          $ref: "#/components/schemas/EncryptionTypes"
        signature:
          type: string
          description: Signature of Emailaccount
        sync_enabled:
          type: boolean
          description: Is sync enabled?
        synced_at:
          type: string
          description: Date of sync, format d/m/Y
        locked:
          type: boolean
          description: Describes if the email account is locked for importing emails.
        auto_match:
          type: boolean
          description: Describes if imported emails should automatically be matched to customers.
        auto_process:
          type: boolean
          description: Describes if imported emails that were matched to customers should automatically be marked as processed.
        process_matched:
          type: boolean
          description: Describes if emails which have been matched should be automatically marked as processed.
        process_unmatched:
          type: boolean
          description: Describes if emails which have not been matched should be automatically marked as processed.
    EncryptionTypes:
      type: number
      enum:
        - null
        - 0
        - 1
        - 2
    Letter:
      type: object
      required:
        - name
        - address
        - content
        - customer_id
        - user_id
        - category_id
        - template_id
      properties:
        name:
          type: string
          description: Name of the letter
        address:
          type: string
          description: Address of the letter
        content:
          type: string
          description: Content of the letter
        customer_id:
          type: number
          description: ID of the customer
        user_id:
          type: number
          description: ID of the user
        for_instance_class:
          type: string
          description: For instance class of the letter
        for_instance_id:
          type: number
          description: For instance id of the letter
        category_id:
          type: number
          description: ID of the category of the letter
        template_id:
          type: number
          description: ID of the template of the letter
    ProductLabel:
      type: object
      required:
        - id
        - tag
        - name
        - product_category
      properties:
        id:
          type: number
          description: Id of the product label
        tag:
          type: string
          description: A short tag by which this product label is displayed in the application
        name:
          type: string
          description: A longer description which is displayed on hover in the application
        product_category:
          $ref: '#/components/schemas/ProductCategoryEnum'
    Lock:
      type: object
      required:
        - lockable_type
        - lockable_id
        - user_id
      properties:
        lockable_type:
          type: string
          description: Type of the lockable
        lockable_id:
          type: number
          description: ID of the lockable
        user_id:
          type: number
          description: ID of the user
      description: >
        A lock can to used to lock any resource, e.g. a customer. By default the application locks any resource that's
        being edited so there won't be any conflicts in storing data.


        For example: user `a` starts editing a customer and then the system locks that customer. When user `b` wants to
        edit that same customer, they will get a popup telling them that the customer is already being edited by user
        `a`. If user `b` has enough permissions they can choose to overwrite the lock. This causes user `a` to be removed
        from the edit page.
    Email:
      type: object
      required:
        - subject
      properties:
        subject:
          type: string
          description: The subject of the email
        from:
          type: string
          description: The email address from which the email is sent.
        to:
          type: string
          description: The email address to which the email is sent.
        cc:
          type: string
          description: The additional email address to which the email is sent.
        bcc:
          type: string
          description: The additional email address to which the email is sent, which is not seen by the "to" recipient.
        user_id:
          type: number
          description: The id of the user which made the email.
        template_id:
          type: number
          description: The id of the template that is used in the email.
        customer_id:
          type: number
          description: The id of the customer about which the email is concerned.
        parent_id:
          type: number
          description: The id of the parent email in the cases of replies and forwards.
        sent:
          type: boolean
          description: Describes if this email was sent or received.
        received:
          type: boolean
          description: Describes if this email was sent or received.
        name:
          type: string
          description: The name of the email how it is displayed in DossierData.
        date:
          type: string
          description: The date on which the email was received or sent.
        message_id:
          type: string
          description: The id of the message.
        in_reply_to:
          type: string
          description: the message id of the email to which this replies
        category_id:
          type: number
          description: The id of the category in which this email should be saved.
        size:
          type: number
          description: The size in kb of the message.
        recent:
          type: boolean
          description: Describes if it is recent.
        flagged:
          type: boolean
          description: Describes if it is flagged.
        answered:
          type: boolean
          description: Describes if it is answered.
        deleted:
          type: boolean
          description: Describes if the email has been deleted.
        seen:
          type: boolean
          description: Describes if the email has been seen by a user.
        draft:
          type: boolean
          description: Describes if the email is a draft.
        has_attachment:
          type: boolean
          description: Describes if the email has attachments.
        filesize:
          type: number
          description: The size of the attachments.
        unmatched:
          type: boolean
          description: Describes if the email is unmatched.
        processed:
          type: boolean
          description: Describes if the email is processed.
        processed_by_id:
          type: number
          description: The id of the user which processed the email.
        email_account_id:
          type: number
          description: The id of the email account to which this email is attached.
        email_account_folder_id:
          type: number
          description: The id of the emaill account folder.
    Task:
      type: object
      required:
        - category_id
        - status
        - user_id
        - content
        - date
      properties:
        id:
          type: number
          description: ID of task, dont provide this when creating a new task
        category_id:
          $ref: '#/components/schemas/CategoryEnum'
        status:
          $ref: '#/components/schemas/TaskStatusEnum'
        type:
          $ref: '#/components/schemas/TaskTypeEnum'
        priority:
          $ref: '#/components/schemas/TaskPriorityEnum'
        user_id:
          type: number
          description: The id of the user who will be assigned as the creator of the task. If empty the user of the request session will be filled.
        finished_by:
          type: number
          description: The id of the user who will be assigned as person who completed the task.
        customer_id:
          type: number
          description: The id of the customer to which this task is assigned.
        content:
          type: string
          description: The title of the task
        description:
          type: string
          description: A more detailed or additional description of the task
        date:
          type: string
          description: The date when the task is planned
        time:
          type: string
          description: The specific time when the task is planned
        finished_at:
          type: string
          description: ISO 8601 date when the task was finished
        created_at:
          type: string
          description: ISO 8601 date when the task was created
        updated_at:
          type: string
          description: ISO 8601 date when the task was last updated
    Template:
      type: object
      properties:
        id:
          type: number
          description: ID of template
        title:
          type: string
          description: Title of template
        nameInSystem:
          type: string
          description: Name in system of template
        content:
          type: string
          description: Content of template
        type:
          type: number
          description: Type of template
        primaryMail:
          type: string
          description: Primary mail of template
        category:
          type: number
          description: Category of template
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
        deleted_at:
          type: string
          description: Timestamp of deletion
        agency_id:
          type: number
          description: ID of agency of template
    Mortgage:
      type: object
      required:
        - customer_id
      properties:
        customer_id:
          type: number
          description: ID of the customer
        hypotheeknummer:
          type: string
          description: Number of mortgage
        koopsom:
          type: number
          description: Buying price of property
        onderpandsgegevens:
          type: string
          description: Credentials of collateral
        redenHypotheek:
          type: string
          description: Reason of mortgage
        hoofdsomHypotheek:
          type: number
          description: Main sum mortgage
        hypotheciareInschrijving:
          type: string
          description: Mortgage  registration
        taxateur_id:
          type: number
          description: ID of appraiser
        marktwaarde:
          type: number
          description: Market value of property
        datumTaxatie:
          type: string
          description: Date of taxation
        wozWaarde:
          type: number
          description: Cadastral value
        wozDatum:
          type: string
          description: Date of cadastral
        totaalSom:
          type: number
          description: Total sum
        bouwdepot:
          type: string
          description: Building fund of mortgage
        notaris_id:
          type: number
          description: ID of notary
        passeerdatum:
          type: string
          description: Date when the mortgage papers are signed by the notary
        verkopendMakelaar_id:
          type: number
          description: ID of realtor
        geldverstrekker_id:
          type: number
          description: ID of company that gave the mortgage
        label_id:
          type: number
          description: ID of label
        nhg:
          type: boolean
          description: Is mortgage under Nationale Hypotheek Garantie (NHG)?
        rate:
          type: number
          description: Rate of mortgage
        rangorde:
          type: number
          description: Rank of mortgage
        status:
          type: number
          description: Status of mortgage
        getekend:
          type: string
          description: Date of signing
        voor_verlenging:
          type: string
          description: Date before extension
        na_verlening:
          type: string
          description: Date after extension
        financiering:
          type: string
          description: Date of financing
        bankgarantie:
          type: string
          description: Date of bank guarantee
        passeerdatumVoortgang:
          type: string
          description: Date of passing date progress
        collateral_address:
          type: string
          description: Collateral address of mortgage
        collateral_city:
          type: string
          description: Collateral city of mortgage
        collateral_postcode:
          type: string
          description: Collateral postal code of mortgage
        collateral_housenumber:
          type: string
          description: Collateral house number of mortgage
        collateral_county:
          type: string
          description: Collateral county of mortgage
        restantHoofdsom:
          type: number
          description: Remainder of total sum of mortgage
        executiewaarde:
          type: number
          description: Execution value of mortgage
        type_woning:
          type: number
          description: ID type of property
        offerteNummer:
          type: number
          description: Quotation of mortgage
        datumAanvraag:
          type: string
          description: Date of application
        datumOfferte:
          type: string
          description: Date of quotation
        datumGeldigheidOfferte:
          type: string
          description: Date of validity for quotation
        datumOfferteGetekend:
          type: string
          description: Date of quotation signed
        vovVoorVerbouwing:
          type: number
          description: Vrije onderhandse verkoopwaarde (VOV) before construction
        vovNaVerbouwing:
          type: number
          description: Vrije onderhandse verkoopwaarde (VOV) after construction
        ewVoorVerbouwing:
          type: number
          description: Execution value before construction
        ewNaVerbouwing:
          type: number
          description: Execution value after construction
        trackingNumber:
          type: number
          description: Tracking number of mortgage
        collateral_addition:
          type: string
          description: Collateral addition of mortgage
        purchasing_broker_id:
          type: number
          description: ID of purchasing broker
        validity_unsigned_offer_date:
          type: string
          description: Validity of unsigned offer date
        validity_signed_offer_date:
          type: string
          description: Validity of signed offer date
        end_financing_reservation_date:
          type: string
          description: End of financing reservation date
        has_bank_guarantee_date:
          type: string
          description: Date of bank guarantee
        bank_guarantee_date:
          type: string
          description: Date of bank guarantee
        mortgage_property_id:
          type: number
          description: ID of mortgage property
        financier_agency_id:
          type: number
          description: ID of financier agency
        arrangement_type:
          type: number
          description: ID of arrangement
        existing_mortgage_number:
          type: string
          description: Number of existing mortgage number
        own_resources_amount:
          type: number
          description: Amount of own resources
        mutation_code:
          type: number
          description: Code of mutation of mortgage
        is_property_purchase:
          type: boolean
          description: Is property purchased?
        bank_guarantee_costs:
          type: number
          description: Costs of bank guarantee
        net_consultancy_costs:
          type: number
          description: Net consultancy costs
        mortgage_deed_cost_specification:
          type: number
          description: Costs of mortgage deed
        national_mortgage_guarantee_costs:
          type: number
          description: National mortgage guarantee costs
        fine_interest:
          type: number
          description: Fine intereset of mortgage
        loan_type:
          type: string
          description: Type of loan
        secondary_customer_id:
          type: number
          description: ID of secondary customer
        loan_to_value:
          type: number
          description: Value to loan of mortgage
        risk_class:
          type: number
          description: Risk class of mortgage
        risk_class_type:
          type: number
          description: Type of risk class of mortgage
    MortgagePart:
      type: object
      required:
        - mortgage_id
      properties:
        mortgage_id:
          type: number
          description: ID of mortgage
        hypotheeknummer:
          type: string
          description: Number of mortgage
        leningdeelnummer:
          type: string
          description: Part number of loan
        soortLening:
          type: string
          description: Sort of loan
        hoofdsom:
          type: number
          description: Main price
        begindatum:
          type: string
          description: Start date
        einddatum:
          type: string
          description: End date
        rente:
          type: number
          description: Interest
        rentevasteperiode:
          type: string
          description: Fixed interest period
        einddatumRentevast:
          type: string
          description: End date of fixed interest period
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of last updated
        begindatumRentevast:
          type: string
          description: Start date of fixed interest period
        renteType:
          type: number
          description: Type of intereset
        duur:
          type: number
          description: Duration
        hypotheekType:
          type: number
          description: Type of mortgage
        afsluitprovisie:
          type: number
          description: Commission
        bedenktijd:
          type: boolean
          description: Time for consideration
        bedenktijdStartDatum:
          type: string
          description: Start date of consideration
        type:
          type: number
          description: Type
        agency_code:
          type: string
          description: Code of agency
        tax_box_type:
          type: number
          description: The tax box type number
        repayment_type:
          type: number
          description: Type of repayment
        interest_agreement_type:
          type: number
          description: Type of interest agreement
        interest_cooling_off_period_type:
          type: number
          description: Type of interest cooling off period type
        interest_cooling_off_period_in_months:
          type: number
          description: Type of interest colling off period in months
        payment_term:
          type: number
          description: Payment term
        consumptive_percentage:
          type: number
          description: Consumptive percentage
        consumptive_amount:
          type: number
          description: Consumptive amount
        national_mortgage_guarantee:
          type: boolean
          description: National mortgage guarantee
        coverage_percentage:
          type: number
          description: Coverage percentage
        rate_based_on:
          type: number
          description: Rate based on
      description: >
        A mortgage part is one of the parts that makes up the mortgage.
    Note:
      type: object
      required:
        - title
      properties:
        id:
          type: number
          description: ID of note
        title:
          type: string
          description: Title of note
        user_id:
          type: string
          description: ID of the user who will be marked as the creator of the note
        content:
          type: string
          description: Content of note
        datetime:
          type: string
          description: Datetime of note
        category:
          $ref: '#/components/schemas/CategoryEnum'
        customer_id:
          type: string
          description: ID of the related customer
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
        deleted_at:
          type: string
          description: Timestamp of deletion

      example:
        id: 1
        title: Notitie
        user_id: 1
        content: Call was made by customer XXX at 13:48
        datetime: "2019-10-25T12:00:00+02:00"
        category_id: 1
        customer_id: 1234
        created_at: "2019-10-25T12:00:00+02:00"
        updated_at: "2019-10-25T13:00:00+02:00"
        deleted_at: "2019-10-25T14:00:00+02:00"
      description: >
        A note contains textual information that a user wants to remember/store under a customer.
    Signal:
      type: object
      properties:
        id:
          type: number
          description: ID of signal
        signal_query_id:
          type: number
          description: ID of signal query
        customer_id:
          type: number
          description: ID of customer
        status:
          type: number
          description: Status of signal
        snoozed_until:
          type: string
          description: Signal snoozed until date
        comment:
          type: string
          description: Comment of signal
        finished_by:
          type: number
          description: Signal finished by
        finished_at:
          type: string
          description: Signal finished at date
        created_at:
          type: string
          description: Signal created at timestamp
        updated_at:
          type: string
          description: Signal latest update timestamp
      description: >
        A signal is an automated feedback item. Signals are created by signal queries, which in turn use a search model
        as a source for which models the signals need to be created.
    Account:
      type: object
      required:
        - account_type_id
        - customer_id
        - number
      properties:
        id:
          type: number
          description: ID of account
        account_type_id:
          type: number
          description: Id of the account type
        customer_id:
          type: number
          description: ID of customer of account
        joint_id:
          type: number
          description: ID of the customer who is the joint account holder
        active:
          type: boolean
          description: Is account active?
        number:
          type: string
          description: Number of account
        description:
          type: string
          description: Subject
        primary:
          type: boolean
          description: Marks if this is the primary account. When an account is shared, two objects exist of which only one the the primary.
        created_at:
          type: string
          description: A datetime string according to ISO8601
        updated_at:
          type: string
          description: A datetime string according to ISO8601
      description: >
        An account is a bank account of a customer. It contains some basic details and is mostly used to attach
        documents to. An account can also be shared between two customers via the `joint_id` relation. When an account
        is shared, two objects exist of which only one the primary account.
    PortalInvitation:
      type: object
      required:
        - customer_id
        - send_email
        - type
      properties:
        id:
          type: number
          description: ID of portal invitation
        customer_id:
          type: number
          description: The id of the customer of the invite
        send_email:
          type: boolean
          description: A boolean to indicate if DossierData should send an email for the invite
        type:
          $ref: '#/components/schemas/PortalInvitationTypeEnum'
        token:
          type: string
          description: When the invite is created this is the token with which the customer can access the portal
        active:
          type: boolean
          description: >
            A boolean to indicate if the invite has been used. If this is `true` that means that the invite is still
            active and has not been used by the customer.
        valid_until:
          type: string
          description: ISO 8601 date until when the invite is valid. Set to `null` if the invite must never expire.
        created_at:
          type: string
          description: ISO 8601 date when the portal invitation was created.
        updated_at:
          type: string
          description: ISO 8601 date when the portal invitation was last updated.
      description: >
        A portal invitation is a model which keeps track invites for the portal.
    RelationNumber:
      type: object
      required:
        - number
        - relation_number_type_id
        - numberable_type
        - numberable_id
      properties:
        id:
          type: number
          description: Internal id of the relation number type
        number:
          type: string
          description: The identifier of the relation number
        relation_number_type_id:
          type: number
          description: The id of the relation number type
        numberable_type:
          $ref: '#/components/schemas/MorphRelationTypeEnum'
        numberable_id:
          type: number
          description: The id of object to which the relation number is attached
        created_at:
          type: string
          description: The datetime when the relation number was created
        updated_at:
          type: string
          description: The datetime when the relation number was last updated
      description: >
        The RelationNumber model keeps track of external relation numbers and links them via a polymorphic relation to
        other models in the database. You need to have a RelationNumberType before you can create this.
    RelationNumberType:
      type: object
      required:
        - name
      properties:
        id:
          type: number
          description: ID of the relation number type
        name:
          type: string
          description: Name of the relation number type
      description: >
        The RelationNumberType model keeps track of all different relation types. If you have a new type of external
        number that you want to keep track of you need to create a new RelationNumberType model first.
    Office:
      type: object
      required:
        - name
      properties:
        id:
          type: number
          description: ID of office
        name:
          type: string
          description: Name of office
        owner_id:
          type: number
          description: ID of owner of office
        code:
          type: string
          description: Code of office
        phone:
          type: string
          description: Phone number of office
        postcode:
          type: string
          description: Postal code of office
        houseNumber:
          type: string
          description: House number of office
        streetName:
          type: string
          description: Street name of office
        city:
          type: string
          description: City of office
        houseNumberAddition:
          type: string
          description: House number addition of office
        email:
          type: string
          description: Email address of office
        website:
          type: string
          description: Website of office
      description: >
        An office model can be attached to customers to identify who is responsible for them. Only an administrator,
        an office manager or the owner of the office can change to which office a customer is assigned.

        Users can also choose to which offices they belong.
    User:
      type: object
      required:
        - username
      properties:
        id:
          type: number
          description: ID of user
        username:
          type: string
          description: The username used for logging in
        first_name:
          type: string
          description: First name of the user
        last_name:
          type: number
          description: Last name of the user
        email:
          type: string
          description: Email address of the user
        fullname:
          type: string
          description: Full name of the user
        active:
          type: boolean
          description: Describes if the user is active (and can login)
        preferred_office_id:
          type: number
          description: The user's preferred office id
      description: >
        An user model is a user of the application and can be marked as the advisor of a customer.
    Property:
      type: object
      required:
        - postal_code
        - number
      properties:
        id:
          type: number
          description: ID of user
        postal_code:
          type: string
          description: The postal code
        number:
          type: string
          description: The house number
        number_letter:
          type: string
          description: The house letter
        number_addition:
          type: string
          description: The house number addition
        street:
          type: string
          description: The street name
        city:
          type: string
          description: The city name
      description: >
        The property model is the lowest level object for address data.

        A property can be set:
        - as an address for a customer via the `customer_property` object
        - as the collateral address for a mortgage via the `mortgage_property` object
        - etc.
    PropertySuggestion:
      type: object
      properties:
        postal_code:
          type: string
          description: The postal code
        number:
          type: string
          description: The house number
        number_letter:
          type: string
          description: The house letter
        number_addition:
          type: string
          description: The house number addition
        street:
          type: string
          description: The street name
        city:
          type: string
          description: The city name
      description: >
        The property suggestions can be used as an autocomplete step or to hint towards an existing address when none is found.
    UserDepartment:
      type: object
      properties:
        id:
          type: number
          description: Id of the user department
        name:
          type: string
          description: name of the user department
        user_id:
          type: number
          description: Id of the related user (owner)
    Search:
      type: object
      properties:
        id:
          type: number
          description: ID of search
        name:
          type: string
          description: Name of search
        content:
          type: string
          description: Content of search
        user_id:
          type: number
          description: ID of user
        public:
          type: boolean
          description: Is search public?
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
      description: >
        A search model contains a user defined query which can be used to find and export data. It can also be used as
        a data source for a signal.
    NotFound:
      type: object
      properties:
        succes:
          type: boolean
        error:
          type: object
          properties:
            code:
              type: number
              description: Code of the error
            name:
              type: string
              description: A description of the error if available
      description: A resource we could not find
    Unauthorized:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: string
          description: The type of error
        error_description:
          type: string
          description: A detailed description of the error
      description: An authorized action
    UnprocessableEntity:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: object
          description: A description of the error
          properties:
            code:
              type: string
            message:
              type: string
            errors:
              type: array
              items:
                type: string
      description: An unprocessable entity for which validation failed
    BadRequest:
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
      description: A bad request
    PaginatedAddresses:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        meta:
          $ref: '#/components/schemas/Meta'
      description: A paginated result of addresses
    PaginatedAttachables:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Attachable'
        meta:
          $ref: '#/components/schemas/Meta'
      description: A paginated result of attachables
    OfferteAanvraag:
      type: object
      properties:
        Header:
          type: object
        HuidigObject:
          type: object
        Hypotheekgever:
          type: object
        PartijNAWData:
          type: object
        TussenPersoon:
          type: object
        Object:
          type: object
        Lening:
          type: object
      description: >
        An AX message that follows the HDN standard. For the full xsd contact [info@dossierdata.nl](mailto:info@dossierdata.nl)
    Calendar:
      type: object
      properties:
        id:
          type: number
        user_id:
          type: number
          description: The user id of the owner of the calendar
        name:
          type: string
    CalendarEvent:
      type: object
      required:
        - calendar_id
        - time_start
        - time_end
        - description
      properties:
        id:
          type: number
        calendar_id:
          type: number
          description: The id of the calendar to which this event belongs
        time_start:
          type: string
          description: Date time value of the start time
        time_end:
          type: string
          description: Date time value of the end time
        customer_id:
          type: number
          description: The id of the customer for which the event is created
        location:
          type: string
          description: The location at which the event takes palce
        description:
          type: string
          description: Description of the event
        summary:
          type: string
          description: Summary of the event
        all_day:
          type: boolean
          description: Describes if the event takes place all day(default value is false)
        is_visit:
          type: boolean
          description: Describes if customer is coming ot the office or if the advisor is going to the customer
    CategoryEnum:
      type: number
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
      description: >
        An enum describing all categories of items found on the customer dashboard

        Category:
          * `1` - Customer
          * `2` - Banking
          * `3` - Insurance
          * `4` - Damage
          * `5` - Mortgage
          * `6` - Mailing
          * `7` - Dossier
          * `8` - Credit
          * `9` - Income
          * `10` - Retirement
          * `11` - Possession
          * `12` - Obligation
          * `13` - Current living condition
    TaskStatusEnum:
      type: number
      enum:
        - null
        - 0
        - 1
      description: >
        An enum that describes all task status types.
          - `null`: Unknown
          - `0`: Active
          - `1`: Completed
    TaskTypeEnum:
      type: number
      enum:
        - 1
        - 2
        - 3
        - 4
        - 20
      description: >
        An enum that describes all task types. If not provided this will default to `20`.
         - `1`: Call back request
         - `2`: Check task
         - `3`: Communication task
         - `4`: Birthday task
         - `20`: General task
    TaskPriorityEnum:
      type: number
      enum:
        - 0
        - 1
        - 2
        - 3
      description: >
        An enum that describes all task priority types. If not provided this will default to `2`.
         - `0`: Critical
         - `1`: Important
         - `2`: Normal
         - `3`: Insignificant
    SalutationEnum:
      type: number
      enum:
        - null
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
        - 99
      description: >
        An enum that describes all education level types.
         - `null`: Empty
         - `0` The Lord (De heer)
         - `1` Mrs (Mevrouw)
         - `2` Miss (Mejuffrouw)
         - `3` Mr. Mrs (Dhr/Mevr)
         - `4` Family (Familie)
         - `5` The Ladies (De dames)
         - `6` The Heritage Of (De erven van)
         - `7` The Management Of (De directie van)
         - `8` The Board Of (Het bestuur van)
         - `9` The Firmants Of (De firmanten van)
         - `10` Society (Maatschap)
         - `11` Firma (Firma)
         - `12` Foundation (Stichting)
         - `13` Owners Association (Vereniging van eigenaren)
         - `14` Vof (V.O.F.)
         - `15` To The Attention Of (Ter attentie van)
         - `99` Unknown (Onbekend)
    EducationLevelEnum:
      type: string
      enum:
        - null
        - 'primary'
        - 'secondary'
        - 'pre_university'
        - 'lower_vocational'
        - 'secondary_vocational'
        - 'higher_proffesional'
        - 'postacedemic'
        - 'unknown'
      description: >
        An enum that describes all education level types.
         - `null`: Empty
         - `primary`: Primary school (Lageronderwijs)
         - `secondary`: Secondary school (Voortgezetonderwijs)
         - `pre_university`: Pre university (VWO)
         - `lower_vocational`: Lower vocational (LBO)
         - `secondary_vocational`: Secondary vocational (MBO)
         - `higher_proffesional`: Higher professional (HBO)
         - `postacedemic`: Postacedemic (Postacademisch)
         - `unknown`: Unknown
    MarriageDissolvedTypeEnum:
      type: string
      enum:
        - null
        - 'marriage_divorce'
        - 'registered_partnership_divorce'
        - 'marriage_and_registered_partnership_divorce'
        - 'deceased'
      description: >
        An enum that describes types of reasons/marriages which have been resolved.
         - `null`: Unknown or empty
         - `marriage_divorce`: Marriage divorced
         - `registered_partnership_divorce`: Registered partnership divorced
         - `marriage_and_registered_partnership_divorce`: Married and registered partnership divorced
         - `deceased`: The partner deceased
    MaritalStatusEnum:
      type: number
      enum:
        - null
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
      description: >
        An enum that describes all marital statuses.
         - `null`: Unknown
         - `0`: Single
         - `1`: Married joint assets
         - `2`: Married with prenup
         - `3`: Married foreign law
         - `4`: Divorced
         - `5`: Resident
         - `6`: Partner registration joint assets
         - `7`: Partner registration with prenup
         - `8`: Cohabitation with prenup
         - `9`: Cohabitation without prenup
         - `10`: Widow
    CustomerTypeEnum:
      type: number
      enum:
        - null
        - 1
        - 2
        - 7
        - 9
        - 11
        - 12
        - 13
        - 14
      description: >
        An enum that describes all customer types.
          - `null`: Unknown
          - `1`: Private
          - `2`: Expiring
          - `7`: Expired
          - `9`: Business
          - `11`: Business expired
          - `12`: Lead
          - `13`: Mortgage lead
          - `14`: Insurance lead
    GenderEnum:
      type: number
      enum:
        - null
        - 0
        - 1
      description: >
        An enum that describes all genders.
          - `null`: Unknown
          - `0`: Female
          - `1`: Male
    PortalInvitationTypeEnum:
      type: string
      enum:
        - 'full'
        - 'assessment'
        - 'source_data'
        - 'advice'
      description: >
        An enum that describes all types of portal invitations.
          - `full`: This is an invite for the entire portal process which included the source data and an assessment (Volledig)
          - `assessment`: This is an invite for the assessment process (Oriëntatie)
          - `source_data`: This is an invite for the source data process via iWize (Brondata)
          - `advice`: This is an invite for the advice process (Advies)
    MorphRelationTypeEnum:
      type: string
      enum:
        - 'address'
        - 'bank_account'
        - 'current_living_condition'
        - 'customer'
        - 'credit'
        - 'damage'
        - 'income_benefit'
        - 'income_company'
        - 'income_employment'
        - 'income_other'
        - 'income_retirement'
        - 'mortgage'
        - 'mortgage_part'
        - 'obligation'
        - 'office'
        - 'policy'
        - 'possession'
        - 'retirement'
        - 'user'
      description: >
        An enum that describes all possible types for a polymorphic relationship.
          - `address`: The Address model
          - `bank_account`: The (bank) Account model
          - `current_living_condition`: The CurrentLivingCondition model
          - `customer`: The Customer model
          - `damage`: The Damage model
          - `income_benefit`: The IncomeBenefit model
          - `income_company`: The IncomeCompany model
          - `income_employment`: The IncomeEmployment model
          - `income_other`: The IncomeOther model
          - `income_retirement`: The IncomeRetirement model
          - `mortgage`: The Mortgage model
          - `mortgage_part`: The MortgagePart model
          - `obligation`: The Obligation model
          - `office`: The Office model
          - `policy`: The Policy model
          - `possession`: The Possession model
          - `retirement`: The Retirement model
          - `user`: The User model
    ProductCategoryEnum:
      type: string
      enum:
        - 'banking'
        - 'customer'
        - 'credit'
        - 'damage'
        - 'dossier'
        - 'insurance'
        - 'mortgage'
        - 'task'
        - 'note'
      description: >
        An enum that describes all possible product categories by which product labels are grouped.
          - `banking`: Banking
          - `customer`: Customers
          - `credit`: Credits
          - `damage`: Damages
          - `dossier`: Dossiers
          - `insurance`: Insurance policies
          - `mortgage`: Mortgages
          - `task`: Tasks
          - `note`: Notes
    HasAttachablesMorphRelationTypeEnum:
      type: string
      enum:
        - 'bank_account'
        - 'current_living_condition'
        - 'customer'
        - 'damage'
        - 'income_benefit'
        - 'income_company'
        - 'income_employment'
        - 'income_other'
        - 'income_retirement'
        - 'mortgage'
        - 'obligation'
        - 'policy'
        - 'possession'
        - 'retirement'
      description: >
        An enum that describes all possible types for the attachable parent (`HasAttachable` interface) polymorphic relationship.
          - `bank_account`: The (bank) Account model
          - `current_living_condition`: The CurrentLivingCondition model
          - `customer`: The Customer model
          - `damage`: The Damage model
          - `income_benefit`: The IncomeBenefit model
          - `income_company`: The IncomeCompany model
          - `income_employment`: The IncomeEmployment model
          - `income_other`: The IncomeOther model
          - `income_retirement`: The IncomeRetirement model
          - `mortgage`: The Mortgage model
          - `obligation`: The Obligation model
          - `policy`: The Policy model
          - `possession`: The Possession model
          - `retirement`: The Retirement model
          - `task`: The Task model
    IsAttachableMorphRelationTypeEnum:
      type: string
      enum:
        - 'document'
        - 'email'
        - 'letter'
        - 'note'
      description: >
        An enum that describes all possible types for the attachable child (`IsAttachable` interface) polymorphic relationship.
          - `document`: The Document model
          - `email`: The Email model
          - `letter`: The Letter model
          - `note`: The Note model
          - `task`: The Task model
    AddressTypeEnum:
      type: string
      enum:
        - 'mail'
        - 'visit'
        - 'establishment'
      description: >
        An enum that describes all possible address types by which a property can be attached to another object.
          - `mail`: Mail address
          - `visit`: Visit address
          - `establishment`: Establishment
    PropertyValuationTypeEnum:
      type: string
      enum:
        - 'market_value'
        - 'real_estate_value'
      description: >
        An enum that describes all possible valuation types.
          - `market_value`: Market value (Marktwaarde)
          - `real_estate_value`: Real estate value (WOZ waarde)
    ContractOwnerEnum:
      type: string
      enum:
        - 'main_customer'
        - 'partner'
        - 'both'
        - 'other'
      description: >
        An enum that describes on who's name the contract is registered if a property is rented.
          - `main_customer`: The contract is on the main customer's name
          - `partner`: The contract is on the partner's name
          - `both`: The contract is on both the main customer and partner's name
          - `other`: The contract is on somebody else his name
    NewConstructionTypeEnum:
      type: string
      enum:
        - 'collective_private_commissioning'
        - 'diy'
        - 'project_construction'
      description: >
        An enum that describes the type of construction.
          - `collective_private_commissioning`: Collective private commissioning (CPO - Collectief Particulier Opdrachtgeverschap)
          - `diy`: DIY (Zelfbouw)
          - `project_construction`: Project construction (Projectbouw)
    PropertyPurposeEnum:
      type: string
      enum:
        - 'keep_living'
        - 'sell'
        - 'sold'
      description: >
        An enum that describes all possible purposes of a property that is attached to a customer.
          - `keep_living`: Customer wants to keep living at property
          - `sell`: Customer wants to sell property
          - `sold`: Customer has sold the property
    ModelNotFound:
      type: object
      properties:
        success:
          type: boolean
          description: Indicator of failed request
        error:
          type: object
          properties:
            code:
              type: number
              description: The code for the not found exception
            message:
              type: string
              description: The message describing the specific model that was not found
      description: >
        An error message when a model was not found but was expected to be found.
    CustomerProperty:
      type: object
      properties:
        id:
          type: number
          description: The id of the customer property
        customer_id:
          type: number
          description: The customer id to which the property is linked
        property_id:
          type: number
          description: The property id of the customer's address
        registration_date:
          type: string
          description: The registration date of the address
        municipality_registration_date:
          type: string
          description: The registration date as known by the municipality
        transaction_date:
          type: string
          description: The transacion date of the property
        owns_property:
          type: boolean
          description: Boolean indicating if the property is owned by the customer
        is_current:
          type: boolean
          description: Boolean indicating if the property is the current address of the customer
        percentage_owner:
          type: number
          description: The percetage that the customer owns the property (1 to 100)
        address_type:
          $ref: '#/components/schemas/AddressTypeEnum'
        property_purpose:
          $ref: '#/components/schemas/PropertyPurposeEnum'
        living_together:
          type: boolean
          description: Boolean indicating if the customer is living here with another customer from dossierdata
        contract_owner:
          $ref: '#/components/schemas/ContractOwnerEnum'
        for_sale_since:
          type: string
          description: If the customer has this property for sale this contains the date since when it has been for sale
        sold_since:
          type: string
          description: If the customer sold this property this contains when it was sold
    MortgageProperty:
      type: object
      properties:
        id:
          type: number
          description: The id of the mortgage property
        mortgage_id:
          type: number
          description: The mortgage id to which the property is linked
        property_id:
          type: number
          description: The property id to which the mortgage is linked
        new_construction_type:
          $ref: '#/components/schemas/NewConstructionTypeEnum'
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
        ltv_calculation:
          type: number
          description: Boolean indicating if this collateral address is used when calculating the mortgage's LTV ratio
    AgencyProperty:
      type: object
      properties:
        id:
          type: number
          description: The id of the agency property
        agency_id:
          type: number
          description: The agency id to which the property is linked
        property_id:
          type: number
          description: The property id to which the agency is linked
        is_current:
          type: boolean
          description: Boolean indicating if this is the agency's current address
        address_type:
          $ref: '#/components/schemas/AddressTypeEnum'
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
    PropertyValuation:
      type: object
      properties:
        id:
          type: number
          description: The id of the property
        property_id:
          type: number
          description: The property id to which the agency is linked
        registration_date:
          type: string
          description: The date at which this valuation was registered
        value:
          type: number
          description: The value of the valuation
        type:
          $ref: '#/components/schemas/PropertyValuationTypeEnum'
    HDNCompany:
      type: object
      properties:
        id:
          type: number
          description: The id of the HDN company
        hdn_code:
          type: string
          description: The company's HDN code
        sender_name:
          type: string
          description: The sender name
        receiver_name:
          type: number
          description: The receiver name
        is_sender:
          type: bool
          description: Describes is company is a sender
        is_receiver:
          type: bool
          description: Describes is company is a receiver
        max_hdn_version:
          type: number
          description: The maximum HDN version until which this company is valid
        min_hdn_version:
          type: number
          description: The minimum HDN version from which this company is valid
    HDNCompanyLabel:
      type: object
      properties:
        id:
          type: number
          description: The id of the HDN company label
        company_id:
          type: number
          description: The id of the HDN company
        hdn_code:
          type: string
          description: The company's HDN code
        product_id:
          type: number
          description: The id of the HDN company label
        name:
          type: string
          description: The name of the HDN company label
        max_hdn_version:
          type: number
          description: The maximum HDN version until which this company is valid
        min_hdn_version:
          type: number
          description: The minimum HDN version from which this company is valid
    HDNCompanyProduct:
      type: object
      properties:
        id:
          type: number
          description: The id of the HDN company product
        company_id:
          type: number
          description: The id of the HDN company
        hdn_code:
          type: string
          description: The company's HDN code
        product_id:
          type: number
          description: The id of the HDN company product
        name:
          type: string
          description: The name of the HDN company product
        max_hdn_version:
          type: number
          description: The maximum HDN version until which this company is valid
        min_hdn_version:
          type: number
          description: The minimum HDN version from which this company is valid
  responses:
    BadRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
          examples:
            UnauthorizedScopeExample:
              $ref: '#/components/examples/BadScopeRequestExample'
            UnauthorizedExample:
              $ref: '#/components/examples/BadRequestExample'
    Success:
      description: The request was processed successfully
      headers: { }
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
          examples:
            CreatedExample:
              $ref: '#/components/examples/SuccessExample'
    BadScopeRequest:
      description: Bad Scope Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/BadScopeRequestExample'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Unauthorized'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/UnauthorizedExample'
    ClientUnauthorized:
      description: Client Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Unauthorized'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/ClientUnauthorizedExample'
    NotFoundResponse:
      description: This specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
          examples:
            NotFoundExample:
              $ref: '#/components/examples/NotFoundExample'
    ModelNotFoundResponse:
      description: This specified item could not be found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelNotFound'
          examples:
            NotFoundExample:
              $ref: '#/components/examples/ModelNotFoundExample'
    UnprocessableEntityResponse:
      description: The given data did not pass validation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableEntity'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/UnprocessableEntityExample'
    CreatedCustomerResponse:
      description: The resource was successfully created
      headers: { }
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Created'
          examples:
            CreatedExample:
              $ref: '#/components/examples/CreatedExample'
      links:
        Get customer:
          operationId: getCustomer
          parameters:
            customer_id: '$response.body#/data/id'
          description: >-
            The `id` value returned in the response can be used as the
            `customer_id` parameter in `GET /customer/{customer_id}`.
        Update customer:
          operationId: updateCustomer
          parameters:
            customer_id: '$response.body#/data/id'
          description: >-
            The `id` value returned in the response can be used as the
            `customer_id` parameter in `PUT /customer/{customer_id}`.
        Delete customer:
          operationId: deleteCustomer
          parameters:
            customer_id: '$response.body#/data/id'
          description: >-
            The `id` value returned in the response can be used as the
            `customer_id` parameter in `DELETE /customer/{customer_id}`.
    CreatedResponse:
      description: The resource was successfully created
      headers: { }
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Created'
          examples:
            CreatedExample:
              $ref: '#/components/examples/CreatedExample'
    UpdatedResponse:
      description: The resource was successfully updated
      headers: { }
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Updated'
          examples:
            CreatedExample:
              $ref: '#/components/examples/UpdatedExample'
    UpdatedTasksWithMetaCounts:
      description: >-
        The resource was successfully updated.

        This response also includes updated active/completed task counts so the front-end can be updated.
      headers: { }
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatedTasksWithMetaCounts'
          examples:
            CreatedExample:
              $ref: '#/components/examples/UpdatedTasksWithMetaCountsExample'
    UpdatedTaskWithMetaCounts:
      description: >-
        The resource was successfully updated

        This response also includes updated active/completed task counts so the front-end can be updated.
      headers: { }
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatedTaskWithMetaCounts'
          examples:
            CreatedExample:
              $ref: '#/components/examples/UpdatedTaskWithMetaCountsExample'
    DeletedResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Deleted'
          examples:
            DeletedExample:
              $ref: '#/components/examples/DeletedExample'
    CustomerURI:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  uri:
                    type: string
          examples:
            response:
              value:
                data:
                  uri: "https://uri"
    Address:
      description: An address resource
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Address'
          examples:
            AddressExample:
              $ref: '#/components/examples/AddressExample'
    PaginatedAddresses:
      description: A paginated collection of the address resource
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
              meta:
                $ref: '#/components/schemas/Pagination'
          examples:
            PaginatedAddressExample:
              $ref: '#/components/examples/PaginatedAddressesExample'
    JWTResponse:
      description: A JWT response
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  token:
                    type: string
          examples:
            JWTResponseExample:
              $ref: '#/components/examples/JWTResponseExample'
    AttachableResponse:
      description: An attachable resource
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Attachable'
          examples:
            AttachableExample:
              $ref: '#/components/examples/AttachableResponseExample'
    AttachableBreadcrumbsResponse:
      description: Breadcrumbs to a child of an attachable resource
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/AttachableBreadcrumbs'
          examples:
            AttachableBreadcrumbsExample:
              $ref: '#/components/examples/AttachableBreadcrumbsResponseExample'
    PaginatedAttachablesResponse:
      description: A paginated collection of the attachable resource
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Attachable'
              meta:
                $ref: '#/components/schemas/Pagination'
          examples:
            PaginatedAttachablesExample:
              $ref: '#/components/examples/PaginatedAttachablesExample'
    CountryResponse:
      description: A Country resource
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Country'
          examples:
            CountryExample:
              $ref: '#/components/examples/CountryExample'
    PaginatedCountries:
      description: A paginated collection of the Country resource
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
              meta:
                $ref: '#/components/schemas/Pagination'
          examples:
            PaginatedCountriesExample:
              $ref: '#/components/examples/PaginatedCountriesExample'
    CustomerResponse:
      description: A customer resource
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Customer'
          examples:
            CustomerBasicExample:
              $ref: '#/components/examples/CustomerBasicExample'
            CustomerContactExample:
              $ref: '#/components/examples/CustomerContactExample'
            CustomerFullExample:
              $ref: '#/components/examples/CustomerFullExample'
            CustomerWithIncludesExample:
              $ref: '#/components/examples/CustomerWithIncludesExample'
      links:
        Get customer by customer_id:
          operationId: getCustomer
          parameters:
            customer_id: '$response.body#/data/id'
          description: >-
            The `id` value returned in the response can be used as the
            `customer_id` parameter in `GET /customer/{customer_id}`.
    PaginatedCustomersResponse:
      description: A paginated collection of the customer resource
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
              meta:
                $ref: '#/components/schemas/Pagination'
          examples:
            PaginatedCustomersBasicScopeExample:
              $ref: '#/components/examples/PaginatedCustomersBasicScopeExample'
            PaginatedCustomersBasicAndContactScopeExample:
              $ref: '#/components/examples/PaginatedCustomersBasicAndContactScopeExample'
            PaginatedCustomersFullScopeExample:
              $ref: '#/components/examples/PaginatedCustomersFullScopeExample'
      links:
        Get customer by customer_id:
          operationId: getCustomer
          parameters:
            customer_id: '$response.body#/data/0/id'
          description: >-
            The `id` value returned in the response can be used as the
            `customer_id` parameter in `GET /customer/{customer_id}`.
    DossierResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dossier'
          examples:
            DossierResponseExample:
              $ref: '#/components/examples/DossierResponseExample'
    PaginatedDossiersResponse:
      description: A paginated collection of the dossier resource
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Dossier'
              meta:
                $ref: '#/components/schemas/Pagination'
          examples:
            PaginatedDossiersResponseExample:
              $ref: '#/components/examples/PaginatedDossiersResponseExample'
    EmailAccountResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailAccount'
          examples:
            EmailAccountResponseExample:
              $ref: '#/components/examples/EmailAccountResponseExample'
    PaginatedEmailAccountsResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/EmailAccount'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedEmailAccountsResponseExample:
              $ref: '#/components/examples/PaginatedEmailAccountsResponseExample'
    LetterResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Letter'
          examples:
            LetterExample:
              $ref: '#/components/examples/LetterResponseExample'
    PaginatedLettersResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Letter'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedLettersExample:
              $ref: '#/components/examples/PaginatedLettersExample'
    ProductLabelResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/ProductLabel'
          examples:
            ProductLabelExample:
              $ref: '#/components/examples/ProductLabelExample'
    PaginatedProductLabelsResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ProductLabel'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedLettersExample:
              $ref: '#/components/examples/PaginatedProductLabelsExample'
    LockResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Lock'
          examples:
            LockResponseExample:
              $ref: '#/components/examples/LockResponseExample'
    PaginatedLocksResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Lock'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedLocksResponseExample:
              $ref: '#/components/examples/PaginatedLocksResponseExample'
    MortgageResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Mortgage'
          examples:
            MortgageResponseExample:
              $ref: '#/components/examples/MortgageResponseExample'
    PaginatedMortgagesResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Mortgage'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedMortgagesExample:
              $ref: '#/components/examples/PaginatedMortgagesResponseExample'
    MortgagePartResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/MortgagePart'
          examples:
            MortgagePartExample:
              $ref: '#/components/examples/MortgagePartResponseExample'
    PaginatedMortgagePartsResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MortgagePart'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedMortgagePartsResponseExample:
              $ref: '#/components/examples/PaginatedMortgagePartsResponseExample'
    MortgageProgressResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/MortgagePart'
          examples:
            MortgageProgressResponseExample:
              $ref: '#/components/examples/MortgageProgressResponseExample'
    PaginatedMortgageProgressResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MortgagePart'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedMortgageProgressResponseExample:
              $ref: '#/components/examples/PaginatedMortgageProgressResponseExample'
    DamageResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Damage'
          examples:
            DamageExample:
              $ref: '#/components/examples/DamageExample'
    PaginatedDamagesResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Damage'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedDamagesExample:
              $ref: '#/components/examples/PaginatedDamagesExample'
    DocumentResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Document'
          examples:
            DocumentExample:
              $ref: '#/components/examples/DocumentExample'
    PaginatedDocumentsResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedDocumentsExample:
              $ref: '#/components/examples/PaginatedDocumentsExample'
    EmailResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Email'
          examples:
            EmailResponseExample:
              $ref: '#/components/examples/EmailResponseExample'
    PaginatedEmailsResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Email'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedEmailsResponseExample:
              $ref: '#/components/examples/PaginatedEmailsResponseExample'
    TemplateResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Template'
          examples:
            PaginatedTemplatesExample:
              $ref: '#/components/examples/TemplateExample'
    PaginatedTemplatesResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedTemplatesExample:
              $ref: '#/components/examples/PaginatedTemplatesExample'
    NoteResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Note'
          examples:
            NoteResponseExample:
              $ref: '#/components/examples/NoteResponseExample'
    PaginatedNotesResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedNotesResponseExample:
              $ref: '#/components/examples/PaginatedNotesResponseExample'
    SignalResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Signal'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            SignalResponseExample:
              $ref: '#/components/examples/SignalResponseExample'
    PaginatedSignalsResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Signal'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedSignalsResponseExample:
              $ref: '#/components/examples/PaginatedSignalsResponseExample'
    AccountResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Account'
          examples:
            AccountResponseExample:
              $ref: '#/components/examples/AccountResponseExample'
    PaginatedAccountsResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedAccountsResponseExample:
              $ref: '#/components/examples/PaginatedAccountsResponseExample'
    OfficeResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Office'
          examples:
            OfficeResponseExample:
              $ref: '#/components/examples/OfficeResponseExample'
    PaginatedOfficesResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Office'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedOfficesResponseExample:
              $ref: '#/components/examples/PaginatedOfficesResponseExample'
    UserResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/User'
          examples:
            UserResponseExample:
              $ref: '#/components/examples/UserResponseExample'
    PaginatedUsersResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedUsersResponseExample:
              $ref: '#/components/examples/PaginatedUsersResponseExample'
    SearchResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Search'
          examples:
            SearchResponseExample:
              $ref: '#/components/examples/SearchResponseExample'
    PaginatedSearchesResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Search'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedSearchesResponseExample:
              $ref: '#/components/examples/PaginatedSearchesResponseExample'
    HDNCompanyResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/HDNCompany'
          examples:
            HDNCompanyResponseExample:
              $ref: '#/components/examples/HDNCompanyResponseExample'
    PaginatedHDNCompaniesResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/HDNCompany'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedHDNCompaniesResponseExample:
              $ref: '#/components/examples/PaginatedHDNCompaniesResponseExample'
    PaginatedHDNCompanyLabelsResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/HDNCompanyLabel'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedHDNCompanyLabelsResponseExample:
              $ref: '#/components/examples/PaginatedHDNCompanyLabelsResponseExample'
    PaginatedHDNCompanyProductsResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/HDNCompanyProduct'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedHDNCompanyProductsResponseExample:
              $ref: '#/components/examples/PaginatedHDNCompanyProductsResponseExample'
    AXMessageResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/AXMessage'
          examples:
            AXMessageResponseExample:
              $ref: '#/components/examples/AXMessageResponseExample'
    PaginatedAXMessagesResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AXMessage'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedAXMessagesExample:
              $ref: '#/components/examples/PaginatedAXMessagesExample'
    TaskResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Task'
          examples:
            TaskResponseExample:
              $ref: '#/components/examples/TaskResponseExample'
    PaginatedTasksResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedTasksResponseExample:
              $ref: '#/components/examples/PaginatedTasksResponseExample'
    CalendarResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Calendar'
          examples:
            CalendarResponseExample:
              $ref: '#/components/examples/CalendarResponseExample'
    PaginatedCalendarsResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Calendar'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedCalendarsExample:
              $ref: '#/components/examples/PaginatedCalendarsExample'
    CalendarEventResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/CalendarEvent'
          examples:
            CalendarEventResponseExample:
              $ref: '#/components/examples/CalendarEventResponseExample'
    PaginatedCalendarEventsResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/CalendarEvent'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedCalendarEventsExample:
              $ref: '#/components/examples/PaginatedCalendarEventsResponseExample'
    PortalInvitationResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/PortalInvitation'
          examples:
            PortalInvitationExample:
              $ref: '#/components/examples/PortalInvitationExample'
    PaginatedPortalInvitationsResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/PortalInvitation'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedPortalInvitationsExample:
              $ref: '#/components/examples/PaginatedPortalInvitationsExample'
    RelationNumberResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/RelationNumber'
          examples:
            RelationNumberExample:
              $ref: '#/components/examples/RelationNumberExample'
    PaginatedRelationNumbersResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/RelationNumber'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedRelationNumberTypesExample:
              $ref: '#/components/examples/PaginatedRelationNumbersExample'
    RelationNumberTypeResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/RelationNumberType'
          examples:
            RelationNumberTypeExample:
              $ref: '#/components/examples/RelationNumberTypeExample'
    PaginatedRelationNumberTypesResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/RelationNumberType'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedRelationNumberTypesExample:
              $ref: '#/components/examples/PaginatedRelationNumberTypesExample'
    PaginatedUserDepartmentsResponse:
      description: A paginated collection of the user departments resource
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/UserDepartment'
              meta:
                $ref: '#/components/schemas/Pagination'
          examples:
            PaginatedUserDepartmentsExample:
              $ref: '#/components/examples/PaginatedUserDepartmentsExample'
    UserDepartmentResponseResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/UserDepartment'
          examples:
            UserDepartmentExample:
              $ref: '#/components/examples/UserDepartmentExample'
            UserDepartmentWithUsersIncludeExample:
              $ref: '#/components/examples/UserDepartmentWithUsersIncludeExample'
    PropertyResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Property'
          examples:
            PropertyExample:
              $ref: '#/components/examples/PropertyResponseExample'
            PropertyWithJumbaDataExample:
              $ref: '#/components/examples/PropertyWithJumbaExample'
            PropertyWithIncludesExample:
              $ref: '#/components/examples/PropertyWithIncludesExample'
    PaginatedPropertiesResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedRelationNumberTypesExample:
              $ref: '#/components/examples/PaginatedPropertiesExample'
    PropertySuggestionResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/PropertySuggestion'
          examples:
            PropertySuggestionsExample:
              $ref: '#/components/examples/PropertySuggestionsExample'
    CustomerPropertyResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/CustomerProperty'
          examples:
            CustomerPropertyResponseExample:
              $ref: '#/components/examples/CustomerPropertyResponseExample'
            CustomerPropertyWithIncludesResponseExample:
              $ref: '#/components/examples/CustomerPropertyWithIncludesResponseExample'
    PaginatedCustomerPropertiesResponse:
      description: OK
      headers: { }
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerProperty'
              meta:
                $ref: '#/components/schemas/Meta'
          examples:
            PaginatedCustomerPropertiesResponseExample:
              $ref: '#/components/examples/PaginatedCustomerPropertiesResponseExample'
  examples:
    BadRequestExample:
      summary: 400 No access token
      description: Your request is missing required oauth paramenters, check that the access_token is passed correctly
      value:
        error: invalid_request
        error_description: The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed. Check the "access token" parameter.
    BadScopeRequestExample:
      summary: 400 Invalid scope(s)
      description: Your access token doesn't have the correct scopes. You will probably need to request a new one which includes the scope(s) for this endpoint.
      value:
        success: false
        error:
          code: 400
          message: Invalid scope(s) provided
    UnauthorizedExample:
      summary: 401 Unauthorized
      description: Your client doesn't have access to this tenant or endpoint
      value:
        success: false
        error: access_denied
        error_description: The resource owner or authorization server denied the request.
    ClientUnauthorizedExample:
      summary: 401 Unauthorized
      value:
        success: false
        error: invalid_client
        error_description: Client authorization failed.
    NotFoundExample:
      summary: 404 Not Found
      description: The requested resource could not be found
      value:
        success: false
        error:
          code: 404
          description: No query results for model [model] 1
    UnprocessableEntityExample:
      summary: 422 Unprocessable Entity
      description: >-
        There was a problem processing your request, this is because one or more values did not pass validation.


        Check the `errors` element in the response for detailed descriptions about the validation rules that failed.
      value:
        success: false
        error:
          code: 1
          message: The given data was invalid.
          errors:
            property_name:
              - Validation error
    PaginationExample:
      summary: Pagination
      value:
        pagination:
          total: 1
          count: 1
          per_page: 15
          current: 1
          total_pages: 1
          links: [ ]
    CreatedExample:
      summary: 200 OK
      value:
        success: true
        id: "1"
    SuccessExample:
      summary: 200 OK
      value:
        success: true
    UpdatedExample:
      summary: 200 OK
      value:
        success: true
        id: "1"
    UpdatedTasksWithMetaCountsExample:
      summary: Updated tasks with meta counts
      value:
        data:
          success: true,
          ids: [ 1, 2, 3 ]
        meta:
          departmentTasksCounts:
            - department_hashid: enXBxVoGkolKDv6E
              activeCount: 1
              completedCount: 2
          departmentCallbacksCounts:
            - department_hashid: enXBxVoGkolKDv6E
              activeCount: 1
              completedCount: 2
          userTasksCounts:
            - user_hashid: enXBxVoGkolKDv6E
              activeCount: 1
              completedCount: 2
          userCallbacksCounts:
            - user_hashid: enXBxVoGkolKDv6E
              activeCount: 1
              completedCount: 2
    UpdatedTaskWithMetaCountsExample:
      summary: Updated task with meta counts
      value:
        data:
          success: true,
          id: 1
        meta:
          departmentTasksCounts:
            - department_hashid: enXBxVoGkolKDv6E
              activeCount: 1
              completedCount: 2
          departmentCallbacksCounts:
            - department_hashid: enXBxVoGkolKDv6E
              activeCount: 1
              completedCount: 2
          userTasksCounts:
            - user_hashid: enXBxVoGkolKDv6E
              activeCount: 1
              completedCount: 2
          userCallbacksCounts:
            - user_hashid: enXBxVoGkolKDv6E
              activeCount: 1
              completedCount: 2
    DeletedExample:
      summary: 200 OK
      value:
        success: true
        id: "1"
    AddressExample:
      summary: Address
      value:
        data:
          type: 4
          postcode: 9712VL
          house_number: "46"
          street_name: Noorderhaven
          city: Groningen
          house_number_addition: "``"
          customer: 4482
          active: true
          lat: 53.219708
          lng: 6.558785
          country: Netherlands
    PaginatedAddressesExample:
      summary: Paginated addresses
      value:
        data:
          - type: 4
            postcode: 9712VL
            house_number: "46"
            street_name: Noorderhaven
            city: Groningen
            house_number_addition: "``"
            customer: 4482
            active: true
            lat: 53.219708
            lng: 6.558785
            country: Netherlands
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    JWTResponseExample:
      summary: JWT token
      value:
        data:
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
    AttachableResponseExample:
      summary: Attachable document linked to attachable category
      value:
        data:
          customer_id: 2
          attachable_category_id: 2
          parent_type: null
          parent_id: null
          child_type: 'document'
          child_id: 123
          parent_category: 1
          visible_for_customer: false
          created_by_type: 'user'
          created_by_id: 2
    AttachableBreadcrumbsResponseExample:
      summary: Attachable breadcrumbs to linked entity
      value:
        data:
          id: 123
          success: true
          category:
            name: 'Hypotheken'
          customer:
            full_name: 'A.B. van der Test'
            link: 'https://test.ddat.nl/customer/3/dashboard'
          attachable_category:
            name: 'Identificatie'
          parent_instance:
            id: 5
            customer_id: 1
            hypotheeknummer: "12345678"
            koopsom: 250000
            onderpandsgegevens: Hoofdstraat 1, Hoofdstad
            redenHypotheek: Bestaande bouw
            hoofdsomHypotheek: 100000
            hypotheciareInschrijving: "150000"
            taxateur_id: 1
    PaginatedAttachablesExample:
      summary: Paginated attachables
      value:
        data:
          - customer_id: 2
            attachable_category_id: 2
            parent_type: null
            parent_id: null
            child_type: 'document'
            child_id: 123
            parent_category: 1
            visible_for_customer: false
            created_by_type: 'user'
            created_by_id: 2
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    CountryExample:
      summary: Country
      value:
        data:
          id: 1234
          code: NL
          name: Nederland
    PaginatedCountriesExample:
      summary: Paginated countries
      value:
        data:
          - id: 1234
            code: NL
            name: Nederland
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    CustomerBasicExample:
      summary: Customer basic scope
      description: An example response of the fields returned when using the `customer:basic` scope
      value:
        data:
          id: 1234
          full_name: AB de Vries (Albert)
          initials: AB
          first_name: Albert
          suffix: de
          last_name: Vries
          passed_away: false
          passed_away_at: null
          sex: 1
          date_of_birth: "1959-06-18T00:00:00+01:00"
    CustomerWithIncludesExample:
      summary: Customer with includes
      description: An example response when all includes are requested
      value:
        data:
          id: 123
          full_name: J Modaal (Jan)
          initials: J
          first_name: Jan
          suffix: null
          last_name: Modaal
          passed_away: false
          passed_away_at: null
          sex: 1
          date_of_birth: "1959-06-18T00:00:00+01:00"
          current_visit_customer_property:
            data:
              id: 123
              customer_id: 123
              property_id: 456
              registration_date: "2020-08-23T12:00:00+02:00"
              municipality_registration_date: "2020-08-28T12:00:00+02:00"
              transaction_date: "2020-08-23T12:00:00+02:00"
              owns_property: false
              is_current: true
              percentage_owner: 50
              address_type: "visit"
              property_purpose: "keep_living"
              living_together: true
              contract_owner: null
              for_sale_since: null
              sold_since: null
          current_mail_customer_property:
            data:
              id: 124
              customer_id: 123
              property_id: 456
              registration_date: "2020-08-23T12:00:00+02:00"
              municipality_registration_date: "2020-08-28T12:00:00+02:00"
              transaction_date: "2020-08-23T12:00:00+02:00"
              owns_property: true
              is_current: true
              percentage_owner: 50
              address_type: "mail"
              property_purpose: "keep_living"
              living_together: true
              contract_owner: null
              for_sale_since: null
              sold_since: null
          partner:
            data:
              id: 124
              full_name: J Modaal (Jannie)
              initials: J
              first_name: Jan
              suffix: null
              last_name: Modaal
              passed_away: false
              passed_away_at: null
              sex: 0
              date_of_birth: "1960-01-10T00:00:00+01:00"
    CustomerContactExample:
      summary: Customer basic and contact scopes
      description: An example response of the fields returned when using the `customer:basic` and `customer:contact` scopes
      value:
        data:
          id: 1234
          full_name: J Modaal (Jan)
          initials: J
          first_name: Jan
          suffix: null
          last_name: Modaal
          passed_away: false
          passed_away_at: null
          sex: 1
          date_of_birth: "1959-06-18T00:00:00+01:00"
          email_address: "ab.de.vries@test.nl"
          phone: "0512345678"
          mobile: "0612345678"
          phone_work: "0512345678"
    CustomerFullExample:
      summary: Customer basic, contact and full scopes
      description: An example response of the fields returned when using the `customer:basic`, `customer:contact` and `customer:full` scopes
      value:
        data:
          id: 1234
          full_name: J Modaal (Jan)
          initials: J
          first_name: Jan
          suffix: null
          last_name: Modaal
          passed_away: false
          passed_away_at: null
          sex: 1
          date_of_birth: "1959-06-18T00:00:00+01:00"
          email_address: "ab.de.vries@test.nl"
          phone: "0512345678"
          mobile: "0612345678"
          phone_work: "0512345678"
          title: 'Beste '
          salutation: 1
          smoking: false
          parent_id: null
          secondary_parent_id: null
          partner_id: null
          advisor_id: 1234
          account_manager_id: 1235
          office_id: 1234
          customer_lead_status_id: null
          nationality_country_id: 184
          country_of_birth_id: 184
          type: 1
          house_owned: true
          property_value: 123456
          tax_return_is_provided: true
          employer: "DossierData"
          position: "Software engineer"
          notes: "Private internal notes, e.g. sensitive conversation topics"
          mailing_enabled: true
          account_number: '123654789'
          iban: 'NL91ABNA0417164300'
          payroll: 12345
          studies: false
          non_resident: null
          education_level: 'higher_proffesional'
          disability_discount_years: 12
          married_before: false
          place_of_birth: 'Groningen'
          birth_name: 'Jong'
          birth_name_affix: 'de'
          gross_annual_employment_pension_amount: 12345
          gross_annual_annuity_pension_amount: 12345
          gross_annual_partner_pension_amount: 12345
          salary: 12345
          salary_date: "2019-11-30T00:00:00+01:00"
          retirement_income: 12345
          retirement_income_date: "2019-11-30T00:00:00+01:00"
          marital_status: 0
          marital_date: null
          marriage_dissolved_type: null
          marriage_dissolved_at: null
          customer_since: "2019-11-30T00:00:00+01:00"
          status_changed_at: "2019-11-30T00:00:00+01:00"
          retirement_date: "2026-06-18T00:00:00+01:00"
          last_opened_date: "2019-12-01T00:00:00+01:00"
    PaginatedCustomersBasicScopeExample:
      summary: Paginated customers basic scope
      description: An example response of the fields returned when using the `customer:basic` scope
      value:
        data:
          - id: 1234
            full_name: J Modaal (Jan)
            initials: J
            first_name: Jan
            suffix: null
            last_name: Modaal
            passed_away: false
            passed_away_at: null
            sex: 1
            date_of_birth: "1959-06-18T00:00:00+01:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    PaginatedCustomersBasicAndContactScopeExample:
      summary: Paginated customers basic and contact scopes
      description: An example response of the fields returned when using the `customer:basic` and `customer:contact` scopes
      value:
        data:
          - id: 1234
            full_name: J Modaal (Jan)
            initials: J
            first_name: Jan
            suffix: null
            last_name: Modaal
            passed_away: false
            passed_away_at: null
            sex: 1
            date_of_birth: "1959-06-18T00:00:00+01:00"
            email_address: "ab.de.vries@test.nl"
            phone: "0512345678"
            mobile: "0612345678"
            phone_work: "0512345678"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    PaginatedCustomersFullScopeExample:
      summary: Paginated customers basic, contact and full scopes
      description: An example response of the fields returned when using the `customer:basic`, `customer:contact` and `customer:full` scopes
      value:
        data:
          - id: 1234
            full_name: J Modaal (Jan)
            initials: J
            first_name: Jan
            suffix: null
            last_name: Modaal
            passed_away: false
            passed_away_at: null
            sex: 1
            date_of_birth: "1959-06-18T00:00:00+01:00"
            email_address: "ab.de.vries@test.nl"
            phone: "0512345678"
            mobile: "0612345678"
            phone_work: "0512345678"
            title: 'Beste '
            salutation: 1
            smoking: false
            parent_id: null
            secondary_parent_id: null
            partner_id: null
            advisor_id: 1234
            account_manager_id: 1235
            office_id: 1234
            customer_lead_status_id: null
            nationality_country_id: 184
            country_of_birth_id: 184
            type: 1
            house_owned: true
            property_value: 123456
            tax_return_is_provided: true
            employer: "DossierData"
            position: "Software engineer"
            notes: "Private internal notes, e.g. sensitive conversation topics"
            mailing_enabled: true
            account_number: '123654789'
            iban: 'NL91ABNA0417164300'
            payroll: 12345
            studies: false
            non_resident: null
            education_level: 'higher_proffesional'
            disability_discount_years: 12
            married_before: false
            place_of_birth: 'Groningen'
            birth_name: 'Jong'
            birth_name_affix: 'de'
            gross_annual_employment_pension_amount: 12345
            gross_annual_annuity_pension_amount: 12345
            gross_annual_partner_pension_amount: 12345
            salary: 12345
            salary_date: "2019-11-30T00:00:00+01:00"
            retirement_income: 12345
            retirement_income_date: "2019-11-30T00:00:00+01:00"
            marital_status: 0
            marital_date: null
            marriage_dissolved_type: null
            marriage_dissolved_at: null
            customer_since: "2019-11-30T00:00:00+01:00"
            status_changed_at: "2019-11-30T00:00:00+01:00"
            retirement_date: "2026-06-18T00:00:00+01:00"
            last_opened_date: "2019-12-01T00:00:00+01:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    DossierResponseExample:
      summary: Findesk dossier
      value:
        data:
          uuid: "39b304f1-051e-412c-94cb-71f46892d455"
          customer_id: "1234"
          status: 1
    PaginatedDossiersResponseExample:
      summary: Paginated Findesk dossiers
      value:
        data:
          - uuid: "39b304f1-051e-412c-94cb-71f46892d455"
            customer_id: "1234"
            status: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    EmailAccountResponseExample:
      summary: Email account
      value:
        data:
          name: John Doe
          address: test@test.nl
          host: imap.gmail.com
          port: 143
          username: test@test.nl
          validate_cert: false
          encryption: "0"
          signature: Yours truly
          sync_enabled: false
          synced_at: 01/01/2018
          locked: false
          auto_match: false
          auto_process: false
          process_email_account_folder_id: 0
    PaginatedEmailAccountsResponseExample:
      summary: Paginated email accounts
      value:
        data:
          - name: John Doe
            address: test@test.nl
            host: imap.gmail.com
            port: 143
            username: test@test.nl
            validate_cert: false
            encryption: "0"
            signature: Yours truly
            sync_enabled: false
            synced_at: 01/01/2018
            locked: false
            auto_match: false
            auto_process: false
            process_email_account_folder_id: 0
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    LetterResponseExample:
      summary: Letter
      value:
        data:
          name: Test letter
          address: Test
          content: Test
          customer_id: 1
          user_id: 1
          for_instance_class: 1
          for_instance_id: 1
          category_id: 1
          template_id: 1
    PaginatedLettersExample:
      summary: Paginated letters
      value:
        data:
          - name: Test letter
            address: Test
            content: Test
            customer_id: 1
            user_id: 1
            for_instance_class: 1
            for_instance_id: 1
            category_id: 1
            template_id: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    ProductLabelExample:
      summary: Product label
      value:
        data:
          id: 1
          tag: label
          name: The description of the label
          product_category: customer
          color: f44336
    PaginatedProductLabelsExample:
      summary: Paginated product labels
      value:
        data:
          - id: 1
            tag: label
            name: The description of the label
            product_category: customer
            color: f44336
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    LockResponseExample:
      summary: Lock
      value:
        data:
          lockable_type: customer
          lockable_id: 1
          user_id: 1
    PaginatedLocksResponseExample:
      summary: Paginated locks
      value:
        data:
          - lockable_type: customer
            lockable_id: 1
            user_id: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    MortgageResponseExample:
      summary: Mortgage
      value:
        data:
          id: 1
          customer_id: 1
          hypotheeknummer: "12345678"
          koopsom: 250000
          onderpandsgegevens: Hoofdstraat 1, Hoofdstad
          redenHypotheek: Bestaande bouw
          hoofdsomHypotheek: 100000
          hypotheciareInschrijving: "150000"
          taxateur_id: 1
          marktwaarde: 250000
          datumTaxatie: 01-01-2018
          wozWaarde: 250000
          wozDatum: 01-01-2018
          totaalSom: 0
          bouwdepot: "25000"
          notaris_id: 1
          passeerdatum: 01-01-2018
          verkopendMakelaar_id: 1
          geldverstrekker_id: 1
          label_id: 1
          nhg: true
          rate: 1
          rangorde: 1
          status: 1
          getekend: 01-01-2018
          voor_verlenging: 01-01-2018
          na_verlening: 01-01-2018
          financiering: 01-01-2018
          bankgarantie: 01-01-20184
          passeerdatumVoortgang: 01-01-2018
          collateral_address: Teststraat
          collateral_city: Teststad
          collateral_postcode: 9123HH
          collateral_housenumber: "61"
          collateral_county: Netherlands
          restantHoofdsom: 500000
          executiewaarde: 100000
          type_woning: 1
          offerteNummer: 100
          datumAanvraag: 01-01-2018
          datumOfferte: 01-01-2018
          datumGeldigheidOfferte: 01-01-2018
          datumOfferteGetekend: 01-01-2018
          vovVoorVerbouwing: 200000
          vovNaVerbouwing: 250000
          ewVoorVerbouwing: 150000
          ewNaVerbouwing: 175000
          trackingNumber: 1
          collateral_addition: A
          purchasing_broker_id: 1
          validity_unsigned_offer_date: 01-01-2018
          validity_signed_offer_date: 01-01-2018
          end_financing_reservation_date: 401-01-2018
          has_bank_guarantee_date: 01-01-2018
          bank_guarantee_date: 01-01-2018
          mortgage_property_id: 1
          financier_agency_id: 1
          arrangement_type: 1
          existing_mortgage_number: "1"
          own_resources_amount: 1
          mutation_code: 1
          is_property_purchase: false
          bank_guarantee_costs: 50000
          net_consultancy_costs: 50000
          mortgage_deed_cost_specification: 5000
          national_mortgage_guarantee_costs: 5000
          fine_interest: 1
          loan_type: "14"
          secondary_customer_id: 1
          loan_to_value: 1
          risk_class: 1
          risk_class_type: 1
    PaginatedMortgagesResponseExample:
      summary: Paginated mortgages
      value:
        data:
          - id: 1
            customer_id: 1
            hypotheeknummer: "12345678"
            koopsom: 250000
            onderpandsgegevens: Hoofdstraat 1, Hoofdstad
            redenHypotheek: Bestaande bouw
            hoofdsomHypotheek: 100000
            hypotheciareInschrijving: "150000"
            taxateur_id: 1
            marktwaarde: 250000
            datumTaxatie: 01-01-2018
            wozWaarde: 250000
            wozDatum: 01-01-2018
            totaalSom: 0
            bouwdepot: "25000"
            notaris_id: 1
            passeerdatum: 01-01-2018
            verkopendMakelaar_id: 1
            geldverstrekker_id: 1
            label_id: 1
            nhg: true
            rate: 1
            rangorde: 1
            status: 1
            getekend: 01-01-2018
            voor_verlenging: 01-01-2018
            na_verlening: 01-01-2018
            financiering: 01-01-2018
            bankgarantie: 01-01-20184
            passeerdatumVoortgang: 01-01-2018
            collateral_address: Teststraat
            collateral_city: Teststad
            collateral_postcode: 9123HH
            collateral_housenumber: "61"
            collateral_county: Netherlands
            restantHoofdsom: 500000
            executiewaarde: 100000
            type_woning: 1
            offerteNummer: 100
            datumAanvraag: 01-01-2018
            datumOfferte: 01-01-2018
            datumGeldigheidOfferte: 01-01-2018
            datumOfferteGetekend: 01-01-2018
            vovVoorVerbouwing: 200000
            vovNaVerbouwing: 250000
            ewVoorVerbouwing: 150000
            ewNaVerbouwing: 175000
            trackingNumber: 1
            collateral_addition: A
            purchasing_broker_id: 1
            validity_unsigned_offer_date: 01-01-2018
            validity_signed_offer_date: 01-01-2018
            end_financing_reservation_date: 401-01-2018
            has_bank_guarantee_date: 01-01-2018
            bank_guarantee_date: 01-01-2018
            mortgage_property_id: 1
            financier_agency_id: 1
            arrangement_type: 1
            existing_mortgage_number: "1"
            own_resources_amount: 1
            mutation_code: 1
            is_property_purchase: false
            bank_guarantee_costs: 50000
            net_consultancy_costs: 50000
            mortgage_deed_cost_specification: 5000
            national_mortgage_guarantee_costs: 5000
            fine_interest: 1
            loan_type: "14"
            secondary_customer_id: 1
            loan_to_value: 1
            risk_class: 1
            risk_class_type: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    MortgagePartResponseExample:
      summary: Mortgage part
      value:
        data:
          - mortgage_id: 1
            hypotheeknummer: "1"
            leningdeelnummer: "1"
            soortLening: lening
            hoofdsom: 150000
            begindatum: 01-01-2018
            einddatum: 01-01-2019
            rente: 4
            rentevasteperiode: "10"
            einddatumRentevast: 01-01-2019
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
            begindatumRentevast: 2018-01-01
            renteType: 1
            duur: 360
            hypotheekType: 1
            afsluitprovisie: 0
            bedenktijd: false
            bedenktijdStartDatum: 2018-01-01
            type: 2
            agency_code: "1"
            tax_box_type: 3
            repayment_type: 1
            interest_agreement_type: 1
            interest_cooling_off_period_type: 1
            interest_cooling_off_period_in_months: 1
            payment_term: 1
            consumptive_percentage: 1
            consumptive_amount: 1
            national_mortgage_guarantee: true
            coverage_percentage: 1
            rate_based_on: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    PaginatedMortgagePartsResponseExample:
      summary: Paginated mortgage parts
      value:
        data:
          - mortgage_id: 1
            hypotheeknummer: "1"
            leningdeelnummer: "1"
            soortLening: lening
            hoofdsom: 150000
            begindatum: 01-01-2018
            einddatum: 01-01-2019
            rente: 4
            rentevasteperiode: "10"
            einddatumRentevast: 01-01-2019
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
            begindatumRentevast: 2018-01-01
            renteType: 1
            duur: 360
            hypotheekType: 1
            afsluitprovisie: 0
            bedenktijd: false
            bedenktijdStartDatum: 2018-01-01
            type: 2
            agency_code: "1"
            tax_box_type: 3
            repayment_type: 1
            interest_agreement_type: 1
            interest_cooling_off_period_type: 1
            interest_cooling_off_period_in_months: 1
            payment_term: 1
            consumptive_percentage: 1
            consumptive_amount: 1
            national_mortgage_guarantee: true
            coverage_percentage: 1
            rate_based_on: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    MortgageProgressResponseExample:
      summary: Mortgage progress
      value:
        data:
          id: 1
          mortgage_id: 1
          name: Testverklaring
          sent: true
          received: true
          completed: true
          comment: Comment
          date: 01-01-2018
          created_at: "2019-10-25T12:00:00+02:00"
          updated_at: "2019-10-25T13:00:00+02:00"
    PaginatedMortgageProgressResponseExample:
      summary: Paginated mortgage progress
      value:
        data:
          - id: 1
            mortgage_id: 1
            name: Testverklaring
            sent: true
            received: true
            completed: true
            comment: Comment
            date: 01-01-2018
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    DamageExample:
      value:
        data:
          customer_id: 1
          damage_number: "700004"
          licenseplate: AA-BB-12
          policy_id: 564
          insurance_branche_code: 0
          policy_contractNumber: "702519615"
          insurance_agency_id: 0
          settled: true
          date: 2008-11-12
          blame: true
          cause: Letselschade, oorzaak onbekend
          notes: Notities
          agency_id: 8
          agency_contact_id: 0
          agency_contact: Jan Modaal
          agency_phone: "0612345678"
          agency_emailaddress: test@test.nl
          external_number: "0612345678"
          wa: 0
          casco: 500
          deductible: 200
          garage_id: 1
          garage_contact_id: 1
          user_id: 1
          trackingNumber: "5"
          expert_id: 1
          expert_case_number: "1"
          pay_to: 1
          status: 1
          wa_at: "1"
          casco_at: "1"
          deductible_at: "1"
          estimated: 1
    PaginatedDamagesExample:
      value:
        data:
          - customer_id: 1
            damage_number: "700004"
            licenseplate: AA-BB-12
            policy_id: 564
            insurance_branche_code: 0
            policy_contractNumber: "702519615"
            insurance_agency_id: 0
            settled: true
            date: 2008-11-12
            blame: true
            cause: Letselschade, oorzaak onbekend
            notes: Notities
            agency_id: 8
            agency_contact_id: 0
            agency_contact: Jan Modaal
            agency_phone: "0612345678"
            agency_emailaddress: test@test.nl
            external_number: "0612345678"
            wa: 0
            casco: 500
            deductible: 200
            garage_id: 1
            garage_contact_id: 1
            user_id: 1
            trackingNumber: "5"
            expert_id: 1
            expert_case_number: "1"
            pay_to: 1
            status: 1
            wa_at: "1"
            casco_at: "1"
            deductible_at: "1"
            estimated: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    DocumentExample:
      value:
        data:
          name: Testverklaring voor testverzekering
          type: Microsoft Outlook
          mime_type: application/pdf
          customer_id: 1
          documentcategory_id: 1
          extension: pdf
          migrated: true
          filesize: 1000
          decoded: true
          user_id: 1
    PaginatedDocumentsExample:
      value:
        data:
          - name: Testverklaring voor testverzekering
            type: Microsoft Outlook
            mime_type: application/pdf
            customer_id: 1
            documentcategory_id: 1
            extension: pdf
            migrated: true
            filesize: 1000
            decoded: true
            user_id: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    EmailResponseExample:
      summary: Email
      value:
        data:
          id: 1
          subject: 'Subject of the email'
          from: 'from@domain.tld'
          to: 'to@domain.tld'
          cc: 'cc@domain.tld'
          bcc: null
          morph_class: 'email'
          category_id: null
          date: "2021-08-23T12:00:00+02:00"
          message_id: 'cc520d6e5f4d6cdc10aaa96c83a6c259@swift.generated'
          references: null
          in_reply_to: null
          size: 89765
          user_id: 456
          customer_id: 123
          template_id: null
          parent_id: null
          name: 'How the email is displayed in the application (by default filled with subject)'
          has_attachment: true
          status: true
          sent: false
          received: true
          unmatched: false
          processed: true
          processed_by_id: 123
          email_account_id: 123
          email_account_folder_id: 123
    PaginatedEmailsResponseExample:
      summary: Paginated emails
      value:
        data:
          - id: 1
            subject: 'Subject of the email'
            from: 'from@domain.tld'
            to: 'to@domain.tld'
            cc: 'cc@domain.tld'
            bcc: null
            morph_class: 'email'
            category_id: null
            date: "2021-08-23T12:00:00+02:00"
            message_id: 'cc520d6e5f4d6cdc10aaa96c83a6c259@swift.generated'
            references: null
            in_reply_to: null
            size: 89765
            user_id: 456
            customer_id: 123
            template_id: null
            parent_id: null
            name: 'How the email is displayed in the application (by default filled with subject)'
            has_attachment: true
            status: true
            sent: false
            received: true
            unmatched: false
            processed: true
            processed_by_id: 123
            email_account_id: 123
            email_account_folder_id: 123
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    TemplateExample:
      summary: Template
      value:
        data:
          id: 4
          title: Template
          nameInSystem: Test template
          content: Test content
          type: 1
          primaryMail: test@test.nl
          category: 1
          created_at: "2019-10-25T12:00:00+02:00"
          updated_at: "2019-10-25T13:00:00+02:00"
          deleted_at: "2019-10-25T14:00:00+02:00"
          agency_id: 1
    PaginatedTemplatesExample:
      summary: Paginated templates
      value:
        data:
          - id: 4
            title: Template
            nameInSystem: Test template
            content: Test content
            type: 1
            primaryMail: test@test.nl
            category: 1
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
            deleted_at: "2019-10-25T14:00:00+02:00"
            agency_id: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    NoteResponseExample:
      summary: Note
      value:
        data:
          id: 1
          title: Notitie
          user_id: 1
          content: Call was made by customer XXX at 13:48
          datetime: "2019-10-25T12:00:00+02:00"
          category: 1
          customer_id: 1234
          created_at: "2019-10-25T12:00:00+02:00"
          updated_at: "2019-10-25T13:00:00+02:00"
          deleted_at: "2019-10-25T14:00:00+02:00"
    PaginatedNotesResponseExample:
      summary: Paginated notes
      value:
        data:
          - id: 1
            title: Notitie
            user_id: 1
            content: Call was made by customer XXX at 13:48
            datetime: "2019-10-25T12:00:00+02:00"
            category: 1
            customer_id: 1234
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
            deleted_at: "2019-10-25T14:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    SignalResponseExample:
      summary: Signal
      value:
        data:
          - id: 1
            signal_query_id: 1
            customer_id: 1
            status: 1
            snoozed_until: 01-01-2018 12:00:00
            comment: test
            finished_by: 1
            finished_at: 01-01-2018 12:00:00
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    PaginatedSignalsResponseExample:
      summary: Paginated signals
      value:
        data:
          - id: 1
            signal_query_id: 1
            customer_id: 1
            status: 1
            snoozed_until: 01-01-2018 12:00:00
            comment: test
            finished_by: 1
            finished_at: 01-01-2018 12:00:00
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    AccountResponseExample:
      summary: Account
      value:
        data:
          id: 1
          account_type_id: 4
          customer_id: 1234
          joint_id: 1235
          active: true
          primary: true
          number: "123456789"
          description: "Description"
          created_at: "2019-10-25T12:00:00+02:00"
          updated_at: "2019-10-25T13:00:00+02:00"
    PaginatedAccountsResponseExample:
      summary: Paginated accounts
      value:
        data:
          - id: 1
            account_type_id: 4
            customer_id: 1234
            joint_id: 1235
            active: true
            number: "4"
            description: "4"
            primary: true
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    OfficeResponseExample:
      summary: Office
      value:
        data:
          - id: 1
            name: "1"
            owner_id: 1
            code: "1"
            phone: "1"
            postcode: "1"
            houseNumber: "1"
            streetName: "1"
            city: "1"
            houseNumberAddition: "1"
            email: "1"
            website: "1"
    PaginatedOfficesResponseExample:
      summary: Paginated offices
      value:
        data:
          - id: 1
            name: "1"
            owner_id: 1
            code: "1"
            phone: "1"
            postcode: "1"
            houseNumber: "1"
            streetName: "1"
            city: "1"
            houseNumberAddition: "1"
            email: "1"
            website: "1"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    UserResponseExample:
      summary: User
      value:
        data:
          - id: 1
            username: "lucas"
            email: "lucas@dossierdata.nl"
            first_name: "Lucas"
            last_name: "van der Have"
            fullname: "Lucas van der Have"
            preferred_office_id: 1
            active: true
    PaginatedUsersResponseExample:
      summary: Paginated users
      value:
        data:
          - id: 1
            username: "lucas"
            email: "lucas@dossierdata.nl"
            first_name: "Lucas"
            last_name: "van der Have"
            fullname: "Lucas van der Have"
            preferred_office_id: 1
            active: true
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    SearchResponseExample:
      value:
        data:
          - id: 4
            name: Test
            content: test content
            user_id: 1
            public: true
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
    PaginatedSearchesResponseExample:
      value:
        data:
          - id: 4
            name: Test
            content: test content
            user_id: 1
            public: true
            created_at: "2019-10-25T12:00:00+02:00"
            updated_at: "2019-10-25T13:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    AXMessageResponseExample:
      value:
        data:
          id: 1
          version: "17.0"
          status: 1
          user_id: 1
          customer_id: 1
          updated_at: "2019-10-25T13:00:00+02:00"
    PaginatedAXMessagesExample:
      value:
        data:
          id: 1
          version: "17.0"
          status: 1
          user_id: 1
          customer_id: 1
          updated_at: "2019-10-25T13:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    TaskResponseExample:
      summary: Task
      value:
        data:
          id: 1
          category_id: 1
          status: 0
          type: 20
          priority: 1
          user_id: 1
          finished_by: null
          customer_id: 1234
          content: Mortgage pass date
          description: Check if everything proceeded correctly
          date: 2019-01-30T12:00:00+02:00
          finished_at: 2019-01-30T12:00:00+02:00
    PaginatedTasksResponseExample:
      summary: Paginated tasks
      value:
        data:
          - id: 1
            category_id: 1
            status: 0
            type: 20
            priority: 1
            user_id: 1
            finished_by: null
            customer_id: 1234
            content: Mortgage pass date
            description: Check if everything proceeded correctly
            date: 2019-01-30T12:00:00+02:00
            finished_at: 2019-01-30T12:00:00+02:00
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    CalendarResponseExample:
      summary: Calendar
      value:
        data:
          id: 1
          name: My calendar
          user_id: 1
    PaginatedCalendarsExample:
      summary: Paginated calendars
      value:
        data:
          - id: 1
            name: My calendar
            user_id: 1
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    CalendarEventResponseExample:
      summary: Calendar event
      value:
        data:
          id: 1
          calendar_id: 1
          customer_id: 1234
          description: My event
          summary: Detailed event description
          location: The location of the event
          time_start: "2019-01-01 12:00:00"
          time_end: "2019-01-02 12:00:00"
    PaginatedCalendarEventsResponseExample:
      summary: Paginated calendar events
      value:
        data:
          - id: 1
            calendar_id: 1
            customer_id: 1234
            description: My event
            summary: Detailed event description
            location: The location of the event
            time_start: '2019-01-01 12:00:00+02:00'
            time_end: '2019-01-02 12:00:00+02:00'
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    PortalInvitationExample:
      summary: Portal invitation
      value:
        data:
          id: 1
          customer_id: 1234
          send_email: false
          type: 'full'
          token: 'oTicierOsEuGAlDruNDELERCulGABASkIDeClINERMiSPENTATErEvIGhANDIeLAIRepTORsycHawnSiBleDpieNGOUSCONiDIAS'
          valid_until: '2019-01-01 12:00:00+02:00'
          active: true
    PaginatedPortalInvitationsExample:
      summary: Paginated portal invitations
      value:
        data:
          - id: 1
            customer_id: 1234
            send_email: false
            type: 'full'
            token: 'oTicierOsEuGAlDruNDELERCulGABASkIDeClINERMiSPENTATErEvIGhANDIeLAIRepTORsycHawnSiBleDpieNGOUSCONiDIAS'
            valid_until: '2019-01-01 12:00:00+02:00'
            active: true
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    CustomerByRelationNumberExample:
      summary: Find customer by a relation number
      value:
        number: 'external_relation_number_123'
        relation_number_type_id: 1
    UserByRelationNumberExample:
      value:
        number: 'external_relation_number_123'
        relation_number_type_id: 1
    TasksByCustomersRequest:
      summary: Get tasks by customers
      value:
        customerIds: [ 1, 2, 3 ]
    TasksByCustomersAndCategoryRequest:
      summary: Get tasks by customer and category
      value:
        customerIds: [ 1, 2, 3 ]
        category: 1
    ActivateTasksRequestExample:
      summary: Activate tasks
      value:
        taskIds: [ 1, 2, 3 ]
        userId: 1
    ActivateTaskRequestExample:
      summary: Activate task
      value:
        userId: 1
    CompleteTasksRequestExample:
      summary: Complete tasks
      value:
        taskIds: [ 1, 2, 3 ]
        userId: 1
    CompleteTaskRequestExample:
      summary: Complete task
      value:
        userId: 1
    TasksByInstanceRequestExample:
      summary: Paginate tasks by instance
      value:
        instanceClass: 'policy'
        instanceId: 1
    RelationNumberStoreExample:
      value:
        number: 'external_relation_number_123'
        numberable_type: 'customer'
        numberable_id: '1234'
        relation_number_type_id: 1
    RelationNumberExample:
      value:
        data:
          id: 1
          number: 'external_relation_number_123'
          numberable_type: 'customer'
          numberable_id: '1234'
          relation_number_type_id: 1
          created_at: "2019-10-25T12:00:00+02:00"
          update_at: '2019-01-02 12:00:00+02:00'
    PaginatedRelationNumbersExample:
      value:
        data:
          - id: 1
            number: 'external_relation_number_123'
            numberable_type: 'customer'
            numberable_id: '1234'
            relation_number_type_id: 1
            created_at: "2019-10-25T12:00:00+02:00"
            update_at: '2019-01-02 12:00:00+02:00'
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    RelationNumberTypeExample:
      value:
        data:
          id: 1
          name: 'Relation number type name'
    PaginatedRelationNumberTypesExample:
      value:
        data:
          - id: 1
            name: 'Relation number type name'
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    UserDepartmentExample:
      summary: User department example
      value:
        data:
          id: 123
          name: "IT Department"
    UserDepartmentWithUsersIncludeExample:
      summary: User department with users include example
      value:
        data:
          id: 123
          name: "IT Department"
          users:
            data:
              - id: 1
                username: "lucas"
                email: "lucas@dossierdata.nl"
                first_name: "Lucas"
                last_name: "van der Have"
                fullname: "Lucas van der Have"
                preferred_office_id: 1
                active: true
    PaginatedUserDepartmentsExample:
      summary: 200 OK
      value:
        data:
          - id: 123
            name: "IT Department"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    PropertyResponseExample:
      summary: Property
      value:
        data:
          id: 123
          postal_code: "9712VL"
          number: "46"
          number_letter: "a"
          number_addition: "0001"
          formatted_number: "46a-0001"
          street: "Nooderhaven"
          city: "Groningen"
          municipality: "Groningen"
          country_id: 1
          country_name: "Nederland"
          lat: 1.234567
          lng: 2.345678
    PropertyWithJumbaExample:
      summary: Property with Jumba data
      value:
        data:
          id: 123
          postal_code: "9712VL"
          number: "46"
          number_letter: "a"
          number_addition: "0001"
          formatted_number: "46a-0001"
          street: "Nooderhaven"
          city: "Groningen"
          municipality: "Groningen"
          country_id: 1
          country_name: "Nederland"
          lat: 1.234567
          lng: 2.345678
          type: "single_family_home"
          real_estate_value: 450000
          market_value: 500000
          sale_price: 500000
          energy_label: "D"
          for_sale: true
          sold: false
          price: 550000
          construction_year: 1930
          surface: 200
          bedrooms: 3
          bathrooms: 2
          kitchens: 1
    PropertyWithIncludesExample:
      summary: Property with includes
      value:
        data:
          id: 123
          postal_code: "9712VL"
          number: "46"
          number_letter: "a"
          number_addition: "0001"
          formatted_number: "46a-0001"
          street: "Nooderhaven"
          city: "Groningen"
          municipality: "Groningen"
          country_id: 1
          country_name: "Nederland"
          lat: 1.234567
          lng: 2.345678
          country:
            data:
              $ref: '#/components/schemas/Country'
          customer_properties:
            data:
              - $ref: '#/components/schemas/CustomerProperty'
          mortgage_properties:
            data:
              - $ref: '#/components/schemas/MortgageProperty'
          mortgages:
            data:
              - $ref: '#/components/schemas/Mortgage'
          offices:
            data:
              - $ref: '#/components/schemas/Office'
          agency_properties:
            data:
              - $ref: '#/components/schemas/AgencyProperty'
          valuations:
            data:
              - $ref: '#/components/schemas/PropertyValuation'
          current_customer_properties:
            data:
              - $ref: '#/components/schemas/CustomerProperty'
          current_mortgage_properties:
            data:
              - $ref: '#/components/schemas/CustomerProperty'
    PaginatedPropertiesExample:
      summary: Paginated properties
      value:
        data:
          - id: 123
            postal_code: "9712VL"
            number: "46"
            number_letter: "a"
            number_addition: "0001"
            formatted_number: "46a-0001"
            street: "Nooderhaven"
            city: "Groningen"
            municipality: "Groningen"
            country_id: 1
            country_name: "Nederland"
            lat: 1.234567
            lng: 2.345678
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    CreatePropertyExample:
      summary: Create a basic property
      value:
        postal_code: "9712VL"
        number: "46"
        number_letter: "a"
        number_addition: "0001"
        street: "Nooderhaven"
        city: "Groningen"
        municipality: "Groningen"
        country_id: 1
        lat: 1.234567
        lng: 2.345678
    UpdatePropertyExample:
      summary: Update a property
      value:
        postal_code: "9712VL"
        number: "46"
        number_letter: "a"
        number_addition: "0001"
        street: "Nooderhaven"
        city: "Groningen"
        municipality: "Groningen"
        country_id: 1
        lat: 1.234567
        lng: 2.345678
    ModelNotFoundExample:
      summary: 404 Model not found
      value:
        success: false
        error:
          code: 404
          message: "No query results for model [MyModel] {optional additional data describing search parameters}"
    PropertySuggestionsExample:
      summary: Property suggestions
      value:
        data:
          - postal_code: "9712VL"
            number: "46"
            number_letter: null
            number_addition: null
            street: "Nooderhaven"
            city: "Groningen"
          - postal_code: "9712VL"
            number: "46"
            number_letter: "a"
            number_addition: null
            street: "Nooderhaven"
            city: "Groningen"
          - postal_code: "9712VL"
            number: "46"
            number_letter: "b"
            number_addition: null
            street: "Nooderhaven"
            city: "Groningen"
          - postal_code: "9712VL"
            number: "48"
            number_letter: null
            number_addition: null
            street: "Nooderhaven"
            city: "Groningen"
          - postal_code: "9712VL"
            number: "50"
            number_letter: null
            number_addition: null
            street: "Nooderhaven"
            city: "Groningen"
    PropertyByAddressRequestExample:
      summary: Property by postal code and house number
      value:
        data:
          postal_code: "9712VL"
          number: "46"
          number_letter: null
          number_addition: null
    CustomerPropertyResponseExample:
      summary: Customer property
      value:
        data:
          id: 123
          customer_id: 123
          property_id: 456
          registration_date: "2020-08-23T12:00:00+02:00"
          municipality_registration_date: "2020-08-28T12:00:00+02:00"
          transaction_date: "2020-08-23T12:00:00+02:00"
          owns_property: false
          is_current: false
          percentage_owner: 50
          address_type: "mail"
          property_purpose: "keep_living"
          living_together: true
          contract_owner: "main_customer"
          for_sale_since: "2021-07-23T12:00:00+02:00"
          sold_since: "2021-08-23T12:00:00+02:00"
    CustomerPropertyWithIncludesResponseExample:
      summary: Customer property with includes
      value:
        data:
          id: 123
          customer_id: 123
          property_id: 456
          registration_date: "2020-08-23T12:00:00+02:00"
          municipality_registration_date: "2020-08-28T12:00:00+02:00"
          transaction_date: "2020-08-23T12:00:00+02:00"
          owns_property: false
          is_current: false
          percentage_owner: 50
          address_type: "mail"
          property_purpose: "keep_living"
          living_together: true
          contract_owner: "main_customer"
          for_sale_since: "2021-07-23T12:00:00+02:00"
          sold_since: "2021-08-23T12:00:00+02:00"
          property:
            data:
              id: 456
              postal_code: "9712VL"
              number: "46"
              number_letter: "a"
              number_addition: "0001"
              formatted_number: "46a-0001"
              street: "Nooderhaven"
              city: "Groningen"
              municipality: "Groningen"
              country_id: 1
              country_name: "Nederland"
              lat: 1.234567
              lng: 2.345678
          customer:
            data:
              id: 123
              full_name: AB de Vries (Albert)
              initials: AB
              first_name: Albert
              suffix: de
              last_name: Vries
              passed_away: false
              passed_away_at: null
              sex: 1
              date_of_birth: "1959-06-18T00:00:00+01:00"
    PaginatedCustomerPropertiesResponseExample:
      summary: Paginated customer properties
      value:
        data:
          - id: 123
            customer_id: 123
            property_id: 456
            registration_date: "2020-08-23T12:00:00+02:00"
            municipality_registration_date: "2020-08-28T12:00:00+02:00"
            transaction_date: "2020-08-23T12:00:00+02:00"
            owns_property: false
            is_current: false
            percentage_owner: 50
            address_type: "mail"
            property_purpose: "keep_living"
            living_together: true
            contract_owner: "main_customer"
            for_sale_since: "2021-07-23T12:00:00+02:00"
            sold_since: "2021-08-23T12:00:00+02:00"
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    CreateBasicCustomerPropertyExample:
      summary: Create a basic customer property
      value:
        customer_id: 123
        property_id: 456
        is_current: true
        address_type: "mail"
    CreateCustomerPropertyExample:
      summary: Create a customer property with all fields
      value:
        customer_id: 123
        property_id: 456
        registration_date: "2021-08-23T12:00:00+02:00"
        transaction_date: null
        for_sale_since: null
        sold_since: null
        owns_property: true
        is_current: true
        percentage_owner: 50
        address_type: "mail"
    UpdateCustomerPropertyExample:
      summary: Update a customer property
      value:
        customer_id: 123
        property_id: 456
        registration_date: "2021-08-23T12:00:00+02:00"
        transaction_date: null
        for_sale_since: null
        sold_since: null
        owns_property: true
        is_current: true
        percentage_owner: 50
        address_type: "mail"
    HDNCompanyResponseExample:
      summary: A single HDN companies
      value:
        data:
          id: 123
          hdn_code: "AA"
          sender_name: "ABN Amro"
          receiver_name: "ABN Amro"
          is_sender: true
          is_receiver: true
          max_hdn_version: 21
          min_hdn_version: 16
    PaginatedHDNCompaniesResponseExample:
      summary: Paginated HDN companies
      value:
        data:
          - id: 123
            hdn_code: "AA"
            sender_name: "ABN Amro"
            receiver_name: "ABN Amro"
            is_sender: true
            is_receiver: true
            max_hdn_version: 21
            min_hdn_version: 16
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    PaginatedHDNCompanyLabelsResponseExample:
      summary: Paginated HDN company labels
      value:
        data:
          - id: 345
            company_id: 1
            hdn_code: "AA"
            name: "ABN AMRO Woninghypotheek"
            product_id: 1
            max_hdn_version: 21
            min_hdn_version: 16
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    PaginatedHDNCompanyProductsResponseExample:
      summary: Paginated HDN company products
      value:
        data:
          - id: 345
            company_id: 1
            hdn_code: "AA"
            name: "ABN AMRO Annuïteiten hypotheek"
            product_id: 1
            max_hdn_version: 21
            min_hdn_version: 16
        meta:
          pagination:
            total: 1
            count: 1
            per_page: 15
            current: 1
            total_pages: 1
            links: [ ]
    GetHDNCompanyByHDNCodeRequestExample:
      summary: Find HDN company by HDN code
      value:
        hdn_code: "AA"
  parameters:
    PerPage:
      name: perPage
      in: query
      description: The maximum number of objects to return
      required: false
      example: "25"
      schema:
        type: integer
        default: 15
    Page:
      name: page
      in: query
      description: The page number
      required: false
      example: "1"
      schema:
        type: integer
        default: 1
    JsonHeader:
      name: Accept
      in: header
      description: Provide the desired response type. If this is not provided error messages might be rendered as a generic 500 html page.
      required: true
      example: application/json
      schema:
        type: string
        enum:
          - application/json
    AddressId:
      name: address_id
      in: path
      description: The id of the address
      required: true
      example: "1"
      schema:
        type: integer
    AttachableId:
      name: attachable_id
      in: path
      description: The id of the attachable
      required: true
      example: "1"
      schema:
        type: integer
    CountryId:
      name: country_id
      in: path
      description: The ID or of the country.
      required: true
      example: "1"
      schema:
        type: integer
    CustomerId:
      name: customer_id
      in: path
      description: The ID or of the customer.
      required: true
      example: "1"
      schema:
        type: integer
    CustomerIdOrUUId:
      name: customer_id_or_uuid
      in: path
      description: The ID or UUID of the customer.
      required: true
      example: "1"
      schema:
        type: string
    DepartmentId:
      name: department_id
      in: path
      description: The id of a user department
      required: true
      example: "1"
      schema:
        type: integer
    DossierId:
      name: dossier_id
      in: path
      description: The id of the dossier
      required: true
      example: "1"
      schema:
        type: integer
    EmailAccountId:
      name: emailAccount_id
      in: path
      description: The id of the emailaccount
      required: true
      example: "1"
      schema:
        type: integer
    LetterId:
      name: letter_id
      in: path
      description: The id of the letter
      required: true
      example: "1"
      schema:
        type: integer
    ProductLabelId:
      name: product_label_id
      in: path
      description: The id of the product label
      required: true
      example: "1"
      schema:
        type: integer
    LockId:
      name: lock_id
      in: path
      description: The id of the lock
      required: true
      example: "1"
      schema:
        type: integer
    MortgageId:
      name: mortgage_id
      in: path
      description: The id of the mortgage
      required: true
      example: "1"
      schema:
        type: integer
    MortgagePartId:
      name: mortgage_part_id
      in: path
      description: The id of the mortgagePart
      required: true
      example: "1"
      schema:
        type: integer
    MortgageProgressId:
      name: mortgage_progress_id
      in: path
      description: The id of the mortgageProgress
      required: true
      example: "1"
      schema:
        type: integer
    DamageId:
      name: damage_id
      in: path
      description: The id of the damage
      required: true
      example: "1"
      schema:
        type: integer
    DocumentId:
      name: document_id
      in: path
      description: The id of the document
      required: true
      example: "1"
      schema:
        type: integer
    EmailId:
      name: email_id
      in: path
      description: The id of the email
      required: true
      example: "1"
      schema:
        type: integer
    TemplateId:
      name: template_id
      in: path
      description: The id of the template
      required: true
      example: "1"
      schema:
        type: integer
    NoteId:
      name: note_id
      in: path
      description: The id of the note
      required: true
      example: "1"
      schema:
        type: integer
    SignalId:
      name: signal_id
      in: path
      description: The id of the signal
      required: true
      example: "1"
      schema:
        type: integer
    AccountId:
      name: account_id
      in: path
      description: The id of the account
      required: true
      example: "1"
      schema:
        type: integer
    OfficeId:
      name: office_id
      in: path
      description: The id of the office
      required: true
      example: "1"
      schema:
        type: integer
    UserId:
      name: user_id
      in: path
      description: The id of the user
      required: true
      example: "1"
      schema:
        type: integer
    UserDepartmentId:
      name: user_department_id
      in: path
      description: The id of the user department
      required: true
      example: "1"
      schema:
        type: integer
    UserDepartmentIncludes:
      name: include
      in: query
      description: The user department includes
      required: false
      example:
        - "users"
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true
    PortalInvitationId:
      name: portalInvitation_id
      in: path
      description: The id of the portal invitation
      required: true
      example: "1"
      schema:
        type: integer
    PortalInvitationToken:
      name: portalInvitation_token
      in: path
      description: The token of the portal invitation
      required: true
      example: "oTicierOsEuGAlDruNDELERCulGABASkIDeClINERMiSPENTATErEvIGhANDIeLAIRepTORsycHawnSiBleDpieNGOUSCONiDIAS"
      schema:
        type: string
    RelationNumberId:
      name: relationNumber_id
      in: path
      description: The id of the relation number
      required: true
      example: "1"
      schema:
        type: number
    RelationNumberTypeId:
      name: relationNumberType_id
      in: path
      description: The id of the relation number type
      required: true
      example: "1"
      schema:
        type: number
    SearchId:
      name: search_id
      in: path
      description: The id of the search
      required: true
      example: "1"
      schema:
        type: integer
    AXMessageId:
      name: ax_message_id
      in: path
      description: The id of the AX Message
      required: true
      example: "1"
      schema:
        type: integer
    TaskId:
      name: task_id
      in: path
      description: The id of the task
      required: true
      example: "1"
      schema:
        type: integer
    CalendarEventId:
      name: event_id
      in: path
      description: The id of the event
      required: true
      example: "1"
      schema:
        type: integer
    CalendarId:
      name: calendar_id
      in: path
      description: The id of the calendar
      required: true
      example: "1"
      schema:
        type: integer
    PropertyId:
      name: property_id
      in: path
      description: The id of the property
      required: true
      example: "1"
      schema:
        type: integer
    HDNCompanyId:
      name: hdn_company_id
      in: path
      description: The id of the HDN company
      required: true
      example: "1"
      schema:
        type: integer
    CustomerPropertyId:
      name: customer_property_id
      in: path
      description: The id of the customer property
      required: true
      example: "1"
      schema:
        type: integer
    CustomerPropertyIncludes:
      in: query
      name: includes[]
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - 'property'
            - 'customer'
            - 'customer_current_living_condition'
      description: If you've got access to the correct scopes the following relations can be included
    CustomerIncludes:
      in: query
      name: includes[]
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - 'current_visit_customer_property'
            - 'current_mail_customer_property'
            - 'partner'
      description: If you've got access to the correct scopes the following relations can be included
    PropertyIncludes:
      in: query
      name: includes[]
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - 'country'
            - 'customer_properties'
            - 'mortgage_properties'
            - 'mortgages'
            - 'offices'
            - 'agency_properties'
            - 'valuations'
            - 'current_customer_properties'
            - 'current_mortgage_properties'
      description: If you've got access to the correct scopes the following relations can be included