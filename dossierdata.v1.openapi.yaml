openapi: 3.0.0
info:
  title: DossierData API
  version: ""
  description: Welcome to the **DossierData API**. This API provides access to a all data
    from a tenant within DossierData.
paths:
  /protected:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                required:
                  - status
              examples:
                response:
                  value:
                    status: ok
        "400":
          description: If the request is missing input or parameters the following response
            is to be expected.
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_description:
                    type: string
              examples:
                response:
                  value:
                    error: invalid_request
                    error_description: The request is missing a required parameter, includes an
                      invalid parameter value, includes a parameter more than
                      once, or is otherwise malformed. Check the "%" parameter.
        "401":
          description: "If invalid credentials have been provided or you don't have access
            to this specific resource the following response is to be expected.
            "
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_description:
                    type: string
              examples:
                response:
                  value:
                    error: access_denied
                    error_description: The resource owner or authorization server denied the
                      request.
      summary: Query Example
      description: ""
      tags:
        - Authentication
      parameters:
        - name: token
          in: query
          description: ""
          required: true
          example: vr5HmMkzlxKE70W1y4MibiJUusZwZC25NOVBEx3BD1
          schema:
            type: string
  /oauth/authorize:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            text/html:
              examples:
                response:
                  value: |
                    Authorize page
        "302":
          description: Found
          headers:
            Location:
              schema:
                type: string
      summary: Authorize
      description: >-
        Load the authorization page.


        If the user is already logged in (this depends on if you takle cookies into account) you will get the autorization page.


        If the user is **NOT** logged in, you will be redirected to the login page after which you will be redirected back to

        this page.
      tags:
        - Authorization
      parameters:
        - name: client_id
          in: query
          description: Your OAuth client id.
          required: true
          example: d5fb86ec–60a0–49fe–9571–3615d74843ac
          schema:
            type: string
        - name: scope
          in: query
          description: The scopes you are requesting access for, comma separated.
          required: true
          example: customer:basic, customer:contact
          schema:
            type: string
        - name: redirect_uri
          in: query
          description: Your callback URL.
          required: true
          example: http://callback.url
          schema:
            type: string
        - name: response_type
          in: query
          description: Requested response type.
          required: true
          example: code
          schema:
            type: string
  /your_callback:
    get:
      responses:
        "200":
          description: OK
          headers: {}
      summary: Callback
      description: Getting the authorization code back to you so you can fetch an access
        token
      tags:
        - Authorization
      parameters:
        - name: code
          in: query
          description: The code to request your access token
          required: true
          example: a4dd64ffb43e6bfe16d47acfab1e68d9c7a28381
          schema:
            type: string
  /oauth/access_token#authorization_code:
    post:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Your new oauth access token
                  token_type:
                    type: string
                    description: The token type
                  expires_in:
                    type: number
                    description: The number of seconds this token is valid for
                  refresh_token:
                    type: string
                    description: The refresh token that can be used to request a new access
                      token when the old one expires or is about to expire.
              examples:
                response:
                  value:
                    access_token: A7NoRur7CJVbhRPGKjA2l4uCenFRgpR4klOgtMu0
                    token_type: Bearer
                    expires_in: 86400
                    refresh_token: 7jQTFMTE9ZVpu5CvHdYPQgIBwdynu53qlagx7uLK
        "400":
          description: If you don't have access to a scope or you passed an unknown or
            malformed scope the following response can be expected.
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_description:
                    type: string
              examples:
                response:
                  value:
                    error: invalid_scope
                    error_description: The requested scope is invalid, unknown, or malformed.
                      Check the "scope:example" scope.
        "401":
          description: If your client id or callback url is incorrect you'll receive this
            response
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_description:
                    type: string
              examples:
                response:
                  value:
                    error: invalid_client
                    error_description: Client authentication failed
      summary: Access token
      description: Requesting the oauth access token.
      tags:
        - Authorization
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description: Your client id
                client_secret:
                  type: string
                  description: Your client secret
                grant_type:
                  type: string
                  description: The grant type
                code:
                  type: string
                  description: The code from the previous request
                redirect_uri:
                  type: string
                  description: Your callback URL.
              required:
                - client_id
                - client_secret
                - grant_type
                - code
                - redirect_uri
              example:
                client_id: d5fb86ec-60a0-49fe-95710-3615d74843ac
                client_secret: 4d768389b2e9e9d5584a165204d72235c3c75401
                grant_type: authorization_code
                code: a4dd64ffb43e6bfe16d47acfab1e68d9c7a28381
                redirect_uri: http://callback.url
  /oauth/access_token#refresh_token:
    post:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Your new oauth access token
                  token_type:
                    type: string
                    description: The token type
                  expires_in:
                    type: number
                    description: The number of seconds this token is valid for
                  refresh_token:
                    type: string
                    description: The refresh token that can be used to request a new access
                      token when the old one expires or is about to expire.
              examples:
                response:
                  value:
                    access_token: A7NoRur7CJVbhRPGKjA2l4uCenFRgpR4klOgtMu0
                    token_type: Bearer
                    expires_in: 86400
                    refresh_token: 7jQTFMTE9ZVpu5CvHdYPQgIBwdynu53qlagx7uLK
        "400":
          description: If you don't have access to a scope or you passed an unknown or
            malformed scope the following response can be expected.
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_description:
                    type: string
              examples:
                response:
                  value:
                    error: invalid_scope
                    error_description: The requested scope is invalid, unknown, or malformed.
                      Check the "scope:example" scope.
        "401":
          description: If your client id or callback url is incorrect you'll receive this
            response
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_description:
                    type: string
              examples:
                response:
                  value:
                    error: invalid_client
                    error_description: Client authentication failed
      summary: Refresh Token
      description: Refreshing an oauth access token by the refresh token.
      tags:
        - Authorization
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: Specify the refresh grant type
                refresh_token:
                  type: string
                  description: The refresh token provided to you when you first requested
                    the access token.
              required:
                - grant_type
                - refresh_token
              example:
                grant_type: refresh_token
                refresh_token: 7jQTFMTE9ZVpu5CvHdYPQgIBwdynu53qlagx7uLK
  /address:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - type: 4
                        postcode: 9712VL
                        houseNumber: "46"
                        streetName: Noorderhaven
                        city: Groningen
                        houseNumberAddition: "``"
                        customer: 4482
                        active: true
                        lat: 53.219708
                        lng: 6.558785
                        country: Netherlands
                    meta:
                      $ref: '#/components/examples/PaginationExample'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: List
      description: Get a list of all Addresses.
      tags:
        - Addresses
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Addresses
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Address"
  "/address/{address_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Addresses
      parameters:
        - name: address_id
          in: path
          description: The id of an address
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Addresses
      parameters:
        - name: address_id
          in: path
          description: The id of an address
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Address"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Addresses
      parameters:
        - name: address_id
          in: path
          description: The id of an address
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /customer:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - initials: AB
                        firstName: Albert
                        suffix: de
                        lastName: Vries
                        dateOfBirth: "``"
                        phone: "0512345678"
                        mobile: "0612345678"
                        sex: "0"
                        emailaddress: ab.de.vries@test.nl
                        smoking: false
                        martialStatus: "0"
                        mariedBefore: true
                        office: 1
                        type: "1"
                        parent: 2
                        partner: 3
                        houseOwned: false
                        advisor: 1
                        employer: Rapide Internet
                        position: Positie
                        mailingEnabled: false
                        salary: 123456
                        title: 1
                        accountNumber: "``"
                        iban: NL 12 ABCD 012345678
                        businessname: Rapide Internet
                        businesstype: 1
                        kvkNumber: "123456789"
                        numberOfEmployees: 2
                        revenue: 123456
                        payroll: 123456
                        retirement_income: 123456
                        passed_away: true
                        passed_away_at: "null"
                        salary_date: "null"
                        retirement_income_date: "null"
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Customers.
      tags:
        - Customers
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Customers
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                initials:
                  type: string
                  description: Initials of the customer
                firstName:
                  type: string
                  description: FirstName of the customer
                suffix:
                  type: string
                  description: Suffix of the customer
                lastName:
                  type: string
                  description: LastName of the customer
                dateOfBirth:
                  type: string
                  description: Date of birth of the customer
                phone:
                  type: string
                  description: Phonenumber of the customer
                mobile:
                  type: string
                  description: Mobile phonenumber of the customer
                sex:
                  type: number
                  enum:
                    - 0
                    - 1
                  default: 0
                  description: |-
                    Sex of the customer

                    Gender enum:
                    0: Female, 1: Male
                emailaddress:
                  type: string
                  description: Emailaddress of the customer
                smoking:
                  type: boolean
                  description: Does the customer smoke?
                martialStatus:
                  type: number
                  enum:
                    - 0
                    - 1
                    - 2
                    - 3
                    - 4
                    - 5
                    - 6
                    - 7
                    - 8
                    - 9
                    - 10
                  default: 0
                  description: >-
                    Martial status of the customer


                    Marital status enum:

                    `0`: Alleenstaand, `1`: Gehuwd (gvg), `2`: Gehuwd (hv), `3`: Partnerregistratie (gvg), `4`: Partnerregistratie onder registratievoorwaarden, `5`: Samenwonend met samenlevingscontract, `6`: Samenwonend zonder samenlevingscontract, `7`: Gescheiden, `8`: Weduwe/Weduwenaar, `9`: Inwonend, `10`: Gehuwd volgens buitenlands recht
                mariedBefore:
                  type: boolean
                  description: Was the customer married befoer?
                office:
                  type: number
                  description: The office of the customer
                type:
                  type: number
                  enum:
                    - 1
                    - 2
                    - 3
                    - 4
                    - 5
                    - 6
                    - 7
                    - 8
                    - 9
                    - 10
                    - 11
                  default: 1
                  description: >-
                    The type of the customer


                    Customer type enum:

                    1: Particulier, 2: Aflopend, 3: Bank relatie, 4: Hypotheek relatie, 5: Prospect, 6: Totaalklant, 7: Vervallen, 8: Verzekeringsrelatie, 9: Zakelijke relatie, 10: Prospect Zakelijk, 11: Zakelijk vervallen,
                parent:
                  type: number
                  description: The parent customer_id of the customer
                partner:
                  type: number
                  description: The id of the partner
                houseOwned:
                  type: boolean
                  description: Does the customer own a house
                  default: false
                advisor:
                  type: number
                  description: Id of the advisor of the customer
                employer:
                  type: string
                  description: Employer of the customer
                position:
                  type: string
                  description: Position at company of the customer
                mailingEnabled:
                  type: boolean
                  description: Does the customer want to receive emails
                salary:
                  type: number
                  description: The salary of the customer
                title:
                  type: number
                  description: The title of the customer
                  default: 1
                accountNumber:
                  type: string
                  description: The account of the customer
                iban:
                  type: string
                  description: The iban of the customer
                businessname:
                  type: string
                  description: The name of the business of the customer
                businesstype:
                  type: number
                  description: The type of the business of the customer
                kvkNumber:
                  type: string
                  description: The kvk number of the customer
                numberOfEmployees:
                  type: number
                  description: The number of employees of the customer
                revenue:
                  type: number
                  description: The revenue of the customer
                payroll:
                  type: number
                  description: The payroll of the customer
                retirement_income:
                  type: number
                  description: Retirement income of the customer
                passed_away:
                  type: boolean
                  description: Did the customer pass away
                passed_away_at:
                  type: string
                  description: The date the customer passed away, format d/m/Y
                salary_date:
                  type: string
                  description: The date the customer gets their salary, format d/m/Y
                retirement_income_date:
                  type: string
                  description: The date the customer gets their retirement income, format
                    d/m/Y
              required:
                - firstName
                - lastName
                - dateOfBirth
              example:
                initials: AB
                firstName: Albert
                suffix: de
                lastName: Vries
                dateOfBirth: "``"
                phone: "0512345678"
                mobile: "0612345678"
                sex: 0
                emailaddress: ab.de.vries@test.nl
                smoking: false
                martialStatus: "0"
                mariedBefore: true
                office: 1
                type: "1"
                parent: 2
                partner: 3
                houseOwned: false
                advisor: 1
                employer: Rapide Internet
                position: Positie
                mailingEnabled: false
                salary: 123456
                title: 1
                accountNumber: "``"
                iban: NL 12 ABCD 012345678
                businessname: Rapide Internet
                businesstype: 1
                kvkNumber: "123456789"
                numberOfEmployees: 2
                revenue: 123456
                payroll: 123456
                retirement_income: 123456
                passed_away: true
                passed_away_at: "null"
                salary_date: "null"
                retirement_income_date: "null"
  /customer/lead:
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create lead
      description: ""
      tags:
        - Customers
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: FirstName of the customer, required if initials are not
                    provided
                initials:
                  type: string
                  description: Initials of the customer, required if first name is not
                    provided
                suffix:
                  type: string
                  description: Suffix of the customer
                lastName:
                  type: string
                  description: LastName of the customer
                emailaddress:
                  type: string
                  description: Email address of the customer
                dateOfBirth:
                  type: string
                  description: Date of birth of the customer, format d/m/Y
                status:
                  type: string
                  description: The status that you want to give this new lead. If the
                    status does not exist yet it will be created and attached to
                    this customer. You can filter your customers by this status
                    on the customer lead dashboard.
              required:
                - firstName
                - lastName
                - emailaddress
              example:
                firstName: Albert
                initials: AB
                suffix: de
                lastName: Vries
                emailaddress: ab.de.vries@test.nl
                dateOfBirth: 20/01/1985
                status: Nieuw
  "/customer/open/{customer_id_or_uuid}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Open
      description: Get URL to open dashboard of customer
      tags:
        - Customers
      parameters:
        - name: customer_id_or_uuid
          in: path
          description: The ID or UUID of a customer.
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /customer/mortgage_lead:
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create mortgage lead
      description: ""
      tags:
        - Customers
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: FirstName of the customer, required if initials are not
                    provided
                initials:
                  type: string
                  description: Initials of the customer, required if first name is not
                    provided
                suffix:
                  type: string
                  description: Suffix of the customer
                lastName:
                  type: string
                  description: LastName of the customer
                emailaddress:
                  type: string
                  description: Email address of the customer
                dateOfBirth:
                  type: string
                  description: Date of birth of the customer, format d/m/Y
                visitDate:
                  type: string
                  description: Last visit date of the customer, format d/m/Y
                dateOfTransfer:
                  type: string
                  description: The date of transfer for the mortgage (Datum overdracht),
                    format d/m/Y
                dateFundReserves:
                  type: string
                  description: The expiration date for the fund reserves (Datum
                    financieringsvoorbehoud), format d/m/Y
                dateBankGuarantee:
                  type: string
                  description: The expiration date for the bank guarantee (Datum
                    bankgarantie), format d/m/Y
                status:
                  type: string
                  description: The status that you want to give this new lead. If the
                    status does not exist yet it will be created and attached to
                    this customer. You can filter your customers by this status
                    on the customer lead dashboard.
              required:
                - firstName
                - lastName
                - emailaddress
              example:
                firstName: Albert
                initials: AB
                suffix: de
                lastName: Vries
                emailaddress: ab.de.vries@test.nl
                dateOfBirth: 20/01/1985
                visitDate: 20/01/1985
                dateOfTransfer: 20/01/1985
                dateFundReserves: 20/01/1985
                dateBankGuarantee: 20/01/1985
                status: Nieuw
  /customer/ax_message:
    post:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - initials: AB
                        firstName: Albert
                        suffix: de
                        lastName: Vries
                        dateOfBirth: "``"
                        phone: "0512345678"
                        mobile: "0612345678"
                        sex: "0"
                        emailaddress: ab.de.vries@test.nl
                        smoking: false
                        martialStatus: "0"
                        mariedBefore: true
                        office: 1
                        type: "1"
                        parent: 2
                        partner: 3
                        houseOwned: false
                        advisor: 1
                        employer: Rapide Internet
                        position: Positie
                        mailingEnabled: false
                        salary: 123456
                        title: 1
                        accountNumber: "``"
                        iban: NL 12 ABCD 012345678
                        businessname: Rapide Internet
                        businesstype: 1
                        kvkNumber: "123456789"
                        numberOfEmployees: 2
                        revenue: 123456
                        payroll: 123456
                        retirement_income: 123456
                        passed_away: true
                        passed_away_at: "null"
                        salary_date: "null"
                        retirement_income_date: "null"
                    meta:
                      $ref: '#/components/examples/PaginationExample'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Find
      description: ""
      tags:
        - Customers
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
  "/customer/{customer_id}/ax_message":
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of updated data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Update
      description: Update a Customer with all data from an AX Message.
      tags:
        - Customers
      parameters:
        - name: customer_id
          in: path
          description: The id of a customer
          required: true
          example: "1"
          schema:
            type: integer
  /dossier:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - uuid: 1
                        customer_id: "700004"
                        status: AA-BB-12
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Dossiers.
      tags:
        - Dossiers
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Dossiers
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Dossier"
  "/dossier/{dossier_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Dossiers
      parameters:
        - name: dossier_id
          in: path
          description: The id of the dossier
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Dossiers
      parameters:
        - name: dossier_id
          in: path
          description: The id of a dossier
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Dossier"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Dossiers
      parameters:
        - name: dossier_id
          in: path
          description: The id of the dossier
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /emailAccount:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - name: John Doe
                        address: test@test.nl
                        host: imap.gmail.com
                        port: 143
                        username: test@test.nl
                        validate_cert: false
                        encryption: "0"
                        signature: Yours truly
                        sync_enabled: false
                        synced_at: 01/01/2018
                        locked: false
                        auto_match: false
                        auto_process: false
                        process_email_account_folder_id: 0
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all EmailAccounts.
      tags:
        - EmailAccount
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - EmailAccount
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EmailAccount"
  "/emailAccount/{emailAccount_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - EmailAccount
      parameters:
        - name: emailAccount_id
          in: path
          description: The id of the emailaccount
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - EmailAccount
      parameters:
        - name: emailAccount_id
          in: path
          description: The id of an emailaccount
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EmailAccount"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - EmailAccount
      parameters:
        - name: emailAccount_id
          in: path
          description: The id of the emailaccount
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /letter:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - name: Test letter
                        address: Test
                        content: Test
                        customer_id: 1
                        user_id: 1
                        for_instance_class: 1
                        for_instance_id: 1
                        category_id: 1
                        template_id: 1
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Letters.
      tags:
        - Letters
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Letters
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Letter"
  "/letter/{letter_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Letters
      parameters:
        - name: letter_id
          in: path
          description: The id of the letter
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Letters
      parameters:
        - name: letter_id
          in: path
          description: The id of a letter
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Letter"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Letters
      parameters:
        - name: letter_id
          in: path
          description: The id of the letter
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /lock:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - lockable_type: test
                        lockable_id: 1
                        user_id: 1
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all locks.
      tags:
        - Lock
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Lock
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Lock"
  "/lock/{lock_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Lock
      parameters:
        - name: lock_id
          in: path
          description: The id of the lock
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Lock
      parameters:
        - name: lock_id
          in: path
          description: The id of an lock
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Lock"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Lock
      parameters:
        - name: lock_id
          in: path
          description: The id of the lock
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /mortgage:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - customer_id: 1
                        hypotheeknummer: "12345678"
                        koopsom: 250000
                        onderpandsgegevens: Hoofdstraat 1, Hoofdstad
                        redenHypotheek: Bestaande bouw
                        hoofdsomHypotheek: 100000
                        hypotheciareInschrijving: "150000"
                        taxateur_id: 1
                        marktwaarde: 250000
                        datumTaxatie: 01-01-2018
                        wozWaarde: 250000
                        wozDatum: 01-01-2018
                        totaalSom: 0
                        bouwdepot: "25000"
                        notaris_id: 1
                        passeerdatum: 01-01-2018
                        verkopendMakelaar_id: 1
                        geldverstrekker_id: 1
                        label_id: 1
                        nhg: true
                        rate: 1
                        rangorde: 1
                        status: 1
                        getekend: 01-01-2018
                        voor_verlenging: 01-01-2018
                        na_verlening: 01-01-2018
                        financiering: 01-01-2018
                        bankgarantie: 01-01-20184
                        passeerdatumVoortgang: 01-01-2018
                        collateral_address: Teststraat
                        collateral_city: Teststad
                        collateral_postcode: 9123HH
                        collateral_housenumber: "61"
                        collateral_county: Netherlands
                        restantHoofdsom: 500000
                        executiewaarde: 100000
                        type_woning: 1
                        offerteNummer: 100
                        datumAanvraag: 01-01-2018
                        datumOfferte: 01-01-2018
                        datumGeldigheidOfferte: 01-01-2018
                        datumOfferteGetekend: 01-01-2018
                        vovVoorVerbouwing: 200000
                        vovNaVerbouwing: 250000
                        ewVoorVerbouwing: 150000
                        ewNaVerbouwing: 175000
                        trackingNumber: 1
                        collateral_addition: A
                        purchasing_broker_id: 1
                        validity_unsigned_offer_date: 01-01-2018
                        validity_signed_offer_date: 01-01-2018
                        end_financing_reservation_date: 401-01-2018
                        has_bank_guarantee_date: 01-01-2018
                        bank_guarantee_date: 01-01-2018
                        mortgage_property_id: 1
                        financier_agency_id: 1
                        arrangement_type: 1
                        existing_mortgage_number: "1"
                        own_resources_amount: 1
                        mutation_code: 1
                        is_property_purchase: false
                        bank_guarantee_costs: 50000
                        net_consultancy_costs: 50000
                        mortgage_deed_cost_specification: 5000
                        national_mortgage_guarantee_costs: 5000
                        fine_interest: 1
                        loan_type: "14"
                        secondary_customer_id: 1
                        loan_to_value: 1
                        risk_class: 1
                        risk_class_type: 1
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Mortgages.
      tags:
        - Mortgages
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Mortgages
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Mortgage"
  "/mortgage/{mortgage_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Mortgages
      parameters:
        - name: mortgage_id
          in: path
          description: The id of the mortgage
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Mortgages
      parameters:
        - name: mortgage_id
          in: path
          description: The id of a mortgage
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Mortgage"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Mortgages
      parameters:
        - name: mortgage_id
          in: path
          description: The id of the mortgage
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /mortgagePart:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - mortgage_id: 1
                        hypotheeknummer: "1"
                        leningdeelnummer: "1"
                        soortLening: lening
                        hoofdsom: 150000
                        begindatum: 01-01-2018
                        einddatum: 01-01-2019
                        rente: 4
                        rentevasteperiode: "10"
                        einddatumRentevast: 01-01-2019
                        created_at: 01-01-2018 12:00:00
                        updated_at: 01-01-2018 12:00:00
                        begindatumRentevast: 2018-01-01
                        renteType: 1
                        duur: 360
                        hypotheekType: 1
                        afsluitprovisie: 0
                        bedenktijd: false
                        bedenktijdStartDatum: 2018-01-01
                        type: 2
                        agency_code: "1"
                        tax_box_type: 3
                        repayment_type: 1
                        interest_agreement_type: 1
                        interest_cooling_off_period_type: 1
                        interest_cooling_off_period_in_months: 1
                        payment_term: 1
                        consumptive_percentage: 1
                        consumptive_amount: 1
                        national_mortgage_guarantee: true
                        coverage_percentage: 1
                        rate_based_on: 1
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all mortgageParts.
      tags:
        - MortgageParts
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - MortgageParts
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/MortgagePart"
  "/mortgagePart/{mortgagePart_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - MortgageParts
      parameters:
        - name: mortgagePart_id
          in: path
          description: The id of the mortgagePart
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - MortgageParts
      parameters:
        - name: mortgagePart_id
          in: path
          description: The id of a mortgagePart
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/MortgagePart"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - MortgageParts
      parameters:
        - name: mortgagePart_id
          in: path
          description: The id of the mortgagePart
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /mortgageProgress:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - id: 1
                        mortgage_id: 1
                        name: Testverklaring
                        sent: true
                        received: true
                        completed: true
                        comment: Comment
                        date: 01-01-2018
                        created_at: test
                        updated_at: test
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all MortgageProgresses.
      tags:
        - MortgageProgress
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - MortgageProgress
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/MortgageProgress"
  "/mortgageProgress/{mortgageProgress_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - MortgageProgress
      parameters:
        - name: mortgageProgress_id
          in: path
          description: The id of the mortgageProgress
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - MortgageProgress
      parameters:
        - name: mortgageProgress_id
          in: path
          description: The id of the mortgageProgress
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/MortgageProgress"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - MortgageProgress
      parameters:
        - name: mortgageProgress_id
          in: path
          description: The id of the mortgageProgress
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /damage:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - customer_id: 1
                        damage_number: "700004"
                        licenseplate: AA-BB-12
                        policy_id: 564
                        insurance_branche_code: 0
                        policy_contractNumber: "702519615"
                        insurance_agency_id: 0
                        settled: true
                        date: 2008-11-12
                        blame: true
                        cause: Letselschade, oorzaak onbekend
                        notes: Notities
                        agency_id: 8
                        agency_contact_id: 0
                        agency_contact: Jan Modaal
                        agency_phone: "0612345678"
                        agency_emailaddress: test@test.nl
                        external_number: "0612345678"
                        wa: 0
                        casco: 500
                        deductible: 200
                        garage_id: 1
                        garage_contact_id: 1
                        user_id: 1
                        trackingNumber: "5"
                        expert_id: 1
                        expert_case_number: "1"
                        pay_to: 1
                        status: 1
                        wa_at: "1"
                        casco_at: "1"
                        deductible_at: "1"
                        estimated: 1
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Damages.
      tags:
        - Damages
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Damages
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Damage"
  "/damage/{damage_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Damages
      parameters:
        - name: damage_id
          in: path
          description: The id of the damage
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Damages
      parameters:
        - name: damage_id
          in: path
          description: The id of the damage
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Damage"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Damages
      parameters:
        - name: damage_id
          in: path
          description: The id of the damage
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /document:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - name: Testverklaring voor testverzekering
                        file: url/naar/bestand.pdf
                        type: Microsoft Outlook
                        mime_type: application/pdf
                        customer_id: 1
                        documentcategory_id: 1
                        extension: pdf
                        migrated: true
                        filesize: 1000
                        decoded: true
                        user_id: 1
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Documents.
      tags:
        - Documents
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Documents
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Document"
  "/document/{document_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Documents
      parameters:
        - name: document_id
          in: path
          description: The id of the document
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Documents
      parameters:
        - name: document_id
          in: path
          description: The id of a document
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Document"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Documents
      parameters:
        - name: document_id
          in: path
          description: The id of the document
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /email:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - {}
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Emails.
      tags:
        - Emails
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Emails
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Email"
  "/email/{email_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Emails
      parameters:
        - name: email_id
          in: path
          description: The id of the email
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Emails
      parameters:
        - name: email_id
          in: path
          description: The id of a email
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Email"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Emails
      parameters:
        - name: email_id
          in: path
          description: The id of the email
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /template:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - id: 4
                        title: Template
                        nameInSystem: Test template
                        content: Test content
                        type: 1
                        primaryMail: test@test.nl
                        category: 1
                        created_at: "2019-01-01 12:00:00"
                        updated_at: "2019-01-02 12:00:00"
                        deleted_at: "2019-01-03 12:00:00"
                        agency_id: 1
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Templates.
      tags:
        - Templates
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Templates
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Template"
  "/template/{template_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Templates
      parameters:
        - name: template_id
          in: path
          description: The id of the template
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Templates
      parameters:
        - name: template_id
          in: path
          description: The id of a template
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Template"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Templates
      parameters:
        - name: template_id
          in: path
          description: The id of the template
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /note:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - id: 1
                        title: Notitie
                        content: Call was made by customer XXX at 13:48
                        datetime: 01-01-2018
                        category_id: 1
                        entity_id: "3"
                        created_at: "2019-01-01 12:00:00"
                        updated_at: "2019-01-02 12:00:00"
                        deleted_at: "2019-01-03 12:00:00"
                        user_id: "1"
                        file: test
                        call_event_id: test
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Notes.
      tags:
        - Notes
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Notes
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Note"
  "/note/{note_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Notes
      parameters:
        - name: note_id
          in: path
          description: The id of the note
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Notes
      parameters:
        - name: note_id
          in: path
          description: The id of the note
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Note"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Notes
      parameters:
        - name: note_id
          in: path
          description: The id of the note
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /signal:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - id: 1
                        signal_query_id: 1
                        customer_id: 1
                        status: 1
                        snoozed_until: 01-01-2018 12:00:00
                        comment: test
                        finished_by: 1
                        finished_at: 01-01-2018 12:00:00
                        created_at: 01-01-2018 12:00:00
                        updated_at: 01-01-2018 12:00:00
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Signals.
      tags:
        - Signals
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Signals
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Signal"
  "/signal/{signal_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Signals
      parameters:
        - name: signal_id
          in: path
          description: The id of the signal
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Signals
      parameters:
        - name: signal_id
          in: path
          description: The id of the signal
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Signal"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Signals
      parameters:
        - name: signal_id
          in: path
          description: The id of the signal
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /account:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - id: 1
                        type: 4
                        active: true
                        number: "4"
                        customer_id: 4
                        inzake: "4"
                        joint_id: "1"
                        primary: true
                        created_at: "4"
                        updated_at: "4"
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Accounts.
      tags:
        - Accounts
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Accounts
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Account"
  "/account/{account_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Accounts
      parameters:
        - name: account_id
          in: path
          description: The id of the account
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Accounts
      parameters:
        - name: account_id
          in: path
          description: The id of an account
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Account"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Accounts
      parameters:
        - name: account_id
          in: path
          description: The id of the account
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /office:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      additionalProperties:
                        $ref: '#/components/schemas/Office'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - id: 1
                        name: "1"
                        owner_id: 1
                        code: "1"
                        phone: "1"
                        postcode: "1"
                        houseNumber: "1"
                        streetName: "1"
                        city: "1"
                        houseNumberAddition: "1"
                        email: "1"
                        website: "1"
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Offices.
      tags:
        - Offices
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Offices
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Office"
  "/office/{office_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Offices
      parameters:
        - name: office_id
          in: path
          description: The id of the office
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Offices
      parameters:
        - name: office_id
          in: path
          description: The id of a office
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Office"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Offices
      parameters:
        - name: office_id
          in: path
          description: The id of the office
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /search:
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      additionalProperties:
                        $ref: '#/components/schemas/Search'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
              examples:
                response:
                  value:
                    data:
                      - id: 4
                        name: Test
                        content: test content
                        user_id: 1
                        public: true
                        created_at: "2019-01-01 12:00:00"
                        updated_at: "2019-01-02 12:00:00"
                    meta:
                      $ref: '#/components/examples/PaginationExample'
      summary: List
      description: Get a list of all Searches.
      tags:
        - Searches
      parameters:
        - name: perPage
          in: query
          description: The maximum number of objects to return
          required: false
          example: "25"
          schema:
            type: integer
            default: 15
    post:
      responses:
        "200":
          $ref: '#/components/responses/Created'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Create
      description: ""
      tags:
        - Searches
      parameters:
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Search"
  "/search/{search_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Show
      description: ""
      tags:
        - Searches
      parameters:
        - name: search_id
          in: path
          description: The id of the search
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
    put:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of stored data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Update
      description: ""
      tags:
        - Searches
      parameters:
        - name: search_id
          in: path
          description: The id of a search
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Search"
    delete:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Success true or false
                  id:
                    type: string
                    description: Id of deleted data (can be empty on array inserts)
              examples:
                response:
                  value:
                    success: true
                    id: "1"
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Delete
      description: ""
      tags:
        - Searches
      parameters:
        - name: search_id
          in: path
          description: The id of the search
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
  /hdn/ax_message:
    post:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                        description: The status of the AX Message; queued, pending,
                          processed, failed
                      version:
                        type: string
                        description: The version of the AX Message
                      status:
                        type: number
                        description: "The status of the AX Message; {1: QUEUED, 2: PENDING,
                          3: PROCESSED, 4: FAILED}"
                      user_id:
                        type: number
                        description: OPTIONAL The id of the reviewing user
                      customer_id:
                        type: number
                        description: OPTIONAL The id of the linked customer
                      updated_at:
                        type: string
                        description: An ISO 8601 formatted string
              examples:
                response:
                  value:
                    data:
                      id: 1
                      version: "17.0"
                      status: 1
                      user_id: 1
                      customer_id: 1
                      updated_at: 2017-01-30T12:00:00+02:00
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Queue
      description: >-
        Post an AX Message to be used to update a Customer. If none or multiple
        Customers are matched, the AX Message will be

        stored so a user of the system can manually match it to a customer and validate the updated fields/objects.
      tags:
        - HDN
  "/hdn/ax_message/{ax_message_id}":
    get:
      responses:
        "200":
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                        description: The status of the AX Message; queued, pending,
                          processed, failed
                      version:
                        type: string
                        description: The version of the AX Message
                      status:
                        type: number
                        description: "The status of the AX Message; {1: QUEUED, 2: PENDING,
                          3: PROCESSED, 4: FAILED}"
                      user_id:
                        type: number
                        description: OPTIONAL The id of the reviewing user
                      customer_id:
                        type: number
                        description: OPTIONAL The id of the linked customer
                      updated_at:
                        type: string
                        description: An ISO 8601 formatted string
              examples:
                response:
                  value:
                    data:
                      id: 1
                      version: "17.0"
                      status: 1
                      user_id: 1
                      customer_id: 1
                      updated_at: 2017-01-30T12:00:00+02:00
        "404":
          $ref: '#/components/responses/NotFound'
      summary: Get status
      description: Fetch the status of a queued AX Message.
      tags:
        - HDN
      parameters:
        - name: ax_message_id
          in: path
          description: The id of the AX Message
          required: true
          example: "1"
          schema:
            type: integer
        - name: Accept
          in: header
          description: e.g. application/json
          required: true
          example: application/json
          schema:
            type: string
tags:
  - name: Authentication
    description: >-
      This section describes the authentication process.


      ### OAuth2


      Authentication is done based on OAuth2. Tokens have an expiration time of ***24 hours*** and can be refreshed

      ***30 days*** after they were generated.


      #### Client


      To use the api you need to request an OAuth client with which you can request an access token.


      In your request you need to supply the following:


      * Company details


      * A callback URL for OAuth


      * A detailed description of what you plan to use the API for


      Please send your OAuth Client request to `info@dossierdata.nl`.


      #### Login


      When you've received your client credentials, you can prompt your users for an access token access. They need to login

      with their DossierData account and approve that your client can access their data. After this process you obtain an

      access key.


      ### Authentication


      Requesting any endpoint except the authentication will require you to send an access token, this can be done in

      two-ways. Either by Header of in the Query of the request.
  - name: Authorization
    description: |-
      This section lists basic information about the authorization process.

      The two requests that you need for the authorization process are:

      + `/oauth/authorize`

      + `/oauth/access_token`
  - name: Addresses
    description: All calls for Address management
  - name: Customers
    description: All calls for Customer management
  - name: Dossiers
    description: All calls for Dossier management
  - name: EmailAccount
    description: All calls for EmailAccount management
  - name: Letters
    description: All calls for Letter management
  - name: Lock
    description: All calls for Lock management
  - name: Mortgages
    description: All calls for Mortgage management
  - name: MortgageParts
    description: All calls for MortgagePart management
  - name: MortgageProgress
    description: All calls for MortgageProgress management
  - name: Damages
    description: All calls for Damage management
  - name: Documents
    description: All calls for Document management
  - name: Emails
    description: All calls for Email management
  - name: Templates
    description: All calls for Template management
  - name: Notes
    description: All calls for Note management
  - name: Signals
    description: All calls for signal management
  - name: Accounts
    description: All calls for Account management
  - name: Offices
    description: All calls for Office management
  - name: Searches
    description: All calls for Search management
  - name: HDN
    description: All calls for HDN functions
servers:
  - url: https://{subdomain}.ddat.nl/api/v1
    variables:
      subdomain:
        default: yourofficesubdomain
components:
  requestBodies:
    Signal:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: number
                description: ID of signal
              signal_query_id:
                type: number
                description: ID of signal query
              customer_id:
                type: number
                description: ID of customer
              status:
                type: number
                description: Status of signal
              snoozed_until:
                type: string
                description: Signal snoozed until date
              comment:
                type: string
                description: Comment of signal
              finished_by:
                type: number
                description: Signal finished by
              finished_at:
                type: string
                description: Signal finished at date
              created_at:
                type: string
                description: Signal created at timestamp
              updated_at:
                type: string
                description: Signal latest update timestamp
            example:
              id: 1
              signal_query_id: 1
              customer_id: 1
              status: 1
              snoozed_until: 01-01-2018 12:00:00
              comment: test
              finished_by: 1
              finished_at: 01-01-2018 12:00:00
              created_at: 01-01-2018 12:00:00
              updated_at: 01-01-2018 12:00:00
    Template:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: number
                description: ID of template
              title:
                type: string
                description: Title of template
              nameInSystem:
                type: string
                description: Name in system of template
              content:
                type: string
                description: Content of template
              type:
                type: number
                description: Type of template
              primaryMail:
                type: string
                description: Primary mail of template
              category:
                type: number
                description: Category of template
              created_at:
                type: string
                description: Timestamp of creation
              updated_at:
                type: string
                description: Timestamp of latest update
              deleted_at:
                type: string
                description: Timestamp of deletion
              agency_id:
                type: number
                description: ID of agency of template
            example:
              id: 4
              title: Template
              nameInSystem: Test template
              content: Test content
              type: 1
              primaryMail: test@test.nl
              category: 1
              created_at: "2019-01-01 12:00:00"
              updated_at: "2019-01-02 12:00:00"
              deleted_at: "2019-01-03 12:00:00"
              agency_id: 1
    MortgagePart:
      content:
        application/json:
          schema:
            type: object
            properties:
              mortgage_id:
                type: number
                description: ID of mortgage
              hypotheeknummer:
                type: string
                description: Number of mortgage
              leningdeelnummer:
                type: string
                description: Part number of loan
              soortLening:
                type: string
                description: Sort of loan
              hoofdsom:
                type: number
                description: Main price
              begindatum:
                type: string
                description: Start date
              einddatum:
                type: string
                description: End date
              rente:
                type: number
                description: Interest
              rentevasteperiode:
                type: string
                description: Fixed interest period
              einddatumRentevast:
                type: string
                description: End date of fixed interest period
              created_at:
                type: string
                description: Timestamp of creation
              updated_at:
                type: string
                description: Timestamp of last updated
              begindatumRentevast:
                type: string
                description: Start date of fixed interest period
              renteType:
                type: number
                description: Type of intereset
              duur:
                type: number
                description: Duration
              hypotheekType:
                type: number
                description: Type of mortgage
              afsluitprovisie:
                type: number
                description: Commission
              bedenktijd:
                type: boolean
                description: Time for consideration
              bedenktijdStartDatum:
                type: string
                description: Start date of consideration
              type:
                type: number
                description: Type
              agency_code:
                type: string
                description: Code of agency
              tax_box_type:
                type: number
                description: The tax box type number
              repayment_type:
                type: number
                description: Type of repayment
              interest_agreement_type:
                type: number
                description: Type of interest agreement
              interest_cooling_off_period_type:
                type: number
                description: Type of interest cooling off period type
              interest_cooling_off_period_in_months:
                type: number
                description: Type of interest colling off period in months
              payment_term:
                type: number
                description: Payment term
              consumptive_percentage:
                type: number
                description: Consumptive percentage
              consumptive_amount:
                type: number
                description: Consumptive amount
              national_mortgage_guarantee:
                type: boolean
                description: National mortgage guarantee
              coverage_percentage:
                type: number
                description: Coverage percentage
              rate_based_on:
                type: number
                description: Rate based on
            required:
              - mortgage_id
            example:
              mortgage_id: 1
              hypotheeknummer: "1"
              leningdeelnummer: "1"
              soortLening: lening
              hoofdsom: 150000
              begindatum: 01-01-2018
              einddatum: 01-01-2019
              rente: 4
              rentevasteperiode: "10"
              einddatumRentevast: 01-01-2019
              created_at: 01-01-2018 12:00:00
              updated_at: 01-01-2018 12:00:00
              begindatumRentevast: 2018-01-01
              renteType: 1
              duur: 360
              hypotheekType: 1
              afsluitprovisie: 0
              bedenktijd: false
              bedenktijdStartDatum: 2018-01-01
              type: 2
              agency_code: "1"
              tax_box_type: 3
              repayment_type: 1
              interest_agreement_type: 1
              interest_cooling_off_period_type: 1
              interest_cooling_off_period_in_months: 1
              payment_term: 1
              consumptive_percentage: 1
              consumptive_amount: 1
              national_mortgage_guarantee: true
              coverage_percentage: 1
              rate_based_on: 1
    Mortgage:
      content:
        application/json:
          schema:
            type: object
            properties:
              customer_id:
                type: number
                description: ID of the customer
              hypotheeknummer:
                type: string
                description: Number of mortgage
              koopsom:
                type: number
                description: Buying price of property
              onderpandsgegevens:
                type: string
                description: Credentials of collateral
              redenHypotheek:
                type: string
                description: Reason of mortgage
              hoofdsomHypotheek:
                type: number
                description: Main sum mortgage
              hypotheciareInschrijving:
                type: string
                description: Mortgage  registration
              taxateur_id:
                type: number
                description: ID of appraiser
              marktwaarde:
                type: number
                description: Market value of property
              datumTaxatie:
                type: string
                description: Date of taxation
              wozWaarde:
                type: number
                description: Cadastral value
              wozDatum:
                type: string
                description: Date of cadastral
              totaalSom:
                type: number
                description: Total sum
              bouwdepot:
                type: string
                description: Building fund of mortgage
              notaris_id:
                type: number
                description: ID of notary
              passeerdatum:
                type: string
                description: Date when the mortgage papers are signed by the notary
              verkopendMakelaar_id:
                type: number
                description: ID of realtor
              geldverstrekker_id:
                type: number
                description: ID of company that gave the mortgage
              label_id:
                type: number
                description: ID of label
              nhg:
                type: boolean
                description: Is mortgage under Nationale Hypotheek Garantie (NHG)?
              rate:
                type: number
                description: Rate of mortgage
              rangorde:
                type: number
                description: Rank of mortgage
              status:
                type: number
                description: Status of mortgage
              getekend:
                type: string
                description: Date of signing
              voor_verlenging:
                type: string
                description: Date before extension
              na_verlening:
                type: string
                description: Date after extension
              financiering:
                type: string
                description: Date of financing
              bankgarantie:
                type: string
                description: Date of bank guarantee
              passeerdatumVoortgang:
                type: string
                description: Date of passing date progress
              collateral_address:
                type: string
                description: Collateral address of mortgage
              collateral_city:
                type: string
                description: Collateral city of mortgage
              collateral_postcode:
                type: string
                description: Collateral postal code of mortgage
              collateral_housenumber:
                type: string
                description: Collateral house number of mortgage
              collateral_county:
                type: string
                description: Collateral county of mortgage
              restantHoofdsom:
                type: number
                description: Remainder of total sum of mortgage
              executiewaarde:
                type: number
                description: Execution value of mortgage
              type_woning:
                type: number
                description: ID type of property
              offerteNummer:
                type: number
                description: Quotation of mortgage
              datumAanvraag:
                type: string
                description: Date of application
              datumOfferte:
                type: string
                description: Date of quotation
              datumGeldigheidOfferte:
                type: string
                description: Date of validity for quotation
              datumOfferteGetekend:
                type: string
                description: Date of quotation signed
              vovVoorVerbouwing:
                type: number
                description: Vrije onderhandse verkoopwaarde (VOV) before construction
              vovNaVerbouwing:
                type: number
                description: Vrije onderhandse verkoopwaarde (VOV) after construction
              ewVoorVerbouwing:
                type: number
                description: Execution value before construction
              ewNaVerbouwing:
                type: number
                description: Execution value after construction
              trackingNumber:
                type: number
                description: Tracking number of mortgage
              collateral_addition:
                type: string
                description: Collateral addition of mortgage
              purchasing_broker_id:
                type: number
                description: ID of purchasing broker
              validity_unsigned_offer_date:
                type: string
                description: Validity of unsigned offer date
              validity_signed_offer_date:
                type: string
                description: Validity of signed offer date
              end_financing_reservation_date:
                type: string
                description: End of financing reservation date
              has_bank_guarantee_date:
                type: string
                description: Date of bank guarantee
              bank_guarantee_date:
                type: string
                description: Date of bank guarantee
              mortgage_property_id:
                type: number
                description: ID of mortgage property
              financier_agency_id:
                type: number
                description: ID of financier agency
              arrangement_type:
                type: number
                description: ID of arrangement
              existing_mortgage_number:
                type: string
                description: Number of existing mortgage number
              own_resources_amount:
                type: number
                description: Amount of own resources
              mutation_code:
                type: number
                description: Code of mutation of mortgage
              is_property_purchase:
                type: boolean
                description: Is property purchased?
              bank_guarantee_costs:
                type: number
                description: Costs of bank guarantee
              net_consultancy_costs:
                type: number
                description: Net consultancy costs
              mortgage_deed_cost_specification:
                type: number
                description: Costs of mortgage deed
              national_mortgage_guarantee_costs:
                type: number
                description: National mortgage guarantee costs
              fine_interest:
                type: number
                description: Fine intereset of mortgage
              loan_type:
                type: string
                description: Type of loan
              secondary_customer_id:
                type: number
                description: ID of secondary customer
              loan_to_value:
                type: number
                description: Value to loan of mortgage
              risk_class:
                type: number
                description: Risk class of mortgage
              risk_class_type:
                type: number
                description: Type of risk class of mortgage
            required:
              - customer_id
            example:
              customer_id: 1
              hypotheeknummer: "12345678"
              koopsom: 250000
              onderpandsgegevens: Hoofdstraat 1, Hoofdstad
              redenHypotheek: Bestaande bouw
              hoofdsomHypotheek: 100000
              hypotheciareInschrijving: "150000"
              taxateur_id: 1
              marktwaarde: 250000
              datumTaxatie: 01-01-2018
              wozWaarde: 250000
              wozDatum: 01-01-2018
              totaalSom: 0
              bouwdepot: "25000"
              notaris_id: 1
              passeerdatum: 01-01-2018
              verkopendMakelaar_id: 1
              geldverstrekker_id: 1
              label_id: 1
              nhg: true
              rate: 1
              rangorde: 1
              status: 1
              getekend: 01-01-2018
              voor_verlenging: 01-01-2018
              na_verlening: 01-01-2018
              financiering: 01-01-2018
              bankgarantie: 01-01-20184
              passeerdatumVoortgang: 01-01-2018
              collateral_address: Teststraat
              collateral_city: Teststad
              collateral_postcode: 9123HH
              collateral_housenumber: "61"
              collateral_county: Netherlands
              restantHoofdsom: 500000
              executiewaarde: 100000
              type_woning: 1
              offerteNummer: 100
              datumAanvraag: 01-01-2018
              datumOfferte: 01-01-2018
              datumGeldigheidOfferte: 01-01-2018
              datumOfferteGetekend: 01-01-2018
              vovVoorVerbouwing: 200000
              vovNaVerbouwing: 250000
              ewVoorVerbouwing: 150000
              ewNaVerbouwing: 175000
              trackingNumber: 1
              collateral_addition: A
              purchasing_broker_id: 1
              validity_unsigned_offer_date: 01-01-2018
              validity_signed_offer_date: 01-01-2018
              end_financing_reservation_date: 401-01-2018
              has_bank_guarantee_date: 01-01-2018
              bank_guarantee_date: 01-01-2018
              mortgage_property_id: 1
              financier_agency_id: 1
              arrangement_type: 1
              existing_mortgage_number: "1"
              own_resources_amount: 1
              mutation_code: 1
              is_property_purchase: false
              bank_guarantee_costs: 50000
              net_consultancy_costs: 50000
              mortgage_deed_cost_specification: 5000
              national_mortgage_guarantee_costs: 5000
              fine_interest: 1
              loan_type: "14"
              secondary_customer_id: 1
              loan_to_value: 1
              risk_class: 1
              risk_class_type: 1
    Search:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: number
                description: ID of search
              name:
                type: string
                description: Name of search
              content:
                type: string
                description: Content of search
              user_id:
                type: number
                description: ID of user
              public:
                type: boolean
                description: Is search public?
              created_at:
                type: string
                description: Timestamp of creation
              updated_at:
                type: string
                description: Timestamp of latest update
            example:
              id: 4
              name: Test
              content: test content
              user_id: 1
              public: true
              created_at: "2019-01-01 12:00:00"
              updated_at: "2019-01-02 12:00:00"
    Document:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Naam van het document
              file:
                type: string
                description: Bestandslocatie van het document
              type:
                type: string
                description: Documenttype
              mime_type:
                type: string
                description: MIME-type van het document
              customer_id:
                type: number
                description: ID van klant
              documentcategory_id:
                type: number
                description: ID van categorie
              extension:
                type: string
                description: Bestandsextensie van het document
              migrated:
                type: boolean
                description: Is het document gemigreerd?
              filesize:
                type: number
                description: Bestandsgrootte van het document (in bytes)
              user_id:
                type: number
                description: ID van gebruiker
            example:
              name: Testverklaring voor testverzekering
              file: url/naar/bestand.pdf
              type: Microsoft Outlook
              mime_type: application/pdf
              customer_id: 1
              documentcategory_id: 1
              extension: pdf
              migrated: true
              filesize: 1000
              decoded: true
              user_id: 1
    Address:
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: number
                description: Type of address
              postcode:
                type: string
                description: Postal code of the address
              houseNumber:
                type: string
                description: House number of the address
              streetName:
                type: string
                description: Street name of the address
              city:
                type: string
                description: City of the address
              houseNumberAddition:
                type: string
                description: House number addition of the address
              customer:
                type: number
                description: ID of the related customer
              active:
                type: boolean
                description: Is the address active?
              lat:
                type: number
                description: Latitude of the address
              lng:
                type: number
                description: Longitude of the address
              country:
                type: string
                description: Country of the address
            example:
              type: 4
              postcode: 9712VL
              houseNumber: "46"
              streetName: Noorderhaven
              city: Groningen
              houseNumberAddition: "``"
              customer: 4482
              active: true
              lat: 53.219708
              lng: 6.558785
              country: Netherlands
    Dossier:
      content:
        application/json:
          schema:
            type: object
            properties:
              uuid:
                type: number
                description: UUID of dossier
              customer_id:
                type: string
                description: Customer ID of dossier
              status:
                type: string
                description: Status of dossier
            required:
              - uuid
            example:
              uuid: 1
              customer_id: "700004"
              status: AA-BB-12
    EmailAccount:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of Emailaccount holder
              address:
                type: string
                description: Emailaddress of Emailaccount holder
              host:
                type: string
                description: Hostname of Emailaccount
              port:
                type: number
                description: Port of Emailaccount
              username:
                type: string
                description: Username of Emailaccount
              validate_cert:
                type: boolean
                description: Emailaccount has validation certificate?
              encryption:
                type: number
                enum:
                  - 0
                  - 1
                  - 2
                default: 0
                description: |-
                  Type of encryption of Emailaccount

                  EncryptionTypes enum:
                  0: none, 1: ssl, 2: tls
              signature:
                type: string
                description: Signature of Emailaccount
              sync_enabled:
                type: boolean
                description: Is sync enabled?
              synced_at:
                type: string
                description: Date of sync, format d/m/Y
              locked:
                type: boolean
                description: Emailaccount locked?
              auto_match:
                type: boolean
                description: Auto match Emailaccount?
              auto_process:
                type: boolean
                description: Auto process Emailaccount?
              process_email_account_folder_id:
                type: number
                description: Branche code of insurance company
            required:
              - name
              - address
            example:
              name: John Doe
              address: test@test.nl
              host: imap.gmail.com
              port: 143
              username: test@test.nl
              validate_cert: false
              encryption: "0"
              signature: Yours truly
              sync_enabled: false
              synced_at: 01/01/2018
              locked: false
              auto_match: false
              auto_process: false
              process_email_account_folder_id: 0
    Letter:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of the letter
              address:
                type: string
                description: Address of the letter
              content:
                type: string
                description: Content of the letter
              customer_id:
                type: number
                description: ID of the customer
              user_id:
                type: number
                description: ID of the user
              for_instance_class:
                type: number
                description: For instance class of the letter
              for_instance_id:
                type: number
                description: For instance id of the letter
              category_id:
                type: number
                description: ID of the category of the letter
              template_id:
                type: number
                description: ID of the template of the letter
            required:
              - name
              - address
              - content
              - customer_id
              - user_id
              - category_id
              - template_id
            example:
              name: Test letter
              address: Test
              content: Test
              customer_id: 1
              user_id: 1
              for_instance_class: 1
              for_instance_id: 1
              category_id: 1
              template_id: 1
    Lock:
      content:
        application/json:
          schema:
            type: object
            properties:
              lockable_type:
                type: string
                description: Type of the lockable
              lockable_id:
                type: number
                description: ID of the lockable
              user_id:
                type: number
                description: ID of the user
            required:
              - lockable_type
              - lockable_id
              - user_id
            example:
              lockable_type: test
              lockable_id: 1
              user_id: 1
    MortgageProgress:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: number
                description: ID of entity
              mortgage_id:
                type: number
                description: ID of related mortgage
              name:
                type: string
                description: Name of mortgage progress
              sent:
                type: boolean
                description: Has the mortgage progress been sent?
              received:
                type: boolean
                description: Has the mortgage progress been received?
              completed:
                type: boolean
                description: Has the mortgage progress been completed?
              comment:
                type: string
                description: Comment that belongs to the mortgage progress
              date:
                type: string
                description: Date that corresponds to the mortgage progress
              created_at:
                type: string
                description: Timestamp of creation
              updated_at:
                type: string
                description: Timestamp of latest update
            required:
              - mortgage_id
            example:
              id: 1
              mortgage_id: 1
              name: Testverklaring
              sent: true
              received: true
              completed: true
              comment: Comment
              date: 01-01-2018
              created_at: test
              updated_at: test
    Damage:
      content:
        application/json:
          schema:
            type: object
            properties:
              customer_id:
                type: number
                description: ID of customer
              damage_number:
                type: string
                description: Number of damage
              licenseplate:
                type: string
                description: License plate of car of the insuree involved in damage
              policy_id:
                type: number
                description: ID of policy
              insurance_branche_code:
                type: number
                description: Branche code of insurance company
              policy_contractNumber:
                type: string
                description: Contract number of policy
              insurance_agency_id:
                type: number
                description: ID of insurance agency
              settled:
                type: boolean
                description: Is the damage settled?
              date:
                type: string
                description: Date when damage occured
              blame:
                type: boolean
                description: Is the insuree to blame?
              cause:
                type: string
                description: Cause of the damage
              notes:
                type: string
                description: Notes belonging to damage
              agency_id:
                type: number
                description: ID of agency
              agency_contact_id:
                type: number
                description: ID of contact of agency
              agency_contact:
                type: string
                description: Name of agency contact
              agency_phone:
                type: string
                description: Phone number of agency
              agency_emailaddress:
                type: string
                description: Email address of agency
              external_number:
                type: string
                description: External number of damage
              wa:
                type: number
                description: Liability insurance
              casco:
                type: number
                description: Insurance of object involved in damage (casco)
              deductible:
                type: number
                description: Amount that is deductible
              garage_id:
                type: number
                description: ID of garage involved
              garage_contact_id:
                type: number
                description: ID of contact of garage involved
              user_id:
                type: number
                description: ID of user
              trackingNumber:
                type: string
                description: Tracking number
              expert_id:
                type: number
                description: ID of expert involved
              expert_case_number:
                type: string
                description: Case number of expert
              pay_to:
                type: number
                description: Pay to
              status:
                type: number
                description: Status
              wa_at:
                type: string
                description: Liable at
              casco_at:
                type: string
                description: Casco at
              deductible_at:
                type: string
                description: Deductible at
              estimated:
                type: number
                description: Estimation
            required:
              - customer_id
            example:
              customer_id: 1
              damage_number: "700004"
              licenseplate: AA-BB-12
              policy_id: 564
              insurance_branche_code: 0
              policy_contractNumber: "702519615"
              insurance_agency_id: 0
              settled: true
              date: 2008-11-12
              blame: true
              cause: Letselschade, oorzaak onbekend
              notes: Notities
              agency_id: 8
              agency_contact_id: 0
              agency_contact: Jan Modaal
              agency_phone: "0612345678"
              agency_emailaddress: test@test.nl
              external_number: "0612345678"
              wa: 0
              casco: 500
              deductible: 200
              garage_id: 1
              garage_contact_id: 1
              user_id: 1
              trackingNumber: "5"
              expert_id: 1
              expert_case_number: "1"
              pay_to: 1
              status: 1
              wa_at: "1"
              casco_at: "1"
              deductible_at: "1"
              estimated: 1
    Email:
      content:
        application/json:
          schema:
            type: object
            properties: {}
            example: {}
    Note:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Note'
    Account:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: number
                description: ID of account
              type:
                type: number
                description: Type of account
              active:
                type: boolean
                description: Is account active?
              number:
                type: string
                description: Number of account
              customer_id:
                type: number
                description: ID of customer of account
              inzake:
                type: string
                description: Subject
              joint_id:
                type: string
                description: ID of joint of account
              primary:
                type: boolean
                description: Is account primary?
              created_at:
                type: string
                description: Timestamp of creation
              updated_at:
                type: string
                description: Timestamp of latest update
            required:
              - type
              - number
              - customer_id
            example:
              id: 1
              type: 4
              active: true
              number: "4"
              customer_id: 4
              inzake: "4"
              joint_id: "1"
              primary: true
              created_at: "4"
              updated_at: "4"
    Office:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: number
                description: ID of office
              name:
                type: string
                description: Name of office
              owner_id:
                type: number
                description: ID of owner of office
              code:
                type: string
                description: Code of office
              phone:
                type: string
                description: Phone number of office
              postcode:
                type: string
                description: Postal code of office
              houseNumber:
                type: string
                description: House number of office
              streetName:
                type: string
                description: Street name of office
              city:
                type: string
                description: City of office
              houseNumberAddition:
                type: string
                description: House number addition of office
              email:
                type: string
                description: Email address of office
              website:
                type: string
                description: Website of office
            required:
              - name
            example:
              id: 1
              name: "1"
              owner_id: 1
              code: "1"
              phone: "1"
              postcode: "1"
              houseNumber: "1"
              streetName: "1"
              city: "1"
              houseNumberAddition: "1"
              email: "1"
              website: "1"
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://test.ddat.nl/api/v1/oauth/authorize
          tokenUrl: https://test.ddat.nl/api/v1/oauth/access_token
          scopes:
            'account:full': Rekeningen inzien
            'address:basic': Basis adresgegevens
            'address:coordinates': Adres coordinaten
            'address:create': Nieuwe adressen aanmaken
            'customer:basic': Basisgegevens van een klant
            'customer:contact': Contactgegevens van een klant
            'customer:create': Nieuwe klanten aanmaken
            'customer:create_insurance_lead': Nieuwe polis leads aanmaken
            'customer:create_lead': Nieuwe leads aanmaken
            'customer:create_mortgage_lead': Nieuwe hypotheek leads aanmaken
            'customer:full': Alle gegevens van een klant
            'damage_person:address': Schade betrokken persoon adres
            'damage_person:agency': Schade betrokken persoon maatschappij
            'damage_person:basic': Schade betrokken persoon
            'damage:agency': Schade maatschappij
            'damage:basic': Basisgegevens van een schade
            'damage:full': Alle gegevens van een schade
            'document:full': Documenten
            'dossier:full': Dossiers
            'email_account:basic': Basisgegevens van e-mailaccounts
            'email_account:full': Alle gegevens van e-mailaccounts
            'email:full': Emails
            'hdn_ax': AX berichten overzicht
            'hdn_ax:create': Opslaan van nieuwe AX berichten
            'hdn_ax:show': AX bericht statussen
            'letter:full': Brieven
            'lock:full': Locks
            'mortgage_part:full': Hypotheek leningdelen
            'mortgage_progress:full': Hypotheek voortgang
            'mortgage:basic': Basisgegevens hypotheek
            'mortgage:full': Alle gegevens hypotheek
            'note:full': Notities
            'office:full': Kantoren
            'search:full': Zoekopdrachten
            'signal:full': Signalen
            'template:full': Templates
  schemas:
    Authorize: {}
    Callback: {}
    Addresses: {}
    Customers: {}
    Dossiers: {}
    EmailAccounts: {}
    Letters: {}
    Locks: {}
    Mortgages: {}
    MortgageParts: {}
    MortgageProgress:
      type: object
      required:
        - mortgage_id
      properties:
        id:
          type: number
          description: ID of entity
        mortgage_id:
          type: number
          description: ID of related mortgage
        name:
          type: string
          description: Name of mortgage progress
        sent:
          type: boolean
          description: Has the mortgage progress been sent?
        received:
          type: boolean
          description: Has the mortgage progress been received?
        completed:
          type: boolean
          description: Has the mortgage progress been completed?
        comment:
          type: string
          description: Comment that belongs to the mortgage progress
        date:
          type: string
          description: Date that corresponds to the mortgage progress
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
    Damages: {}
    Documents: {}
    Emails: {}
    Templates: {}
    Notes: {}
    Signals: {}
    Accounts: {}
    Offices: {}
    Searches: {}
    Created:
      type: object
      properties:
        success:
          type: boolean
          description: Success true or false
        id:
          type: string
          description: Id of stored data (can be empty on array inserts)
    Deleted:
      type: object
      properties:
        success:
          type: boolean
          description: Success true or false
        id:
          type: string
          description: Id of deleted data (can be empty on array inserts)
    Updated:
      type: object
      properties:
        success:
          type: boolean
          description: Success true or false
        id:
          type: string
          description: Id of updated data (can be empty on array inserts)
    Pagination:
      type: object
      properties:
        total:
          type: number
          description: Total number of objects
        count:
          type: number
          description: Object on this page
        per_page:
          type: number
          description: Object per page
        current:
          type: number
          description: Current page number
        total_pages:
          type: number
          description: Total number of pages
        links:
          type: object
          description: Array of meta links
          properties:
            self:
              type: string
              description: Link to the current page
            first:
              type: string
              description: Link to the first page
            prev:
              type: string
              description: Link to the previous page
            next:
              type: string
              description: Link to the next page
            last:
              type: string
              description: Link to the last page

    NotFoundResponse:
      type: object
      properties:
        errors:
          type: array
          items: {}
          description: An array of error messages
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items: {}
          description: An array of error messages
    ErrorMessage:
      type: object
      properties:
        code:
          type: number
          description: OPTIONAL Error code
        type:
          type: string
          description: OPTIONAL Error type
        message:
          type: string
          description: Description of the error
    AXMessageValidationError:
      type: object
      properties:
        message:
          type: string
          description: Description of the error
    AXMessageParseError:
      type: object
      properties:
        message:
          type: string
          description: Description of the error
    AXMessageTypeError:
      type: object
      properties:
        message:
          type: string
          description: Description of the error
    AXMessageXMLError:
      type: object
      properties:
        message:
          type: string
          description: Description of the error
    NotFoundMessage:
      type: object
      properties:
        message:
          type: string
          description: Description of the error
    AXMessageErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items: {}
          description: An array of error messages
    Customer:
      type: object
      required:
        - firstName
        - lastName
        - dateOfBirth
      properties:
        initials:
          type: string
          description: Initials of the customer
        firstName:
          type: string
          description: FirstName of the customer
        suffix:
          type: string
          description: Suffix of the customer
        lastName:
          type: string
          description: LastName of the customer
        dateOfBirth:
          type: string
          description: Date of birth of the customer
        phone:
          type: string
          description: Phonenumber of the customer
        mobile:
          type: string
          description: Mobile phonenumber of the customer
        sex:
          $ref: "#/components/schemas/Gender"
        emailaddress:
          type: string
          description: Emailaddress of the customer
        smoking:
          type: boolean
          description: Does the customer smoke?
        martialStatus:
          $ref: "#/components/schemas/MaritalStatus"
        mariedBefore:
          type: boolean
          description: Was the customer married befoer?
        office:
          type: number
          description: The office of the customer
        type:
          $ref: "#/components/schemas/CustomerType"
        parent:
          type: number
          description: The parent customer_id of the customer
        partner:
          type: number
          description: The id of the partner
        houseOwned:
          type: boolean
          description: Does the customer own a house
        advisor:
          type: number
          description: Id of the advisor of the customer
        employer:
          type: string
          description: Employer of the customer
        position:
          type: string
          description: Position at company of the customer
        mailingEnabled:
          type: boolean
          description: Does the customer want to receive emails
        salary:
          type: number
          description: The salary of the customer
        title:
          type: number
          description: The title of the customer
        accountNumber:
          type: string
          description: The account of the customer
        iban:
          type: string
          description: The iban of the customer
        businessname:
          type: string
          description: The name of the business of the customer
        businesstype:
          type: number
          description: The type of the business of the customer
        kvkNumber:
          type: string
          description: The kvk number of the customer
        numberOfEmployees:
          type: number
          description: The number of employees of the customer
        revenue:
          type: number
          description: The revenue of the customer
        payroll:
          type: number
          description: The payroll of the customer
        retirement_income:
          type: number
          description: Retirement income of the customer
        passed_away:
          type: boolean
          description: Did the customer pass away
        passed_away_at:
          type: string
          description: The date the customer passed away, format d/m/Y
        salary_date:
          type: string
          description: The date the customer gets their salary, format d/m/Y
        retirement_income_date:
          type: string
          description: The date the customer gets their retirement income, format d/m/Y
    CustomerLead:
      type: object
      required:
        - firstName
        - lastName
        - emailaddress
      properties:
        firstName:
          type: string
          description: FirstName of the customer, required if initials are not provided
        initials:
          type: string
          description: Initials of the customer, required if first name is not provided
        suffix:
          type: string
          description: Suffix of the customer
        lastName:
          type: string
          description: LastName of the customer
        emailaddress:
          type: string
          description: Email address of the customer
        dateOfBirth:
          type: string
          description: Date of birth of the customer, format d/m/Y
        status:
          type: string
          description: The status that you want to give this new lead. If the status does
            not exist yet it will be created and attached to this customer. You
            can filter your customers by this status on the customer lead
            dashboard.
    CustomerMortgageLead:
      type: object
      required:
        - firstName
        - lastName
        - emailaddress
      properties:
        firstName:
          type: string
          description: FirstName of the customer, required if initials are not provided
        initials:
          type: string
          description: Initials of the customer, required if first name is not provided
        suffix:
          type: string
          description: Suffix of the customer
        lastName:
          type: string
          description: LastName of the customer
        emailaddress:
          type: string
          description: Email address of the customer
        dateOfBirth:
          type: string
          description: Date of birth of the customer, format d/m/Y
        visitDate:
          type: string
          description: Last visit date of the customer, format d/m/Y
        dateOfTransfer:
          type: string
          description: The date of transfer for the mortgage (Datum overdracht), format
            d/m/Y
        dateFundReserves:
          type: string
          description: The expiration date for the fund reserves (Datum
            financieringsvoorbehoud), format d/m/Y
        dateBankGuarantee:
          type: string
          description: The expiration date for the bank guarantee (Datum bankgarantie),
            format d/m/Y
        status:
          type: string
          description: The status that you want to give this new lead. If the status does
            not exist yet it will be created and attached to this customer. You
            can filter your customers by this status on the customer lead
            dashboard.
    MaritalStatus:
      type: number
      enum:
        - null
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
    CustomerType:
      type: number
      enum:
        - null
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
    Gender:
      type: number
      enum:
        - null
        - 0
        - 1
    Damage:
      type: object
      required:
        - customer_id
      properties:
        customer_id:
          type: number
          description: ID of customer
        damage_number:
          type: string
          description: Number of damage
        licenseplate:
          type: string
          description: License plate of car of the insuree involved in damage
        policy_id:
          type: number
          description: ID of policy
        insurance_branche_code:
          type: number
          description: Branche code of insurance company
        policy_contractNumber:
          type: string
          description: Contract number of policy
        insurance_agency_id:
          type: number
          description: ID of insurance agency
        settled:
          type: boolean
          description: Is the damage settled?
        date:
          type: string
          description: Date when damage occured
        blame:
          type: boolean
          description: Is the insuree to blame?
        cause:
          type: string
          description: Cause of the damage
        notes:
          type: string
          description: Notes belonging to damage
        agency_id:
          type: number
          description: ID of agency
        agency_contact_id:
          type: number
          description: ID of contact of agency
        agency_contact:
          type: string
          description: Name of agency contact
        agency_phone:
          type: string
          description: Phone number of agency
        agency_emailaddress:
          type: string
          description: Email address of agency
        external_number:
          type: string
          description: External number of damage
        wa:
          type: number
          description: Liability insurance
        casco:
          type: number
          description: Insurance of object involved in damage (casco)
        deductible:
          type: number
          description: Amount that is deductible
        garage_id:
          type: number
          description: ID of garage involved
        garage_contact_id:
          type: number
          description: ID of contact of garage involved
        user_id:
          type: number
          description: ID of user
        trackingNumber:
          type: string
          description: Tracking number
        expert_id:
          type: number
          description: ID of expert involved
        expert_case_number:
          type: string
          description: Case number of expert
        pay_to:
          type: number
          description: Pay to
        status:
          type: number
          description: Status
        wa_at:
          type: string
          description: Liable at
        casco_at:
          type: string
          description: Casco at
        deductible_at:
          type: string
          description: Deductible at
        estimated:
          type: number
          description: Estimation
    Address:
      type: object
      properties:
        type:
          type: number
          description: Type of address
        postcode:
          type: string
          description: Postal code of the address
        houseNumber:
          type: string
          description: House number of the address
        streetName:
          type: string
          description: Street name of the address
        city:
          type: string
          description: City of the address
        houseNumberAddition:
          type: string
          description: House number addition of the address
        customer:
          type: number
          description: ID of the related customer
        active:
          type: boolean
          description: Is the address active?
        lat:
          type: number
          description: Latitude of the address
        lng:
          type: number
          description: Longitude of the address
        country:
          type: string
          description: Country of the address
    Document:
      type: object
      properties:
        name:
          type: string
          description: Naam van het document
        file:
          type: string
          description: Bestandslocatie van het document
        type:
          type: string
          description: Documenttype
        mime_type:
          type: string
          description: MIME-type van het document
        customer_id:
          type: number
          description: ID van klant
        documentcategory_id:
          type: number
          description: ID van categorie
        extension:
          type: string
          description: Bestandsextensie van het document
        migrated:
          type: boolean
          description: Is het document gemigreerd?
        filesize:
          type: number
          description: Bestandsgrootte van het document (in bytes)
        decoded:
          type: boolean
          description: Is het document gedecodeerd?
        user_id:
          type: number
          description: ID van gebruiker
    AXMessage:
      type: object
      properties:
        id:
          type: number
          description: The status of the AX Message; queued, pending, processed, failed
        version:
          type: string
          description: The version of the AX Message
        status:
          type: number
          description: "The status of the AX Message; {1: QUEUED, 2: PENDING, 3: PROCESSED,
            4: FAILED}"
        user_id:
          type: number
          description: OPTIONAL The id of the reviewing user
        customer_id:
          type: number
          description: OPTIONAL The id of the linked customer
        updated_at:
          type: string
          description: An ISO 8601 formatted string
    Dossier:
      type: object
      required:
        - uuid
      properties:
        uuid:
          type: number
          description: UUID of dossier
        customer_id:
          type: string
          description: Customer ID of dossier
        status:
          type: string
          description: Status of dossier
    EmailAccount:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
          description: Name of Emailaccount holder
        address:
          type: string
          description: Emailaddress of Emailaccount holder
        host:
          type: string
          description: Hostname of Emailaccount
        port:
          type: number
          description: Port of Emailaccount
        username:
          type: string
          description: Username of Emailaccount
        validate_cert:
          type: boolean
          description: Emailaccount has validation certificate?
        encryption:
          $ref: "#/components/schemas/EncryptionTypes"
        signature:
          type: string
          description: Signature of Emailaccount
        sync_enabled:
          type: boolean
          description: Is sync enabled?
        synced_at:
          type: string
          description: Date of sync, format d/m/Y
        locked:
          type: boolean
          description: Emailaccount locked?
        auto_match:
          type: boolean
          description: Auto match Emailaccount?
        auto_process:
          type: boolean
          description: Auto process Emailaccount?
        process_email_account_folder_id:
          type: number
          description: Branche code of insurance company
    EncryptionTypes:
      type: number
      enum:
        - null
        - 0
        - 1
        - 2
    Letter:
      type: object
      required:
        - name
        - address
        - content
        - customer_id
        - user_id
        - category_id
        - template_id
      properties:
        name:
          type: string
          description: Name of the letter
        address:
          type: string
          description: Address of the letter
        content:
          type: string
          description: Content of the letter
        customer_id:
          type: number
          description: ID of the customer
        user_id:
          type: number
          description: ID of the user
        for_instance_class:
          type: number
          description: For instance class of the letter
        for_instance_id:
          type: number
          description: For instance id of the letter
        category_id:
          type: number
          description: ID of the category of the letter
        template_id:
          type: number
          description: ID of the template of the letter
    Lock:
      type: object
      required:
        - lockable_type
        - lockable_id
        - user_id
      properties:
        lockable_type:
          type: string
          description: Type of the lockable
        lockable_id:
          type: number
          description: ID of the lockable
        user_id:
          type: number
          description: ID of the user
    Email:
      type: object
      properties: {}
    Template:
      type: object
      properties:
        id:
          type: number
          description: ID of template
        title:
          type: string
          description: Title of template
        nameInSystem:
          type: string
          description: Name in system of template
        content:
          type: string
          description: Content of template
        type:
          type: number
          description: Type of template
        primaryMail:
          type: string
          description: Primary mail of template
        category:
          type: number
          description: Category of template
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
        deleted_at:
          type: string
          description: Timestamp of deletion
        agency_id:
          type: number
          description: ID of agency of template
    Mortgage:
      type: object
      required:
        - customer_id
      properties:
        customer_id:
          type: number
          description: ID of the customer
        hypotheeknummer:
          type: string
          description: Number of mortgage
        koopsom:
          type: number
          description: Buying price of property
        onderpandsgegevens:
          type: string
          description: Credentials of collateral
        redenHypotheek:
          type: string
          description: Reason of mortgage
        hoofdsomHypotheek:
          type: number
          description: Main sum mortgage
        hypotheciareInschrijving:
          type: string
          description: Mortgage  registration
        taxateur_id:
          type: number
          description: ID of appraiser
        marktwaarde:
          type: number
          description: Market value of property
        datumTaxatie:
          type: string
          description: Date of taxation
        wozWaarde:
          type: number
          description: Cadastral value
        wozDatum:
          type: string
          description: Date of cadastral
        totaalSom:
          type: number
          description: Total sum
        bouwdepot:
          type: string
          description: Building fund of mortgage
        notaris_id:
          type: number
          description: ID of notary
        passeerdatum:
          type: string
          description: Date when the mortgage papers are signed by the notary
        verkopendMakelaar_id:
          type: number
          description: ID of realtor
        geldverstrekker_id:
          type: number
          description: ID of company that gave the mortgage
        label_id:
          type: number
          description: ID of label
        nhg:
          type: boolean
          description: Is mortgage under Nationale Hypotheek Garantie (NHG)?
        rate:
          type: number
          description: Rate of mortgage
        rangorde:
          type: number
          description: Rank of mortgage
        status:
          type: number
          description: Status of mortgage
        getekend:
          type: string
          description: Date of signing
        voor_verlenging:
          type: string
          description: Date before extension
        na_verlening:
          type: string
          description: Date after extension
        financiering:
          type: string
          description: Date of financing
        bankgarantie:
          type: string
          description: Date of bank guarantee
        passeerdatumVoortgang:
          type: string
          description: Date of passing date progress
        collateral_address:
          type: string
          description: Collateral address of mortgage
        collateral_city:
          type: string
          description: Collateral city of mortgage
        collateral_postcode:
          type: string
          description: Collateral postal code of mortgage
        collateral_housenumber:
          type: string
          description: Collateral house number of mortgage
        collateral_county:
          type: string
          description: Collateral county of mortgage
        restantHoofdsom:
          type: number
          description: Remainder of total sum of mortgage
        executiewaarde:
          type: number
          description: Execution value of mortgage
        type_woning:
          type: number
          description: ID type of property
        offerteNummer:
          type: number
          description: Quotation of mortgage
        datumAanvraag:
          type: string
          description: Date of application
        datumOfferte:
          type: string
          description: Date of quotation
        datumGeldigheidOfferte:
          type: string
          description: Date of validity for quotation
        datumOfferteGetekend:
          type: string
          description: Date of quotation signed
        vovVoorVerbouwing:
          type: number
          description: Vrije onderhandse verkoopwaarde (VOV) before construction
        vovNaVerbouwing:
          type: number
          description: Vrije onderhandse verkoopwaarde (VOV) after construction
        ewVoorVerbouwing:
          type: number
          description: Execution value before construction
        ewNaVerbouwing:
          type: number
          description: Execution value after construction
        trackingNumber:
          type: number
          description: Tracking number of mortgage
        collateral_addition:
          type: string
          description: Collateral addition of mortgage
        purchasing_broker_id:
          type: number
          description: ID of purchasing broker
        validity_unsigned_offer_date:
          type: string
          description: Validity of unsigned offer date
        validity_signed_offer_date:
          type: string
          description: Validity of signed offer date
        end_financing_reservation_date:
          type: string
          description: End of financing reservation date
        has_bank_guarantee_date:
          type: string
          description: Date of bank guarantee
        bank_guarantee_date:
          type: string
          description: Date of bank guarantee
        mortgage_property_id:
          type: number
          description: ID of mortgage property
        financier_agency_id:
          type: number
          description: ID of financier agency
        arrangement_type:
          type: number
          description: ID of arrangement
        existing_mortgage_number:
          type: string
          description: Number of existing mortgage number
        own_resources_amount:
          type: number
          description: Amount of own resources
        mutation_code:
          type: number
          description: Code of mutation of mortgage
        is_property_purchase:
          type: boolean
          description: Is property purchased?
        bank_guarantee_costs:
          type: number
          description: Costs of bank guarantee
        net_consultancy_costs:
          type: number
          description: Net consultancy costs
        mortgage_deed_cost_specification:
          type: number
          description: Costs of mortgage deed
        national_mortgage_guarantee_costs:
          type: number
          description: National mortgage guarantee costs
        fine_interest:
          type: number
          description: Fine intereset of mortgage
        loan_type:
          type: string
          description: Type of loan
        secondary_customer_id:
          type: number
          description: ID of secondary customer
        loan_to_value:
          type: number
          description: Value to loan of mortgage
        risk_class:
          type: number
          description: Risk class of mortgage
        risk_class_type:
          type: number
          description: Type of risk class of mortgage
    MortgagePart:
      type: object
      required:
        - mortgage_id
      properties:
        mortgage_id:
          type: number
          description: ID of mortgage
        hypotheeknummer:
          type: string
          description: Number of mortgage
        leningdeelnummer:
          type: string
          description: Part number of loan
        soortLening:
          type: string
          description: Sort of loan
        hoofdsom:
          type: number
          description: Main price
        begindatum:
          type: string
          description: Start date
        einddatum:
          type: string
          description: End date
        rente:
          type: number
          description: Interest
        rentevasteperiode:
          type: string
          description: Fixed interest period
        einddatumRentevast:
          type: string
          description: End date of fixed interest period
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of last updated
        begindatumRentevast:
          type: string
          description: Start date of fixed interest period
        renteType:
          type: number
          description: Type of intereset
        duur:
          type: number
          description: Duration
        hypotheekType:
          type: number
          description: Type of mortgage
        afsluitprovisie:
          type: number
          description: Commission
        bedenktijd:
          type: boolean
          description: Time for consideration
        bedenktijdStartDatum:
          type: string
          description: Start date of consideration
        type:
          type: number
          description: Type
        agency_code:
          type: string
          description: Code of agency
        tax_box_type:
          type: number
          description: The tax box type number
        repayment_type:
          type: number
          description: Type of repayment
        interest_agreement_type:
          type: number
          description: Type of interest agreement
        interest_cooling_off_period_type:
          type: number
          description: Type of interest cooling off period type
        interest_cooling_off_period_in_months:
          type: number
          description: Type of interest colling off period in months
        payment_term:
          type: number
          description: Payment term
        consumptive_percentage:
          type: number
          description: Consumptive percentage
        consumptive_amount:
          type: number
          description: Consumptive amount
        national_mortgage_guarantee:
          type: boolean
          description: National mortgage guarantee
        coverage_percentage:
          type: number
          description: Coverage percentage
        rate_based_on:
          type: number
          description: Rate based on
    Note:
      type: object
      required:
        - title
      properties:
        id:
          type: number
          description: ID of note
        title:
          type: string
          description: Title of note
        content:
          type: string
          description: Content of note
        datetime:
          type: string
          description: Datetime of note
        category_id:
          $ref: '#/components/schemas/CategoryEnum'
        entity_id:
          type: string
          description: ID of related entity
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
        deleted_at:
          type: string
          description: Timestamp of deletion
        user_id:
          type: string
          description: ID of user
        file:
          type: string
          description: File of note
        call_event_id:
          type: string
          description: ID of call event of note

      example:
        id: 1
        title: Notitie
        content: Call was made by customer XXX at 13:48
        datetime: 01-01-2018
        category_id: 1
        entity_id: "3"
        created_at: "2019-01-01 12:00:00"
        updated_at: "2019-01-02 12:00:00"
        deleted_at: "2019-01-03 12:00:00"
        user_id: "1"
        file: test
        call_event_id: test
    Signal:
      type: object
      properties:
        id:
          type: number
          description: ID of signal
        signal_query_id:
          type: number
          description: ID of signal query
        customer_id:
          type: number
          description: ID of customer
        status:
          type: number
          description: Status of signal
        snoozed_until:
          type: string
          description: Signal snoozed until date
        comment:
          type: string
          description: Comment of signal
        finished_by:
          type: number
          description: Signal finished by
        finished_at:
          type: string
          description: Signal finished at date
        created_at:
          type: string
          description: Signal created at timestamp
        updated_at:
          type: string
          description: Signal latest update timestamp
    Account:
      type: object
      required:
        - type
        - number
        - customer_id
      properties:
        id:
          type: number
          description: ID of account
        type:
          type: number
          description: Type of account
        active:
          type: boolean
          description: Is account active?
        number:
          type: string
          description: Number of account
        customer_id:
          type: number
          description: ID of customer of account
        inzake:
          type: string
          description: Subject
        joint_id:
          type: string
          description: ID of joint of account
        primary:
          type: boolean
          description: Is account primary?
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
    Office:
      type: object
      required:
        - name
      properties:
        id:
          type: number
          description: ID of office
        name:
          type: string
          description: Name of office
        owner_id:
          type: number
          description: ID of owner of office
        code:
          type: string
          description: Code of office
        phone:
          type: string
          description: Phone number of office
        postcode:
          type: string
          description: Postal code of office
        houseNumber:
          type: string
          description: House number of office
        streetName:
          type: string
          description: Street name of office
        city:
          type: string
          description: City of office
        houseNumberAddition:
          type: string
          description: House number addition of office
        email:
          type: string
          description: Email address of office
        website:
          type: string
          description: Website of office
    Search:
      type: object
      properties:
        id:
          type: number
          description: ID of search
        name:
          type: string
          description: Name of search
        content:
          type: string
          description: Content of search
        user_id:
          type: number
          description: ID of user
        public:
          type: boolean
          description: Is search public?
        created_at:
          type: string
          description: Timestamp of creation
        updated_at:
          type: string
          description: Timestamp of latest update
    OAuth_Header_example_request: {}
    OAuth_Query_example_request: {}
    Access_token: {}
    Refresh_Token: {}
    Access_Token_Request:
      type: object
      required:
        - client_id
        - client_secret
        - grant_type
        - code
        - redirect_uri
      properties:
        client_id:
          type: string
          description: Your client id
        client_secret:
          type: string
          description: Your client secret
        grant_type:
          type: string
          description: The grant type
        code:
          type: string
          description: The code from the previous request
        redirect_uri:
          type: string
          description: Your callback URL.
    Refresh_Token_Request:
      type: object
      required:
        - grant_type
        - refresh_token
      properties:
        grant_type:
          type: string
          description: Specify the refresh grant type
        refresh_token:
          type: string
          description: The refresh token provided to you when you first requested the
            access token.
    Access_Token_Response:
      type: object
      properties:
        access_token:
          type: string
          description: Your new oauth access token
        token_type:
          type: string
          description: The token type
        expires_in:
          type: number
          description: The number of seconds this token is valid for
        refresh_token:
          type: string
          description: The refresh token that can be used to request a new access token
            when the old one expires or is about to expire.
    OAuth_grant_request:
      type: object
      required:
        - grant_type
      properties:
        grant_type:
          type: string
    OAuth_valid_response:
      type: object
      required:
        - access_token
        - scope
        - expires_in
        - token_type
      properties:
        access_token:
          type: string
          description: valid JWT
        scope:
          type: string
          description: scopes of current token
        expires_in:
          type: number
        token_type:
          type: string
    Server_Example_Success_Response:
      type: object
      required:
        - status
      properties:
        status:
          type: string
    Server_Missing_Parameter_Response:
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
    Server_Access_Denied_Response:
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
    Invalid_Scope_Response:
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
    Invalid_Client_Response:
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
    AX_Message: {}
    CategoryEnum:
      type: number
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
      description: >
        An enum describing all categories of items found on the customer dashboard

        Category:
          * `1` - Customer
          * `2` - Banking
          * `3` - Insurance
          * `4` - Damage
          * `5` - Mortgage
          * `6` - Mailing
          * `7` - Dossier
          * `8` - Credit
          * `9` - Income
          * `10` - Retirement
          * `11` - Possession
          * `12` - Obligation
          * `13` - Current living condition
    NotFound:
      type: object
      properties:
        errors:
          type: array
          description: An array of error messages
          items: {}
    Unauthorized:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: object
          description: A description of the error
          properties:
            code:
              type: string
            message:
              type: string
    UnprocessableEntity:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: object
          description: A description of the error
          properties:
            code:
              type: string
            message:
              type: string
            errors:
              type: array
              items:
                type: string
  responses:
    NotFound:
      description: This specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
          examples:
            NotFoundExample:
              $ref: '#/components/examples/NotFoundExample'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Unauthorized'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/UnauthorizedExample'
    UnprocessableEntity:
      description: The given data did not pass validation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableEntity'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/UnprocessableEntityExample'
    Created:
      description: The resource was succesfully created
      headers: {}
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Created'
          examples:
            CreatedExample:
              $ref: '#/components/examples/CreatedExample'
  examples:
    PaginationExample:
      value:
        pagination:
          total: 1
          count: 1
          per_page: 15
          current: 1
          total_pages: 1
          links: []
    NotFoundExample:
      summary: 404 Not Found
      value:
        errors:
          - message: Not found
    UnauthorizedExample:
      summary: 401 Unauthorized
      value:
        success: false
        error:
          - code: 1
            type: generic_exception
            message: Generic error
    UnprocessableEntityExample:
      summary: 422 Unprocessable Entity
      value:
        success: false
        error:
          - code: 1
            type: generic_exception
            errors: []
    CreatedExample:
      summary: 200 OK
      value:
        success: true
        id: "1"